syntax = "proto3";

package api;

option go_package = "github.com/adarko-io/platform-api/go/v4/platform";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "platform/platform_shared_enums.proto";


// DeviceService is the service providing API methods for managing devices.
service PlatformDeviceService {
  // Create the given device.
  rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/devices"
      body: "*"
    };
  }

  // Get returns the device for the given EUI.
  rpc Get(GetDeviceRequest) returns (GetDeviceResponse) {
    option (google.api.http) = {
      get: "/api/devices/{eui}"
    };
  }

  // Update the given device.
  rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/devices/{device.eui}"
      body: "*"
    };
  }

  // Delete the device with the given EUI.
  rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/devices/{eui}"
    };
  }

  // Get the list of devices.
  rpc List(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get: "/api/devices"
    };
  }

}

message Device {
  // EUI (EUI64).
  string eui = 1;

  // Name.
  string name = 2;

  // Description.
  string description = 3;

  // Application ID (UUID).
  string application_id = 4;

  // Device is disabled.
  bool is_disabled = 5;

  // SerialNo.
  string serial_number = 6;

  // Device Type.
  DeviceType device_type = 7;

  // Variables (user defined).
  // These variables can be used together with integrations to store tokens /
  // secrets that must be configured per device. These variables are not
  // exposed in the event payloads.
  map<string, string> variables = 8;

  // Tags (user defined).
  // These tags can be used to add additional information to the device.
  // These tags are exposed in all the integration events.
  map<string, string> tags = 9;

}

message DeviceStatus {
  // The device margin status
  // -32..32: The demodulation SNR ration in dB
  int32 margin = 1;

  // Device is connected to an external power source.
  bool external_power_source = 2;

  // Device battery level as a percentage.
  // -1 when the battery level is not available.
  float battery_level = 3;
}

message DeviceListItem {
  // EUI (EUI64).
  string eui = 1;

  // Created at timestamp.
  google.protobuf.Timestamp created_at = 2;

  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 3;

  // Last seen at timestamp.
  google.protobuf.Timestamp last_seen_at = 4;

  // Name.
  string name = 5;

  // Description.
  string description = 6;

  // Device-profile ID (UUID).
  string device_profile_id = 7;

  // Device-profile name.
  string device_profile_name = 8;

  // Device status.
  DeviceStatus device_status = 9;

  // Device tags.
  map<string, string> tags = 10;
}

message CreateDeviceRequest {
  // Device object.
  Device device = 1;
}

message GetDeviceRequest {
  // EUI (EUI64).
  string eui = 1;
}

message GetDeviceResponse {
  // Device object.
  Device device = 1;

  // Created at timestamp.
  google.protobuf.Timestamp created_at = 2;

  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 3;

  // Last seen at timestamp.
  google.protobuf.Timestamp last_seen_at = 4;

  // Device status.
  DeviceStatus device_status = 5;

}

message UpdateDeviceRequest {
  // Device object.
  Device device = 1;
}

message DeleteDeviceRequest {
  // EUI (EUI64).
  string eui = 1;
}

message ListDevicesRequest {
  // Max number of devices to return in the result-set.
  // If not set, it will be treated as 0, and the response will only return the total_count.
  uint32 limit = 1;

  // Offset in the result-set (for pagination).
  uint32 offset = 2;

  // If set, the given string will be used to search on name (optional).
  string search = 3;

  // Application ID (UUID) to filter devices on.
  string application_id = 4;

  enum OrderBy {
    NAME = 0;
    EUI = 1;
    LAST_SEEN_AT = 2;
    DEVICE_PROFILE_NAME = 3;
  }

  // If set, the given value will be used to sort by (optional).
  OrderBy order_by = 5;

  // If set, the sorting direction will be decending (default = ascending) (optional).
  bool order_by_desc = 6;

  // Tags to filter devices on.
  map<string, string> tags = 7;


}

message ListDevicesResponse {
  // Total number of devices.
  uint32 total_count = 1;

  // Result-set.
  repeated DeviceListItem result = 2;
}
