syntax = "proto3";

package platform;

option go_package = "github.com/adarko-io/platform-api/go/v4/platform";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "platform/shared_enums.proto";
import "google/protobuf/struct.proto";

// DataService is the service providing API methods for managing device data.
// This service is designed to work with TimescaleDB for time-series data storage.
service DataService {
  // Insert device data point(s).
  rpc Insert(InsertDataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/data"
      body: "*"
    };
  }

  // Insert device data from datalogger (specific endpoint for datalogger integration).
  rpc InsertFromDatalogger(InsertFromDataloggerRequest) returns (InsertFromDataloggerResponse) {
    option (google.api.http) = {
      post: "/api/device-data"
      body: "*"
    };
  }

  // Get device data for a specific device within a time range.
  rpc GetDeviceData(GetDeviceDataRequest) returns (GetDeviceDataResponse) {
    option (google.api.http) = {
      get: "/api/data/devices/{eui}"
    };
  }

  // Get aggregated device data (for dashboards, analytics).
  rpc GetAggregatedData(GetAggregatedDataRequest) returns (GetAggregatedDataResponse) {
    option (google.api.http) = {
      post: "/api/data/aggregated"
      body: "*"
    };
  }

  // Get latest data point for a device.
  rpc GetLatestData(GetLatestDataRequest) returns (GetLatestDataResponse) {
    option (google.api.http) = {
      get: "/api/data/devices/{eui}/latest"
    };
  }

  // Get data for multiple devices.
  rpc GetMultiDeviceData(GetMultiDeviceDataRequest) returns (GetMultiDeviceDataResponse) {
    option (google.api.http) = {
      post: "/api/data/devices/bulk"
      body: "*"
    };
  }

  // Delete device data (for GDPR compliance, data retention).
  rpc DeleteDeviceData(DeleteDeviceDataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/data/devices/{eui}"
    };
  }

  // Get data statistics for a device or application.
  rpc GetDataStats(GetDataStatsRequest) returns (GetDataStatsResponse) {
    option (google.api.http) = {
      post: "/api/data/stats"
      body: "*"
    };
  }

  // Update device location (latest location is stored separately).
  rpc UpdateDeviceLocation(UpdateDeviceLocationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/data/devices/{eui}/location"
      body: "*"
    };
  }

  // Get device location (current/latest location).
  rpc GetDeviceLocation(GetDeviceLocationRequest) returns (GetDeviceLocationResponse) {
    option (google.api.http) = {
      get: "/api/data/devices/{eui}/location"
    };
  }

  // Get locations for multiple devices.
  rpc GetMultiDeviceLocation(GetMultiDeviceLocationRequest) returns (GetMultiDeviceLocationResponse) {
    option (google.api.http) = {
      post: "/api/data/devices/locations"
      body: "*"
    };
  }

  // Delete device location.
  rpc DeleteDeviceLocation(DeleteDeviceLocationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/data/devices/{eui}/location"
    };
  }
}

// DeviceData represents a single data point from a device or gateway.
// Supports data from multiple protocols: LoRaWAN, Cellular, HTTP, MQTT, TCP, UDP, CoAP.
message DeviceData {
  // EUI (EUI64) - Device EUI or Gateway EUI.
  string eui = 1;

  // Timestamp when the data was received.
  google.protobuf.Timestamp timestamp = 2;

  // Transport protocol used.
  TransportProtocol transport_protocol = 3;

  // Raw payload data (base64 encoded).
  google.protobuf.Value data = 4;

  // Decoded data (JSON object as string).
  string decoded_data = 5;

  // Signal quality metrics (protocol-specific).
  SignalMetrics signal_metrics = 6;

  // Device location (for location history tracking).
  DeviceLocation location = 7;

  // Protocol-specific metadata.
  ProtocolMetadata protocol_metadata = 8;

  // Additional metadata.
  map<string, string> metadata = 9;
}

// Signal quality metrics (protocol-specific).
message SignalMetrics {
  // RSSI (Received Signal Strength Indicator) in dBm (LoRaWAN, Cellular).
  int32 rssi = 1;

  // SNR (Signal-to-Noise Ratio) in dB (LoRaWAN).
  float snr = 2;

  // Spreading factor (LoRaWAN specific).
  uint32 spreading_factor = 3;

  // Bandwidth in Hz (LoRaWAN specific).
  uint32 bandwidth = 4;

  // Frequency in Hz (LoRaWAN specific).
  uint64 frequency = 5;

  // Signal strength percentage (0-100) for other protocols.
  uint32 signal_strength_percent = 6;

  // Link quality indicator (cellular specific).
  uint32 lqi = 7;
}

// Protocol-specific metadata for different transport protocols.
message ProtocolMetadata {
  oneof protocol_data {
    // LoRaWAN specific metadata.
    LoRaWANMetadata lorawan = 1;
    
    // Cellular network metadata (for all cellular protocols).
    CellularMetadata cellular = 2;
    
    // HTTP specific metadata (works with both cellular and WiFi/Ethernet).
    HTTPMetadata http = 3;
    
    // MQTT specific metadata (works with both cellular and WiFi/Ethernet).
    MQTTMetadata mqtt = 4;
    
    // TCP specific metadata (works with both cellular and WiFi/Ethernet).
    TCPMetadata tcp = 5;
    
    // UDP specific metadata (works with both cellular and WiFi/Ethernet).
    UDPMetadata udp = 6;
    
    // CoAP specific metadata (works with both cellular and WiFi/Ethernet).
    CoAPMetadata coap = 7;
    
    // WebSocket specific metadata.
    WebSocketMetadata websocket = 8;
  }
}

// LoRaWAN specific metadata.
message LoRaWANMetadata {
  // Frame counter.
  uint32 f_cnt = 1;
  
  // Frame port.
  uint32 f_port = 2;
  
  // Data rate.
  string data_rate = 3;
  
  // Confirmed/unconfirmed uplink.
  bool confirmed = 4;
  
  // Gateway count that received the message.
  uint32 gateway_count = 5;
}

// Cellular specific metadata.
message CellularMetadata {
  // IMEI of the device.
  string imei = 1;
  
  // IMSI of the SIM card.
  string imsi = 2;
  
  // Cell ID.
  string cell_id = 3;
  
  // Mobile Country Code.
  string mcc = 4;
  
  // Mobile Network Code.
  string mnc = 5;
  
  // Location Area Code.
  string lac = 6;
  
  // Network type (2G, 3G, 4G, 5G, NB-IoT, LTE-M).
  string network_type = 7;
}

// HTTP specific metadata.
message HTTPMetadata {
  // HTTP method used.
  string method = 1;
  
  // Request headers.
  map<string, string> headers = 2;
  
  // Query parameters.
  map<string, string> query_params = 3;
  
  // HTTP status code (for responses).
  uint32 status_code = 4;
  
  // Content type.
  string content_type = 5;
  
  // User agent.
  string user_agent = 6;
  
  // Remote IP address.
  string remote_ip = 7;
}

// MQTT specific metadata.
message MQTTMetadata {
  // Topic the message was published to.
  string topic = 1;
  
  // QoS level (0, 1, 2).
  uint32 qos = 2;
  
  // Retain flag.
  bool retain = 3;
  
  // Message ID.
  string message_id = 4;
  
  // Client ID.
  string client_id = 5;
  
  // Broker hostname/IP.
  string broker = 6;
}

// TCP specific metadata.
message TCPMetadata {
  // Source IP address.
  string source_ip = 1;
  
  // Source port.
  uint32 source_port = 2;
  
  // Destination IP address.
  string destination_ip = 3;
  
  // Destination port.
  uint32 destination_port = 4;
  
  // Connection state.
  string connection_state = 5;
}

// UDP specific metadata.
message UDPMetadata {
  // Source IP address.
  string source_ip = 1;
  
  // Source port.
  uint32 source_port = 2;
  
  // Destination IP address.
  string destination_ip = 3;
  
  // Destination port.
  uint32 destination_port = 4;
  
  // Packet size.
  uint32 packet_size = 5;
}

// CoAP specific metadata.
message CoAPMetadata {
  // CoAP method (GET, POST, PUT, DELETE).
  string method = 1;
  
  // URI path.
  string uri_path = 2;
  
  // Message type (CON, NON, ACK, RST).
  string message_type = 3;
  
  // Message ID.
  uint32 message_id = 4;
  
  // Token.
  bytes token = 5;
  
  // Response code.
  string response_code = 6;
  
  // Content format.
  uint32 content_format = 7;
}

// WebSocket specific metadata.
message WebSocketMetadata {
  // WebSocket subprotocol.
  string subprotocol = 1;
  
  // Message type (text, binary, ping, pong, close).
  string message_type = 2;
  
  // WebSocket endpoint URL.
  string endpoint = 3;
  
  // Connection state.
  string connection_state = 4;
  
  // Remote IP address.
  string remote_ip = 5;
}

// Device location information.
message DeviceLocation {
  // Latitude in decimal degrees.
  double latitude = 1;

  // Longitude in decimal degrees.
  double longitude = 2;

  // Altitude in meters.
  double altitude = 3;

  // Accuracy in meters.
  float accuracy = 4;

  // Location source.
  LocationSource source = 5;
}

// NOTE: Enums moved to shared_enums.proto to avoid conflicts between services.

// Request to insert device data from datalogger.
message InsertFromDataloggerRequest {
  // Local device data ID (UUID from datalogger storage).
  string id = 1;

  // Device EUI (EUI64 as string).
  string eui = 2;

  // Protocol used (e.g., "mqtt-lorawan", "mqtt", "tcp", "udp").
  string protocol = 3;

  // Processed data (JSON string containing decoded sensor readings).
  google.protobuf.Value data = 4;

  // Original data (raw message as received, JSON string).
  google.protobuf.Value original_data = 5;

  // Timestamp when data was received by datalogger.
  google.protobuf.Timestamp received_at = 6;

  // Optional: Additional metadata.
  map<string, string> metadata = 7;
}

// Response from inserting datalogger data.
message InsertFromDataloggerResponse {
  // Success status.
  bool success = 1;

  // Message (error message if success=false).
  string message = 2;

  // Assigned data ID (if applicable).
  string data_id = 3;
}

// Request to insert device data.
message InsertDataRequest {
  // Single data point or batch of data points.
  repeated DeviceData data = 1;
}

// Request to get device data.
message GetDeviceDataRequest {
  // EUI (EUI64).
  string eui = 1;

  // Start time for data range.
  google.protobuf.Timestamp start_time = 2;

  // End time for data range.
  google.protobuf.Timestamp end_time = 3;

  // Maximum number of data points to return.
  uint32 limit = 4;

  // Offset for pagination.
  uint32 offset = 5;

  // Include decoded data in response.
  bool include_decoded = 6;

  // Include signal metrics in response.
  bool include_signal_metrics = 7;

  // Filter by transport protocol.
  repeated TransportProtocol transport_protocols = 8;

  // Filter by frame port (LoRaWAN specific).
  repeated uint32 f_ports = 9;

  // Filter by MQTT topics (MQTT specific).
  repeated string mqtt_topics = 10;

  // Filter by HTTP methods (HTTP specific).
  repeated string http_methods = 11;
}

// Response containing device data.
message GetDeviceDataResponse {
  // Total count of data points available.
  uint32 total_count = 1;

  // Data points.
  repeated DeviceData data = 2;
}

// Request for aggregated data.
message GetAggregatedDataRequest {
  // EUI(s) to get data for.
  repeated string euis = 1;

  // Start time for data range.
  google.protobuf.Timestamp start_time = 2;

  // End time for data range.
  google.protobuf.Timestamp end_time = 3;

  // Aggregation type.
  AggregationType aggregation = 4;

  // Time interval for aggregation.
  TimeInterval interval = 5;

  // Fields to aggregate (e.g., "temperature", "humidity").
  repeated string fields = 6;

  // Group by device (if false, aggregate across all devices).
  bool group_by_device = 7;
}

// Aggregated data point.
message AggregatedDataPoint {
  // Timestamp (bucket start time).
  google.protobuf.Timestamp timestamp = 1;

  // EUI (if grouped by device).
  string eui = 2;

  // Aggregated values by field name.
  map<string, double> values = 3;

  // Count of data points in this bucket.
  uint32 count = 4;
}

// Response containing aggregated data.
message GetAggregatedDataResponse {
  // Aggregated data points.
  repeated AggregatedDataPoint data = 1;
}

// Request to get latest data.
message GetLatestDataRequest {
  // EUI (EUI64).
  string eui = 1;

  // Include decoded data in response.
  bool include_decoded = 2;

  // Include signal metrics in response.
  bool include_signal_metrics = 3;
}

// Response containing latest data.
message GetLatestDataResponse {
  // Latest data point (null if no data available).
  DeviceData data = 1;
}

// Request for multi-device data.
message GetMultiDeviceDataRequest {
  // EUIs to get data for.
  repeated string euis = 1;

  // Start time for data range.
  google.protobuf.Timestamp start_time = 2;

  // End time for data range.
  google.protobuf.Timestamp end_time = 3;

  // Maximum number of data points per device.
  uint32 limit_per_device = 4;

  // Include decoded data in response.
  bool include_decoded = 5;
}

// Response containing multi-device data.
message GetMultiDeviceDataResponse {
  // Data grouped by EUI.
  map<string, GetDeviceDataResponse> device_data = 1;
}

// Request to delete device data.
message DeleteDeviceDataRequest {
  // EUI (EUI64).
  string eui = 1;

  // Start time for deletion range (optional).
  google.protobuf.Timestamp start_time = 2;

  // End time for deletion range (optional).
  google.protobuf.Timestamp end_time = 3;
}

// Request for data statistics.
message GetDataStatsRequest {
  // EUI (optional, if not set, stats for all devices).
  string eui = 1;

  // Start time for stats range.
  google.protobuf.Timestamp start_time = 2;

  // End time for stats range.
  google.protobuf.Timestamp end_time = 3;
}

// Data statistics.
message DataStats {
  // Total number of data points.
  uint64 total_count = 1;

  // First data timestamp.
  google.protobuf.Timestamp first_timestamp = 2;

  // Last data timestamp.
  google.protobuf.Timestamp last_timestamp = 3;

  // Average data rate (messages per hour).
  double avg_data_rate = 4;

  // Unique devices count (for application stats).
  uint32 unique_devices = 5;

  // Data size statistics.
  DataSizeStats size_stats = 6;
}

// Data size statistics.
message DataSizeStats {
  // Total bytes stored.
  uint64 total_bytes = 1;

  // Average message size in bytes.
  double avg_message_size = 2;

  // Minimum message size in bytes.
  uint32 min_message_size = 3;

  // Maximum message size in bytes.
  uint32 max_message_size = 4;
}

// Response containing data statistics.
message GetDataStatsResponse {
  // Statistics.
  DataStats stats = 1;
}

// Request to update device location.
message UpdateDeviceLocationRequest {
  // EUI (EUI64).
  string eui = 1;

  // Device location.
  DeviceLocation location = 2;

  // Timestamp when location was updated (optional, defaults to current time).
  google.protobuf.Timestamp timestamp = 3;

  // Source that provided this location update.
  string source_info = 4;
}

// Request to get device location.
message GetDeviceLocationRequest {
  // EUI (EUI64).
  string eui = 1;
}

// Response containing device location.
message GetDeviceLocationResponse {
  // EUI (EUI64).
  string eui = 1;

  // Device location.
  DeviceLocation location = 2;

  // Timestamp when location was last updated.
  google.protobuf.Timestamp updated_at = 3;

  // Source that provided this location.
  string source_info = 4;
}

// Request to get locations for multiple devices.
message GetMultiDeviceLocationRequest {
  // EUIs to get locations for.
  repeated string euis = 1;
}

// Response containing multiple device locations.
message GetMultiDeviceLocationResponse {
  // Device locations grouped by EUI.
  map<string, GetDeviceLocationResponse> locations = 1;
}

// Request to delete device location.
message DeleteDeviceLocationRequest {
  // EUI (EUI64).
  string eui = 1;
}
