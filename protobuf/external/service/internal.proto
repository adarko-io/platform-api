syntax = "proto3";

package service;

option go_package = "github.com/adarko-io/platform-api/go/v4/external/service";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "external/service/user.proto";


// InternalService is the service providing API endpoints for internal usage.
service InternalService {
  // Log in a user
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/internal/login"
      body: "*"
    };
  }

  // Get the current user's profile
  rpc Profile(google.protobuf.Empty) returns (ProfileResponse) {   
    option (google.api.http) = {
      get: "/api/internal/profile"
    };
  }

  // Perform a global search.
  rpc GlobalSearch(GlobalSearchRequest) returns (GlobalSearchResponse) {    
    option (google.api.http) = {
      post: "/api/internal/search"
      body: "*"
    };
  }

  // CreateApiKey creates the given API key.
  rpc CreateApiKey(CreateApiKeyRequest) returns (CreateApiKeyResponse) {    
    option (google.api.http) = {
      post: "/api/internal/apikeys"
      body: "*"
    };
  }

  // DeleteApiKey deletes the API key.
  rpc DeleteApiKey(DeleteApiKeyRequest) returns (google.protobuf.Empty) {   
    option (google.api.http) = {
      delete: "/api/internal/apikeys/{id}"
    };
  }

  // ListApiKeys lists the available API keys.
  rpc ListApiKeys(ListApiKeysRequest) returns (ListApiKeysResponse) {   
    option (google.api.http) = {
      get: "/api/internal/apikeys"
    };
  }

  // Stream frame for the given Gateway ID.
  rpc StreamGatewayFrames(StreamGatewayFramesRequest) returns (stream LogItem) {}
  // Stream frames for the given Device EUI.
  rpc StreamDeviceFrames(StreamDeviceFramesRequest) returns (stream LogItem) {}

  // Stream events for the given Device EUI.
  rpc StreamDeviceEvents(StreamDeviceEventsRequest) returns (stream LogItem) {}

}

message ApiKey {
  // API key ID.
  // This value will be automatically generated on create.
  string id = 1;

  // Name.
  string name = 2;

  // Is global admin key.
  bool is_admin = 3;

  // Tenant ID.
  // In case the API key is intended to manage resources under a single tenant.
  string tenant_id = 4;
}

message CreateApiKeyRequest {
  // The API key to create.
  ApiKey api_key = 1;
}

message CreateApiKeyResponse {
  // API key ID.
  string id = 1;

  // API token for authentication API requests.
  string token = 2;
}

message DeleteApiKeyRequest {
  // API key ID.
  string id = 1;
}

message ListApiKeysRequest {
  // Max number of items to return.
  // If not set, it will be treated as 0, and the response will only return the total_count.
  uint32 limit = 1;

  // Offset in the result-set (for pagination).
  uint32 offset = 2;

  // Return only admin keys.
  bool is_admin = 3;

  // Filter on tenant ID.
  string tenant_id = 4;
}

message ListApiKeysResponse {
  // Total number of API keys.
  uint32 total_count = 1;

  repeated ApiKey result = 2;
}

// Defines a tenant to which the user is associated.
message UserTenantLink {
  // Created at timestamp.
  google.protobuf.Timestamp created_at = 1;

  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 2;

  // Tenant ID.
  string tenant_id = 3;

  // User is admin within the context of this tenant.
  // There is no need to set the is_device_admin and is_gateway_admin flags.
  bool is_admin = 4;

  // User is able to modify device related resources (applications,
  // device-profiles, devices, multicast-groups).
  bool is_editor = 5;

  // User is able to viewer.
  bool is_viewer = 6;
}

message LoginRequest {
  // Email of the user.
  string email = 1;

  // Password of the user.
  string password = 2;
}

message LoginResponse {
  // The JWT tag to be used to access chirpstack-application-server interfaces.
  string jwt = 1;
}

message ProfileResponse {
  // User object.
  User user = 1;

  // Tenants to which the user is associated.
  repeated UserTenantLink tenants = 3;
}

message GlobalSearchRequest {
  // Search query.
  string search = 1;

  // Max number of results to return.
  // If not set, it will be treated as 0, and the response will only return the total_count.
  int64 limit = 2;

  // Offset offset of the result-set (for pagination).
  int64 offset = 3;
}

message GlobalSearchResponse { repeated GlobalSearchResult result = 1; }

message GlobalSearchResult {
  // Record kind.
  string kind = 1;

  // Search score.
  float score = 2;

  // Organization id.
  string tenant_id = 3;

  // Organization name.
  string tenant_name = 4;

  // Application id.
  string application_id = 5;

  // Application name.
  string application_name = 6;

  // Device EUI (hex encoded).
  string eui = 7;

  // Device name.
  string device_name = 8;

  
}


message LogItem {
  // ID.
  string id = 1;

  // Timestamp.
  google.protobuf.Timestamp time = 2;

  // Message.
  string description = 3;

  // Body.
  string body = 4;

  // Properties.
  map<string, string> properties = 5;
}

message StreamGatewayFramesRequest {
  // Gateway ID (EUI64).
  string gateway_id = 1;
}

message StreamDeviceFramesRequest {
  // Device EUI.
  string eui = 1;
}

message StreamDeviceEventsRequest {
  // Device EUI.
  string eui = 1;
}
