syntax = "proto3";

package api;

option go_package = "github.com/adarko-io/platform-api/go/v4/external/service";

import "external/service/shared_enums.proto";

// Simplified LoRaWAN Device definition for inventory integration
// This defines the minimal required fields for device configuration
// Full LoRaWAN device management is handled by the console-lorawan-api service
message LoRaWANDevice {
  // Device EUI (unique identifier).
  string dev_eui = 1;

  // Device name.
  string name = 2;

  // Device description.
  string description = 3;

  // Application identifier.
  string application_id = 4;

  // DevAddr (device address). 
  // Only used with ABP (activation-by-personalization).
  string dev_addr = 5;

  // Device join mode.
  JoinMode join_mode = 6;

  // Device class.
  DeviceClass device_class = 7;

  // Regional parameters region.
  Region region = 8;

  // MAC version.
  MacVersion mac_version = 9;

  // Regional parameters revision.
  RegParamsRevision reg_params_revision = 10;

  // ADR (adaptive data rate) enabled.
  bool adr_enabled = 11;

  // Expected uplink interval in seconds.
  uint32 expected_uplink_interval_sec = 12;

  // Device tags.
  map<string, string> tags = 13;

  // Device variables.
  map<string, string> variables = 14;

  // Skip frame-counter validation.
  bool skip_fcnt_check = 15;

  // Device is disabled.
  bool is_disabled = 16;

  // JoinEUI (optional, EUI64).
  // This field will be automatically set / updated on OTAA. However, in some
  // cases it must be pre-configured. For example to allow OTAA using a Relay.
  string join_eui = 17;

  // Device Keys for OTAA
  DeviceKeys keys = 18;

  // Device activation object.
  DeviceActivation device_activation = 19;

  // ADR algorithm ID.
  string adr_algorithm_id = 20;

  // Payload codec runtime.
  CodecRuntime payload_codec_runtime = 21;

  // Payload codec script.
  string payload_codec_script = 22;

  // Class-B timeout (seconds).
  uint32 class_b_timeout = 23;

  // Class-B ping-slots per beacon period.
  uint32 class_b_ping_slot_nb_k = 24;

  // Class-B ping-slot DR.
  uint32 class_b_ping_slot_dr = 25;

  // Class-B ping-slot freq (Hz).
  uint32 class_b_ping_slot_freq = 26;

  // Class-C timeout (seconds).
  uint32 class_c_timeout = 27;

  // RX1 delay (for ABP).
  uint32 abp_rx1_delay = 28;

  // RX1 DR offset (for ABP).
  uint32 abp_rx1_dr_offset = 29;

  // RX2 DR (for ABP).
  uint32 abp_rx2_dr = 30;

  // RX2 frequency (for ABP, Hz).
  uint32 abp_rx2_freq = 31;

  // Flush queue on device activation.
  bool flush_queue_on_activate = 32;

  // Device-status request interval (times / day).
  uint32 device_status_req_interval = 33;
}

// Device Keys for OTAA
message DeviceKeys {
  // DevEUI (EUI64).
  string dev_eui = 1;

  // Network root key (128 bit).
  // Note: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey'!
  string nwk_key = 2;

  // Application root key (128 bit).
  // Note: This field only needs to be set for LoRaWAN 1.1.x devices!
  string app_key = 3;
}

// Device activation object for ABP
message DeviceActivation {
  // Device EUI (EUI64).
  string dev_eui = 1;

  // Device address (HEX encoded).
  string dev_addr = 2;

  // Application session key (HEX encoded).
  string app_s_key = 3;

  // Network session encryption key (HEX encoded).
  // Note: For ABP in LoRaWAN 1.0.x, use this, the serving and the forwarding
  // network session integrity key fields with the LoRaWAN 1.0.x 'NwkSKey'!
  string nwk_s_enc_key = 4;

  // Serving network session integrity key (HEX encoded).
  string s_nwk_s_int_key = 5;

  // Forwarding network session integrity key (HEX encoded).
  string f_nwk_s_int_key = 6;

  // Uplink frame-counter.
  uint32 f_cnt_up = 7;

  // Downlink network frame-counter.
  uint32 n_f_cnt_down = 8;

  // Downlink application frame-counter.
  uint32 a_f_cnt_down = 9;
}

// LoRaWAN Gateway definition for inventory integration
message LoRaWANGateway {
  // Gateway ID (EUI64).
  string gateway_id = 1;

  // Name.
  string name = 2;

  // Description.
  string description = 3;

  // Gateway location.
  Location location = 4;

  // Tags.
  map<string, string> tags = 5;

  // Metadata (provided by the gateway).
  map<string, string> metadata = 6;

  // Stats interval (seconds).
  // This defines the expected interval in which the gateway sends its
  // statistics.
  uint32 stats_interval = 7;

  // Gateway region.
  Region region = 8;

  // Gateway model.
  string model = 9;

  // Firmware version.
  string firmware_version = 10;

  // Hardware version.
  string hardware_version = 11;

  // Network configuration.
  map<string, string> network_config = 12;
}

// Location information (simplified from util.Location)
message Location {
  // Latitude.
  double latitude = 1;

  // Longitude.
  double longitude = 2;

  // Altitude.
  double altitude = 3;

  // Location source.
  LocationSource source = 4;

  // Accuracy (meters).
  float accuracy = 5;
}

// NOTE: LocationSource enum moved to shared_enums.proto to avoid conflicts.

// LoRaWAN device join mode.
enum JoinMode {
  // Over-the-air activation.
  OTAA = 0;

  // Activation by personalization.
  ABP = 1;
}

// LoRaWAN device class.
enum DeviceClass {
  CLASS_A = 0;
  CLASS_B = 1;
  CLASS_C = 2;
}

// LoRaWAN region.
enum Region {
  EU868 = 0;
  US915 = 1;
  CN779 = 2;
  EU433 = 3;
  AU915 = 4;
  CN470 = 5;
  AS923 = 6;
  AS923_2 = 7;
  AS923_3 = 8;
  AS923_4 = 9;
  KR920 = 10;
  IN865 = 11;
  RU864 = 12;
  ISM2400 = 13;
}

// LoRaWAN MAC version.
enum MacVersion {
  LORAWAN_1_0_0 = 0;
  LORAWAN_1_0_1 = 1;
  LORAWAN_1_0_2 = 2;
  LORAWAN_1_0_3 = 3;
  LORAWAN_1_0_4 = 4;
  LORAWAN_1_1_0 = 5;
}

// LoRaWAN regional parameters revision.
enum RegParamsRevision {
  A = 0;
  B = 1;
  RP002_1_0_0 = 2;
  RP002_1_0_1 = 3;
  RP002_1_0_2 = 4;
  RP002_1_0_3 = 5;
  RP002_1_0_4 = 6;
}

// Payload codec runtime.
enum CodecRuntime {
  NONE = 0;
  CAYENNE_LPP = 1;
  JS = 2;
}
