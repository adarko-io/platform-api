syntax = "proto3";

package api;

option go_package = "github.com/adarko-io/platform-api/go/v4/external/service";

// Shared enum definitions to avoid conflicts across services.
// This file contains all common enums used by multiple services.

// Transport protocol enumeration - unified for inventory and data services.
enum TransportProtocol {
  // Unknown protocol.
  TRANSPORT_PROTOCOL_UNKNOWN = 0;
  
  // LoRaWAN.
  TRANSPORT_LORAWAN = 1;
  
  // HTTP/HTTPS over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
  TRANSPORT_CELLULAR_HTTP = 2;
  
  // MQTT over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
  TRANSPORT_CELLULAR_MQTT = 3;
  
  // TCP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
  TRANSPORT_CELLULAR_TCP = 4;
  
  // UDP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
  TRANSPORT_CELLULAR_UDP = 5;
  
  // CoAP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
  TRANSPORT_CELLULAR_COAP = 6;
  
  // HTTP/HTTPS over WiFi/Ethernet.
  TRANSPORT_HTTP = 7;
  
  // MQTT over WiFi/Ethernet.
  TRANSPORT_MQTT = 8;
  
  // TCP over WiFi/Ethernet.
  TRANSPORT_TCP = 9;
  
  // UDP over WiFi/Ethernet.
  TRANSPORT_UDP = 10;
  
  // CoAP over WiFi/Ethernet.
  TRANSPORT_COAP = 11;
  
  // WebSocket.
  TRANSPORT_WEBSOCKET = 12;
}

// Device type enumeration - unified for inventory and other services.
enum DeviceType {
  // Unknown device type.
  DEVICE_TYPE_UNKNOWN = 0;

  // LoRaWAN device.
  DEVICE_TYPE_LORAWAN = 1;

  // Cellular MQTT device.
  DEVICE_TYPE_CELLULAR_MQTT = 2;

  // Cellular TCP device.
  DEVICE_TYPE_CELLULAR_TCP = 3;

  // Cellular UDP device.
  DEVICE_TYPE_CELLULAR_UDP = 4;

  // Cellular HTTP device.
  DEVICE_TYPE_CELLULAR_HTTP = 5;

  // Cellular CoAP device.
  DEVICE_TYPE_CELLULAR_COAP = 6;

  // WiFi/Ethernet MQTT device.
  DEVICE_TYPE_WIFI_MQTT = 7;

  // WiFi/Ethernet TCP device.
  DEVICE_TYPE_WIFI_TCP = 8;

  // WiFi/Ethernet UDP device.
  DEVICE_TYPE_WIFI_UDP = 9;

  // WiFi/Ethernet HTTP device.
  DEVICE_TYPE_WIFI_HTTP = 10;

  // WiFi/Ethernet CoAP device.
  DEVICE_TYPE_WIFI_COAP = 11;

  // WebSocket device.
  DEVICE_TYPE_WEBSOCKET = 12;

  // Gateway device.
  DEVICE_TYPE_GATEWAY = 13;

  // LoRaWAN Gateway device.
  DEVICE_TYPE_LORAWAN_GATEWAY = 14;
}

// Location source enumeration - unified across all services.
enum LocationSource {
  // Unknown location source.
  LOCATION_SOURCE_UNKNOWN = 0;
  
  // GPS coordinates.
  LOCATION_SOURCE_GPS = 1;
  
  // Manually configured.
  LOCATION_SOURCE_MANUAL = 2;
  
  // Calculated via triangulation.
  LOCATION_SOURCE_TRIANGULATION = 3;
  
  // WiFi-based location.
  LOCATION_SOURCE_WIFI = 4;

  // Manual override.
  LOCATION_SOURCE_MANUAL_OVERRIDE = 5;

  // Configuration-based.
  LOCATION_SOURCE_CONFIG = 6;
  
  // GEO resolver TDOA.
  LOCATION_SOURCE_GEO_RESOLVER_TDOA = 7;
  
  // GEO resolver RSSI.
  LOCATION_SOURCE_GEO_RESOLVER_RSSI = 8;
  
  // GEO resolver GNSS.
  LOCATION_SOURCE_GEO_RESOLVER_GNSS = 9;
  
  // GEO resolver WiFi.
  LOCATION_SOURCE_GEO_RESOLVER_WIFI = 10;
}

// Inventory status enumeration.
enum InventoryStatus {
  // Device in inventory, not yet onboarded.
  INVENTORY_STATUS_INVENTORY = 0;

  // Device onboarded to platform.
  INVENTORY_STATUS_ONBOARDED = 1;

  // Device provisioned and active.
  INVENTORY_STATUS_PROVISIONED = 2;

  // Device decommissioned.
  INVENTORY_STATUS_DECOMMISSIONED = 3;

  // Device reported as faulty.
  INVENTORY_STATUS_FAULTY = 4;

  // Device lost or stolen.
  INVENTORY_STATUS_LOST = 5;
}

// Downlink delivery mode enumeration.
enum DownlinkMode {
  // Immediate downlink (for always-on devices).
  DOWNLINK_MODE_IMMEDIATE = 0;
  
  // Queued downlink (for battery-powered devices, sent on next uplink).
  DOWNLINK_MODE_QUEUED = 1;
  
  // Scheduled downlink (sent at specific time).
  DOWNLINK_MODE_SCHEDULED = 2;
}

// Cellular network type enumeration.
enum CellularNetworkType {
  CELLULAR_NETWORK_TYPE_AUTO = 0;
  CELLULAR_NETWORK_TYPE_GSM_2G = 1;
  CELLULAR_NETWORK_TYPE_UMTS_3G = 2;
  CELLULAR_NETWORK_TYPE_LTE_4G = 3;
  CELLULAR_NETWORK_TYPE_NR_5G = 4;
  CELLULAR_NETWORK_TYPE_NB_IOT = 5;
  CELLULAR_NETWORK_TYPE_LTE_M = 6;
}

// Aggregation type for time-series data.
enum AggregationType {
  // No aggregation (raw data).
  AGGREGATION_TYPE_NONE = 0;
  
  // Average values.
  AGGREGATION_TYPE_AVG = 1;
  
  // Minimum values.
  AGGREGATION_TYPE_MIN = 2;
  
  // Maximum values.
  AGGREGATION_TYPE_MAX = 3;
  
  // Sum of values.
  AGGREGATION_TYPE_SUM = 4;
  
  // Count of data points.
  AGGREGATION_TYPE_COUNT = 5;
  
  // First value in time window.
  AGGREGATION_TYPE_FIRST = 6;
  
  // Last value in time window.
  AGGREGATION_TYPE_LAST = 7;
}

// Time interval for aggregation.
enum TimeInterval {
  // 1 minute intervals.
  TIME_INTERVAL_MINUTE = 0;
  
  // 5 minute intervals.
  TIME_INTERVAL_MINUTE_5 = 1;
  
  // 15 minute intervals.
  TIME_INTERVAL_MINUTE_15 = 2;
  
  // 30 minute intervals.
  TIME_INTERVAL_MINUTE_30 = 3;
  
  // 1 hour intervals.
  TIME_INTERVAL_HOUR = 4;
  
  // 6 hour intervals.
  TIME_INTERVAL_HOUR_6 = 5;
  
  // 12 hour intervals.
  TIME_INTERVAL_HOUR_12 = 6;
  
  // 1 day intervals.
  TIME_INTERVAL_DAY = 7;
  
  // 1 week intervals.
  TIME_INTERVAL_WEEK = 8;
  
  // 1 month intervals.
  TIME_INTERVAL_MONTH = 9;
}
