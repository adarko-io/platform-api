syntax = "proto3";

package api;

option go_package = "github.com/adarko-io/platform-api/go/v4/external/service";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "external/service/lorawan_types.proto";

// InventoryService manages device inventory, provisioning, and device-specific configurations.
// Devices must exist in inventory before they can be added to the device service.
service InventoryService {
  // Create a new device in inventory.
  rpc Create(CreateInventoryDeviceRequest) returns (CreateInventoryDeviceResponse) {
    option (google.api.http) = {
      post: "/api/inventory/devices"
      body: "*"
    };
  }

  // Get device from inventory by EUI.
  rpc Get(GetInventoryDeviceRequest) returns (GetInventoryDeviceResponse) {
    option (google.api.http) = {
      get: "/api/inventory/devices/{eui}"
    };
  }

  // Update device in inventory.
  rpc Update(UpdateInventoryDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/inventory/devices/{device.eui}"
      body: "*"
    };
  }

  // Delete device from inventory.
  rpc Delete(DeleteInventoryDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/inventory/devices/{eui}"
    };
  }

  // List devices in inventory with filtering.
  rpc List(ListInventoryDevicesRequest) returns (ListInventoryDevicesResponse) {
    option (google.api.http) = {
      get: "/api/inventory/devices"
    };
  }

  // Update device status (onboarded/provisioned).
  rpc UpdateStatus(UpdateDeviceStatusRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/inventory/devices/{eui}/status"
      body: "*"
    };
  }

  // Bulk import devices to inventory.
  rpc BulkImport(BulkImportRequest) returns (BulkImportResponse) {
    option (google.api.http) = {
      post: "/api/inventory/devices/bulk-import"
      body: "*"
    };
  }

  // Search for device by various criteria.
  rpc Search(SearchInventoryDeviceRequest) returns (SearchInventoryDeviceResponse) {
    option (google.api.http) = {
      post: "/api/inventory/devices/search"
      body: "*"
    };
  }
}

// InventoryDevice represents a device in the inventory with all necessary configuration.
message InventoryDevice {
  // EUI (EUI64) - Primary identifier.
  string eui = 1;

  // Device name/model.
  string name = 2;

  // Device description.
  string description = 3;

  // Device type (determines which configuration is used).
  DeviceType device_type = 4;

  // Current inventory status.
  InventoryStatus status = 5;

  // Manufacturer information.
  string manufacturer = 6;

  // Model number/SKU.
  string model = 7;

  // Hardware version.
  string hardware_version = 8;

  // Firmware version.
  string firmware_version = 9;

  // Serial number.
  string serial_number = 10;

  // Device type specific configuration.
  DeviceConfiguration configuration = 11;

  // Device tags/labels.
  map<string, string> tags = 12;

  // Additional metadata.
  map<string, string> metadata = 13;

  // Batch/lot information.
  string batch_id = 14;

  // Procurement information.
  ProcurementInfo procurement = 15;
}

// Device type enumeration.
enum DeviceType {
  // Unknown device type.
  DEVICE_TYPE_UNKNOWN = 0;

  // LoRaWAN device.
  LORAWAN = 1;

  // Cellular MQTT device.
  CELLULAR_MQTT = 2;

  // Cellular TCP device.
  CELLULAR_TCP = 3;

  // Cellular UDP device.
  CELLULAR_UDP = 4;

  // Cellular HTTP device.
  CELLULAR_HTTP = 5;

  // Cellular CoAP device.
  CELLULAR_COAP = 6;

  // WiFi/Ethernet MQTT device.
  WIFI_MQTT = 7;

  // WiFi/Ethernet TCP device.
  WIFI_TCP = 8;

  // WiFi/Ethernet UDP device.
  WIFI_UDP = 9;

  // WiFi/Ethernet HTTP device.
  WIFI_HTTP = 10;

  // WiFi/Ethernet CoAP device.
  WIFI_COAP = 11;

  // WebSocket device.
  WEBSOCKET = 12;

  // Gateway device.
  GATEWAY = 13;

  // LoRaWAN Gateway device.
  LORAWAN_GATEWAY = 14;
}

// Inventory status enumeration.
enum InventoryStatus {
  // Device in inventory, not yet onboarded.
  INVENTORY = 0;

  // Device onboarded to platform.
  ONBOARDED = 1;

  // Device provisioned and active.
  PROVISIONED = 2;

  // Device decommissioned.
  DECOMMISSIONED = 3;

  // Device reported as faulty.
  FAULTY = 4;

  // Device lost or stolen.
  LOST = 5;
}

// Device-type specific configuration.
message DeviceConfiguration {
  oneof device_config {
    // LoRaWAN device configuration
    LoRaWANDevice lorawan_device = 1;    
    
    // Cellular MQTT specific configuration.
    CellularMQTTConfig cellular_mqtt = 2;

    // Cellular TCP specific configuration.
    CellularTCPConfig cellular_tcp = 3;

    // Cellular UDP specific configuration.
    CellularUDPConfig cellular_udp = 4;

    // Cellular HTTP specific configuration.
    CellularHTTPConfig cellular_http = 5;

    // Cellular CoAP specific configuration.
    CellularCoAPConfig cellular_coap = 6;

    // WiFi/Ethernet MQTT specific configuration.
    WiFiMQTTConfig wifi_mqtt = 7;

    // WiFi/Ethernet TCP specific configuration.
    WiFiTCPConfig wifi_tcp = 8;

    // WiFi/Ethernet UDP specific configuration.
    WiFiUDPConfig wifi_udp = 9;

    // WiFi/Ethernet HTTP specific configuration.
    WiFiHTTPConfig wifi_http = 10;

    // WiFi/Ethernet CoAP specific configuration.
    WiFiCoAPConfig wifi_coap = 11;

    // WebSocket specific configuration.
    WebSocketConfig websocket = 12;

    // Gateway specific configuration.
    GatewayConfig gateway = 13;

    // LoRaWAN Gateway specific configuration.
    LoRaWANGateway lorawan_gateway = 14;
  }
}

// Generic gateway configuration (for non-LoRaWAN gateways).
message GatewayConfig {
  // Gateway EUI.
  string gateway_eui = 1;

  // Gateway type (Cellular, WiFi, etc. - not LoRaWAN).
  string gateway_type = 2;

  // Supported device types.
  repeated DeviceType supported_device_types = 3;

  // Network configuration.
  map<string, string> network_config = 4;
}

// Cellular MQTT device configuration.
message CellularMQTTConfig {
  // IMEI number.
  string imei = 1;

  // IMSI number.
  string imsi = 2;

  // MQTT broker endpoint.
  string broker_endpoint = 3;

  // MQTT broker port.
  uint32 broker_port = 4;

  // Uplink topic.
  string uplink_topic = 5;

  // Downlink topic.
  string downlink_topic = 6;

  // Downlink delivery mode.
  DownlinkMode downlink_mode = 7;

  // QoS level for uplink.
  uint32 uplink_qos = 8;

  // QoS level for downlink.
  uint32 downlink_qos = 9;

  // Keep alive interval (seconds).
  uint32 keep_alive = 10;

  // Authentication credentials.
  MQTTAuth authentication = 11;

  // TLS/SSL configuration.
  TLSConfig tls = 12;

  // Network type preference.
  CellularNetworkType network_type = 13;
}

// Cellular TCP device configuration.
message CellularTCPConfig {
  // IMEI number.
  string imei = 1;

  // IMSI number.
  string imsi = 2;

  // Server endpoint.
  string server_endpoint = 3;

  // Server port.
  uint32 server_port = 4;

  // Downlink delivery mode.
  DownlinkMode downlink_mode = 5;

  // Keep alive interval (seconds).
  uint32 keep_alive = 6;

  // Connection timeout (seconds).
  uint32 connection_timeout = 7;

  // TLS/SSL configuration.
  TLSConfig tls = 8;

  // Network type preference.
  CellularNetworkType network_type = 9;
}

// Cellular UDP device configuration.
message CellularUDPConfig {
  // IMEI number.
  string imei = 1;

  // IMSI number.
  string imsi = 2;

  // Server endpoint.
  string server_endpoint = 3;

  // Server port.
  uint32 server_port = 4;

  // Downlink delivery mode.
  DownlinkMode downlink_mode = 5;

  // Network type preference.
  CellularNetworkType network_type = 6;
}

// Cellular HTTP device configuration.
message CellularHTTPConfig {
  // IMEI number.
  string imei = 1;

  // IMSI number.
  string imsi = 2;

  // Server endpoint.
  string server_endpoint = 3;

  // Server port.
  uint32 server_port = 4;

  // Uplink endpoint path.
  string uplink_path = 5;

  // Downlink endpoint path.
  string downlink_path = 6;

  // HTTP method for uplink.
  string uplink_method = 7;

  // Downlink delivery mode.
  DownlinkMode downlink_mode = 8;

  // Authentication credentials.
  HTTPAuth authentication = 9;

  // TLS/SSL configuration.
  TLSConfig tls = 10;

  // Network type preference.
  CellularNetworkType network_type = 11;
}

// Cellular CoAP device configuration.
message CellularCoAPConfig {
  // IMEI number.
  string imei = 1;

  // IMSI number.
  string imsi = 2;

  // Server endpoint.
  string server_endpoint = 3;

  // Server port.
  uint32 server_port = 4;

  // Uplink URI path.
  string uplink_path = 5;

  // Downlink URI path.
  string downlink_path = 6;

  // Downlink delivery mode.
  DownlinkMode downlink_mode = 7;

  // DTLS configuration.
  DTLSConfig dtls = 8;

  // Network type preference.
  CellularNetworkType network_type = 9;
}

// WiFi/Ethernet MQTT device configuration.
message WiFiMQTTConfig {
  // MAC address.
  string mac_address = 1;

  // MQTT broker endpoint.
  string broker_endpoint = 2;

  // MQTT broker port.
  uint32 broker_port = 3;

  // Uplink topic.
  string uplink_topic = 4;

  // Downlink topic.
  string downlink_topic = 5;

  // QoS level for uplink.
  uint32 uplink_qos = 6;

  // QoS level for downlink.
  uint32 downlink_qos = 7;

  // Keep alive interval (seconds).
  uint32 keep_alive = 8;

  // Authentication credentials.
  MQTTAuth authentication = 9;

  // TLS/SSL configuration.
  TLSConfig tls = 10;
}

// WiFi/Ethernet TCP device configuration.
message WiFiTCPConfig {
  // MAC address.
  string mac_address = 1;

  // Server endpoint.
  string server_endpoint = 2;

  // Server port.
  uint32 server_port = 3;

  // Keep alive interval (seconds).
  uint32 keep_alive = 4;

  // Connection timeout (seconds).
  uint32 connection_timeout = 5;

  // TLS/SSL configuration.
  TLSConfig tls = 6;
}

// WiFi/Ethernet UDP device configuration.
message WiFiUDPConfig {
  // MAC address.
  string mac_address = 1;

  // Server endpoint.
  string server_endpoint = 2;

  // Server port.
  uint32 server_port = 3;
}

// WiFi/Ethernet HTTP device configuration.
message WiFiHTTPConfig {
  // MAC address.
  string mac_address = 1;

  // Server endpoint.
  string server_endpoint = 2;

  // Server port.
  uint32 server_port = 3;

  // Uplink endpoint path.
  string uplink_path = 4;

  // Downlink endpoint path.
  string downlink_path = 5;

  // HTTP method for uplink.
  string uplink_method = 6;

  // Authentication credentials.
  HTTPAuth authentication = 7;

  // TLS/SSL configuration.
  TLSConfig tls = 8;
}

// WiFi/Ethernet CoAP device configuration.
message WiFiCoAPConfig {
  // MAC address.
  string mac_address = 1;

  // Server endpoint.
  string server_endpoint = 2;

  // Server port.
  uint32 server_port = 3;

  // Uplink URI path.
  string uplink_path = 4;

  // Downlink URI path.
  string downlink_path = 5;

  // DTLS configuration.
  DTLSConfig dtls = 6;
}

// WebSocket device configuration.
message WebSocketConfig {
  // MAC address.
  string mac_address = 1;

  // WebSocket endpoint.
  string endpoint = 2;

  // WebSocket subprotocol.
  string subprotocol = 3;

  // Authentication credentials.
  WebSocketAuth authentication = 4;

  // TLS/SSL configuration.
  TLSConfig tls = 5;
}

// Supporting enums for non-LoRaWAN devices (LoRaWAN enums are imported from console-lorawan-api).
enum DownlinkMode {
  // Immediate downlink (for always-on devices).
  IMMEDIATE = 0;
  
  // Queued downlink (for battery-powered devices, sent on next uplink).
  QUEUED = 1;
  
  // Scheduled downlink (sent at specific time).
  SCHEDULED = 2;
}

enum CellularNetworkType {
  CELLULAR_AUTO = 0;
  GSM_2G = 1;
  UMTS_3G = 2;
  LTE_4G = 3;
  NR_5G = 4;
  NB_IOT = 5;
  LTE_M = 6;
}

// Authentication configurations.
message MQTTAuth {
  // Username.
  string username = 1;
  
  // Password.
  string password = 2;
  
  // Client certificate (for mutual TLS).
  string client_cert = 3;
  
  // Client private key.
  string client_key = 4;
}

message HTTPAuth {
  // HTTP authentication type.
  string auth_type = 1; // basic, bearer, api_key
  
  // Username (for basic auth).
  string username = 2;
  
  // Password (for basic auth).
  string password = 3;
  
  // Token (for bearer auth).
  string token = 4;
  
  // API key.
  string api_key = 5;
  
  // API key header name.
  string api_key_header = 6;
}

message WebSocketAuth {
  // Authentication type.
  string auth_type = 1;
  
  // Authentication credentials.
  map<string, string> credentials = 2;
}

// Security configurations.
message TLSConfig {
  // Enable TLS.
  bool enabled = 1;
  
  // CA certificate.
  string ca_cert = 2;
  
  // Client certificate.
  string client_cert = 3;
  
  // Client private key.
  string client_key = 4;
  
  // Skip certificate verification (for testing).
  bool skip_verify = 5;
}

message DTLSConfig {
  // Enable DTLS.
  bool enabled = 1;
  
  // Pre-shared key.
  string psk = 2;
  
  // PSK identity.
  string psk_identity = 3;
  
  // CA certificate.
  string ca_cert = 4;
  
  // Client certificate.
  string client_cert = 5;
  
  // Client private key.
  string client_key = 6;
}

// Procurement information.
message ProcurementInfo {
  // Supplier/vendor.
  string supplier = 1;
  
  // Purchase order number.
  string purchase_order = 2;
  
  // Purchase date.
  google.protobuf.Timestamp purchase_date = 3;
  
  // Unit cost.
  double unit_cost = 4;
  
  // Currency.
  string currency = 5;
  
  // Warranty expiry.
  google.protobuf.Timestamp warranty_expiry = 6;
}

// Request/Response messages.
message CreateInventoryDeviceRequest {
  // Device to create.
  InventoryDevice device = 1;
}

message CreateInventoryDeviceResponse {
  // Device EUI.
  string eui = 1;
}

message GetInventoryDeviceRequest {
  // Device EUI.
  string eui = 1;
}

message GetInventoryDeviceResponse {
  // Device information.
  InventoryDevice device = 1;
  
  // Created at timestamp.
  google.protobuf.Timestamp created_at = 2;
  
  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 3;
}

message UpdateInventoryDeviceRequest {
  // Device to update.
  InventoryDevice device = 1;
}

message DeleteInventoryDeviceRequest {
  // Device EUI.
  string eui = 1;
}

message ListInventoryDevicesRequest {
  // Maximum number of devices to return.
  uint32 limit = 1;
  
  // Offset for pagination.
  uint32 offset = 2;
  
  // Filter by device type.
  repeated DeviceType device_types = 3;
  
  // Filter by status.
  repeated InventoryStatus statuses = 4;
  
  // Filter by manufacturer.
  string manufacturer = 5;
  
  // Filter by model.
  string model = 6;
  
  // Search query (name, description, etc.).
  string search = 7;
  
  // Filter by tags.
  map<string, string> tags = 8;
}

message InventoryDeviceListItem {
  // Device EUI.
  string eui = 1;
  
  // Device name.
  string name = 2;
  
  // Device type.
  DeviceType device_type = 3;
  
  // Current status.
  InventoryStatus status = 4;
  
  // Manufacturer.
  string manufacturer = 5;
  
  // Model.
  string model = 6;
  
  // Created at timestamp.
  google.protobuf.Timestamp created_at = 7;
  
  // Last update timestamp.
  google.protobuf.Timestamp updated_at = 8;
}

message ListInventoryDevicesResponse {
  // Total count.
  uint32 total_count = 1;
  
  // Device list.
  repeated InventoryDeviceListItem devices = 2;
}

message UpdateDeviceStatusRequest {
  // Device EUI.
  string eui = 1;
  
  // New status.
  InventoryStatus status = 2;
  
  // Status update reason/notes.
  string notes = 3;
}

message BulkImportRequest {
  // Devices to import.
  repeated InventoryDevice devices = 1;
  
  // Skip devices that already exist.
  bool skip_existing = 2;
}

message BulkImportResponse {
  // Number of devices successfully imported.
  uint32 imported_count = 1;
  
  // Number of devices skipped.
  uint32 skipped_count = 2;
  
  // Number of devices failed.
  uint32 failed_count = 3;
  
  // Import errors.
  repeated ImportError errors = 4;
}

message ImportError {
  // Device EUI that failed.
  string eui = 1;
  
  // Error message.
  string error = 2;
}

message SearchInventoryDeviceRequest {
  // Search criteria.
  map<string, string> criteria = 1;
  
  // Maximum results.
  uint32 limit = 2;
}

message SearchInventoryDeviceResponse {
  // Found devices.
  repeated InventoryDeviceListItem devices = 1;
}
