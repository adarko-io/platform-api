// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/lorawan_types.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Location source enumeration.
type LocationSource int32

const (
	LocationSource_UNKNOWN           LocationSource = 0
	LocationSource_GPS               LocationSource = 1
	LocationSource_CONFIG            LocationSource = 2
	LocationSource_GEO_RESOLVER_TDOA LocationSource = 3
	LocationSource_GEO_RESOLVER_RSSI LocationSource = 4
	LocationSource_GEO_RESOLVER_GNSS LocationSource = 5
	LocationSource_GEO_RESOLVER_WIFI LocationSource = 6
)

// Enum value maps for LocationSource.
var (
	LocationSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "GPS",
		2: "CONFIG",
		3: "GEO_RESOLVER_TDOA",
		4: "GEO_RESOLVER_RSSI",
		5: "GEO_RESOLVER_GNSS",
		6: "GEO_RESOLVER_WIFI",
	}
	LocationSource_value = map[string]int32{
		"UNKNOWN":           0,
		"GPS":               1,
		"CONFIG":            2,
		"GEO_RESOLVER_TDOA": 3,
		"GEO_RESOLVER_RSSI": 4,
		"GEO_RESOLVER_GNSS": 5,
		"GEO_RESOLVER_WIFI": 6,
	}
)

func (x LocationSource) Enum() *LocationSource {
	p := new(LocationSource)
	*p = x
	return p
}

func (x LocationSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationSource) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[0].Descriptor()
}

func (LocationSource) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[0]
}

func (x LocationSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationSource.Descriptor instead.
func (LocationSource) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{0}
}

// LoRaWAN device join mode.
type JoinMode int32

const (
	// Over-the-air activation.
	JoinMode_OTAA JoinMode = 0
	// Activation by personalization.
	JoinMode_ABP JoinMode = 1
)

// Enum value maps for JoinMode.
var (
	JoinMode_name = map[int32]string{
		0: "OTAA",
		1: "ABP",
	}
	JoinMode_value = map[string]int32{
		"OTAA": 0,
		"ABP":  1,
	}
)

func (x JoinMode) Enum() *JoinMode {
	p := new(JoinMode)
	*p = x
	return p
}

func (x JoinMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinMode) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[1].Descriptor()
}

func (JoinMode) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[1]
}

func (x JoinMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinMode.Descriptor instead.
func (JoinMode) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{1}
}

// LoRaWAN device class.
type DeviceClass int32

const (
	DeviceClass_CLASS_A DeviceClass = 0
	DeviceClass_CLASS_B DeviceClass = 1
	DeviceClass_CLASS_C DeviceClass = 2
)

// Enum value maps for DeviceClass.
var (
	DeviceClass_name = map[int32]string{
		0: "CLASS_A",
		1: "CLASS_B",
		2: "CLASS_C",
	}
	DeviceClass_value = map[string]int32{
		"CLASS_A": 0,
		"CLASS_B": 1,
		"CLASS_C": 2,
	}
)

func (x DeviceClass) Enum() *DeviceClass {
	p := new(DeviceClass)
	*p = x
	return p
}

func (x DeviceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[2].Descriptor()
}

func (DeviceClass) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[2]
}

func (x DeviceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceClass.Descriptor instead.
func (DeviceClass) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{2}
}

// LoRaWAN region.
type Region int32

const (
	Region_EU868   Region = 0
	Region_US915   Region = 1
	Region_CN779   Region = 2
	Region_EU433   Region = 3
	Region_AU915   Region = 4
	Region_CN470   Region = 5
	Region_AS923   Region = 6
	Region_AS923_2 Region = 7
	Region_AS923_3 Region = 8
	Region_AS923_4 Region = 9
	Region_KR920   Region = 10
	Region_IN865   Region = 11
	Region_RU864   Region = 12
	Region_ISM2400 Region = 13
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0:  "EU868",
		1:  "US915",
		2:  "CN779",
		3:  "EU433",
		4:  "AU915",
		5:  "CN470",
		6:  "AS923",
		7:  "AS923_2",
		8:  "AS923_3",
		9:  "AS923_4",
		10: "KR920",
		11: "IN865",
		12: "RU864",
		13: "ISM2400",
	}
	Region_value = map[string]int32{
		"EU868":   0,
		"US915":   1,
		"CN779":   2,
		"EU433":   3,
		"AU915":   4,
		"CN470":   5,
		"AS923":   6,
		"AS923_2": 7,
		"AS923_3": 8,
		"AS923_4": 9,
		"KR920":   10,
		"IN865":   11,
		"RU864":   12,
		"ISM2400": 13,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[3].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[3]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{3}
}

// LoRaWAN MAC version.
type MacVersion int32

const (
	MacVersion_LORAWAN_1_0_0 MacVersion = 0
	MacVersion_LORAWAN_1_0_1 MacVersion = 1
	MacVersion_LORAWAN_1_0_2 MacVersion = 2
	MacVersion_LORAWAN_1_0_3 MacVersion = 3
	MacVersion_LORAWAN_1_0_4 MacVersion = 4
	MacVersion_LORAWAN_1_1_0 MacVersion = 5
)

// Enum value maps for MacVersion.
var (
	MacVersion_name = map[int32]string{
		0: "LORAWAN_1_0_0",
		1: "LORAWAN_1_0_1",
		2: "LORAWAN_1_0_2",
		3: "LORAWAN_1_0_3",
		4: "LORAWAN_1_0_4",
		5: "LORAWAN_1_1_0",
	}
	MacVersion_value = map[string]int32{
		"LORAWAN_1_0_0": 0,
		"LORAWAN_1_0_1": 1,
		"LORAWAN_1_0_2": 2,
		"LORAWAN_1_0_3": 3,
		"LORAWAN_1_0_4": 4,
		"LORAWAN_1_1_0": 5,
	}
)

func (x MacVersion) Enum() *MacVersion {
	p := new(MacVersion)
	*p = x
	return p
}

func (x MacVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[4].Descriptor()
}

func (MacVersion) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[4]
}

func (x MacVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacVersion.Descriptor instead.
func (MacVersion) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{4}
}

// LoRaWAN regional parameters revision.
type RegParamsRevision int32

const (
	RegParamsRevision_A           RegParamsRevision = 0
	RegParamsRevision_B           RegParamsRevision = 1
	RegParamsRevision_RP002_1_0_0 RegParamsRevision = 2
	RegParamsRevision_RP002_1_0_1 RegParamsRevision = 3
	RegParamsRevision_RP002_1_0_2 RegParamsRevision = 4
	RegParamsRevision_RP002_1_0_3 RegParamsRevision = 5
	RegParamsRevision_RP002_1_0_4 RegParamsRevision = 6
)

// Enum value maps for RegParamsRevision.
var (
	RegParamsRevision_name = map[int32]string{
		0: "A",
		1: "B",
		2: "RP002_1_0_0",
		3: "RP002_1_0_1",
		4: "RP002_1_0_2",
		5: "RP002_1_0_3",
		6: "RP002_1_0_4",
	}
	RegParamsRevision_value = map[string]int32{
		"A":           0,
		"B":           1,
		"RP002_1_0_0": 2,
		"RP002_1_0_1": 3,
		"RP002_1_0_2": 4,
		"RP002_1_0_3": 5,
		"RP002_1_0_4": 6,
	}
)

func (x RegParamsRevision) Enum() *RegParamsRevision {
	p := new(RegParamsRevision)
	*p = x
	return p
}

func (x RegParamsRevision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegParamsRevision) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[5].Descriptor()
}

func (RegParamsRevision) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[5]
}

func (x RegParamsRevision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegParamsRevision.Descriptor instead.
func (RegParamsRevision) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{5}
}

// Payload codec runtime.
type CodecRuntime int32

const (
	CodecRuntime_NONE        CodecRuntime = 0
	CodecRuntime_CAYENNE_LPP CodecRuntime = 1
	CodecRuntime_JS          CodecRuntime = 2
)

// Enum value maps for CodecRuntime.
var (
	CodecRuntime_name = map[int32]string{
		0: "NONE",
		1: "CAYENNE_LPP",
		2: "JS",
	}
	CodecRuntime_value = map[string]int32{
		"NONE":        0,
		"CAYENNE_LPP": 1,
		"JS":          2,
	}
)

func (x CodecRuntime) Enum() *CodecRuntime {
	p := new(CodecRuntime)
	*p = x
	return p
}

func (x CodecRuntime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodecRuntime) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_lorawan_types_proto_enumTypes[6].Descriptor()
}

func (CodecRuntime) Type() protoreflect.EnumType {
	return &file_external_service_lorawan_types_proto_enumTypes[6]
}

func (x CodecRuntime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodecRuntime.Descriptor instead.
func (CodecRuntime) EnumDescriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{6}
}

// Simplified LoRaWAN Device definition for inventory integration
// This defines the minimal required fields for device configuration
// Full LoRaWAN device management is handled by the console-lorawan-api service
type LoRaWANDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (unique identifier).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Device description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Application identifier.
	ApplicationId string `protobuf:"bytes,4,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// DevAddr (device address).
	// Only used with ABP (activation-by-personalization).
	DevAddr string `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Device join mode.
	JoinMode JoinMode `protobuf:"varint,6,opt,name=join_mode,json=joinMode,proto3,enum=api.JoinMode" json:"join_mode,omitempty"`
	// Device class.
	DeviceClass DeviceClass `protobuf:"varint,7,opt,name=device_class,json=deviceClass,proto3,enum=api.DeviceClass" json:"device_class,omitempty"`
	// Regional parameters region.
	Region Region `protobuf:"varint,8,opt,name=region,proto3,enum=api.Region" json:"region,omitempty"`
	// MAC version.
	MacVersion MacVersion `protobuf:"varint,9,opt,name=mac_version,json=macVersion,proto3,enum=api.MacVersion" json:"mac_version,omitempty"`
	// Regional parameters revision.
	RegParamsRevision RegParamsRevision `protobuf:"varint,10,opt,name=reg_params_revision,json=regParamsRevision,proto3,enum=api.RegParamsRevision" json:"reg_params_revision,omitempty"`
	// ADR (adaptive data rate) enabled.
	AdrEnabled bool `protobuf:"varint,11,opt,name=adr_enabled,json=adrEnabled,proto3" json:"adr_enabled,omitempty"`
	// Expected uplink interval in seconds.
	ExpectedUplinkIntervalSec uint32 `protobuf:"varint,12,opt,name=expected_uplink_interval_sec,json=expectedUplinkIntervalSec,proto3" json:"expected_uplink_interval_sec,omitempty"`
	// Device tags.
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Device variables.
	Variables map[string]string `protobuf:"bytes,14,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Skip frame-counter validation.
	SkipFcntCheck bool `protobuf:"varint,15,opt,name=skip_fcnt_check,json=skipFcntCheck,proto3" json:"skip_fcnt_check,omitempty"`
	// Device is disabled.
	IsDisabled bool `protobuf:"varint,16,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// JoinEUI (optional, EUI64).
	// This field will be automatically set / updated on OTAA. However, in some
	// cases it must be pre-configured. For example to allow OTAA using a Relay.
	JoinEui string `protobuf:"bytes,17,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Device Keys for OTAA
	Keys *DeviceKeys `protobuf:"bytes,18,opt,name=keys,proto3" json:"keys,omitempty"`
	// Device activation object.
	DeviceActivation *DeviceActivation `protobuf:"bytes,19,opt,name=device_activation,json=deviceActivation,proto3" json:"device_activation,omitempty"`
	// ADR algorithm ID.
	AdrAlgorithmId string `protobuf:"bytes,20,opt,name=adr_algorithm_id,json=adrAlgorithmId,proto3" json:"adr_algorithm_id,omitempty"`
	// Payload codec runtime.
	PayloadCodecRuntime CodecRuntime `protobuf:"varint,21,opt,name=payload_codec_runtime,json=payloadCodecRuntime,proto3,enum=api.CodecRuntime" json:"payload_codec_runtime,omitempty"`
	// Payload codec script.
	PayloadCodecScript string `protobuf:"bytes,22,opt,name=payload_codec_script,json=payloadCodecScript,proto3" json:"payload_codec_script,omitempty"`
	// Class-B timeout (seconds).
	ClassBTimeout uint32 `protobuf:"varint,23,opt,name=class_b_timeout,json=classBTimeout,proto3" json:"class_b_timeout,omitempty"`
	// Class-B ping-slots per beacon period.
	ClassBPingSlotNbK uint32 `protobuf:"varint,24,opt,name=class_b_ping_slot_nb_k,json=classBPingSlotNbK,proto3" json:"class_b_ping_slot_nb_k,omitempty"`
	// Class-B ping-slot DR.
	ClassBPingSlotDr uint32 `protobuf:"varint,25,opt,name=class_b_ping_slot_dr,json=classBPingSlotDr,proto3" json:"class_b_ping_slot_dr,omitempty"`
	// Class-B ping-slot freq (Hz).
	ClassBPingSlotFreq uint32 `protobuf:"varint,26,opt,name=class_b_ping_slot_freq,json=classBPingSlotFreq,proto3" json:"class_b_ping_slot_freq,omitempty"`
	// Class-C timeout (seconds).
	ClassCTimeout uint32 `protobuf:"varint,27,opt,name=class_c_timeout,json=classCTimeout,proto3" json:"class_c_timeout,omitempty"`
	// RX1 delay (for ABP).
	AbpRx1Delay uint32 `protobuf:"varint,28,opt,name=abp_rx1_delay,json=abpRx1Delay,proto3" json:"abp_rx1_delay,omitempty"`
	// RX1 DR offset (for ABP).
	AbpRx1DrOffset uint32 `protobuf:"varint,29,opt,name=abp_rx1_dr_offset,json=abpRx1DrOffset,proto3" json:"abp_rx1_dr_offset,omitempty"`
	// RX2 DR (for ABP).
	AbpRx2Dr uint32 `protobuf:"varint,30,opt,name=abp_rx2_dr,json=abpRx2Dr,proto3" json:"abp_rx2_dr,omitempty"`
	// RX2 frequency (for ABP, Hz).
	AbpRx2Freq uint32 `protobuf:"varint,31,opt,name=abp_rx2_freq,json=abpRx2Freq,proto3" json:"abp_rx2_freq,omitempty"`
	// Flush queue on device activation.
	FlushQueueOnActivate bool `protobuf:"varint,32,opt,name=flush_queue_on_activate,json=flushQueueOnActivate,proto3" json:"flush_queue_on_activate,omitempty"`
	// Device-status request interval (times / day).
	DeviceStatusReqInterval uint32 `protobuf:"varint,33,opt,name=device_status_req_interval,json=deviceStatusReqInterval,proto3" json:"device_status_req_interval,omitempty"`
}

func (x *LoRaWANDevice) Reset() {
	*x = LoRaWANDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_lorawan_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaWANDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaWANDevice) ProtoMessage() {}

func (x *LoRaWANDevice) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_lorawan_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaWANDevice.ProtoReflect.Descriptor instead.
func (*LoRaWANDevice) Descriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{0}
}

func (x *LoRaWANDevice) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *LoRaWANDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoRaWANDevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoRaWANDevice) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *LoRaWANDevice) GetDevAddr() string {
	if x != nil {
		return x.DevAddr
	}
	return ""
}

func (x *LoRaWANDevice) GetJoinMode() JoinMode {
	if x != nil {
		return x.JoinMode
	}
	return JoinMode_OTAA
}

func (x *LoRaWANDevice) GetDeviceClass() DeviceClass {
	if x != nil {
		return x.DeviceClass
	}
	return DeviceClass_CLASS_A
}

func (x *LoRaWANDevice) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_EU868
}

func (x *LoRaWANDevice) GetMacVersion() MacVersion {
	if x != nil {
		return x.MacVersion
	}
	return MacVersion_LORAWAN_1_0_0
}

func (x *LoRaWANDevice) GetRegParamsRevision() RegParamsRevision {
	if x != nil {
		return x.RegParamsRevision
	}
	return RegParamsRevision_A
}

func (x *LoRaWANDevice) GetAdrEnabled() bool {
	if x != nil {
		return x.AdrEnabled
	}
	return false
}

func (x *LoRaWANDevice) GetExpectedUplinkIntervalSec() uint32 {
	if x != nil {
		return x.ExpectedUplinkIntervalSec
	}
	return 0
}

func (x *LoRaWANDevice) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LoRaWANDevice) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *LoRaWANDevice) GetSkipFcntCheck() bool {
	if x != nil {
		return x.SkipFcntCheck
	}
	return false
}

func (x *LoRaWANDevice) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *LoRaWANDevice) GetJoinEui() string {
	if x != nil {
		return x.JoinEui
	}
	return ""
}

func (x *LoRaWANDevice) GetKeys() *DeviceKeys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LoRaWANDevice) GetDeviceActivation() *DeviceActivation {
	if x != nil {
		return x.DeviceActivation
	}
	return nil
}

func (x *LoRaWANDevice) GetAdrAlgorithmId() string {
	if x != nil {
		return x.AdrAlgorithmId
	}
	return ""
}

func (x *LoRaWANDevice) GetPayloadCodecRuntime() CodecRuntime {
	if x != nil {
		return x.PayloadCodecRuntime
	}
	return CodecRuntime_NONE
}

func (x *LoRaWANDevice) GetPayloadCodecScript() string {
	if x != nil {
		return x.PayloadCodecScript
	}
	return ""
}

func (x *LoRaWANDevice) GetClassBTimeout() uint32 {
	if x != nil {
		return x.ClassBTimeout
	}
	return 0
}

func (x *LoRaWANDevice) GetClassBPingSlotNbK() uint32 {
	if x != nil {
		return x.ClassBPingSlotNbK
	}
	return 0
}

func (x *LoRaWANDevice) GetClassBPingSlotDr() uint32 {
	if x != nil {
		return x.ClassBPingSlotDr
	}
	return 0
}

func (x *LoRaWANDevice) GetClassBPingSlotFreq() uint32 {
	if x != nil {
		return x.ClassBPingSlotFreq
	}
	return 0
}

func (x *LoRaWANDevice) GetClassCTimeout() uint32 {
	if x != nil {
		return x.ClassCTimeout
	}
	return 0
}

func (x *LoRaWANDevice) GetAbpRx1Delay() uint32 {
	if x != nil {
		return x.AbpRx1Delay
	}
	return 0
}

func (x *LoRaWANDevice) GetAbpRx1DrOffset() uint32 {
	if x != nil {
		return x.AbpRx1DrOffset
	}
	return 0
}

func (x *LoRaWANDevice) GetAbpRx2Dr() uint32 {
	if x != nil {
		return x.AbpRx2Dr
	}
	return 0
}

func (x *LoRaWANDevice) GetAbpRx2Freq() uint32 {
	if x != nil {
		return x.AbpRx2Freq
	}
	return 0
}

func (x *LoRaWANDevice) GetFlushQueueOnActivate() bool {
	if x != nil {
		return x.FlushQueueOnActivate
	}
	return false
}

func (x *LoRaWANDevice) GetDeviceStatusReqInterval() uint32 {
	if x != nil {
		return x.DeviceStatusReqInterval
	}
	return 0
}

// Device Keys for OTAA
type DeviceKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI (EUI64).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Network root key (128 bit).
	// Note: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey'!
	NwkKey string `protobuf:"bytes,2,opt,name=nwk_key,json=nwkKey,proto3" json:"nwk_key,omitempty"`
	// Application root key (128 bit).
	// Note: This field only needs to be set for LoRaWAN 1.1.x devices!
	AppKey string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (x *DeviceKeys) Reset() {
	*x = DeviceKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_lorawan_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceKeys) ProtoMessage() {}

func (x *DeviceKeys) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_lorawan_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceKeys.ProtoReflect.Descriptor instead.
func (*DeviceKeys) Descriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceKeys) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DeviceKeys) GetNwkKey() string {
	if x != nil {
		return x.NwkKey
	}
	return ""
}

func (x *DeviceKeys) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

// Device activation object for ABP
type DeviceActivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (EUI64).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device address (HEX encoded).
	DevAddr string `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Application session key (HEX encoded).
	AppSKey string `protobuf:"bytes,3,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// Network session encryption key (HEX encoded).
	// Note: For ABP in LoRaWAN 1.0.x, use this, the serving and the forwarding
	// network session integrity key fields with the LoRaWAN 1.0.x 'NwkSKey'!
	NwkSEncKey string `protobuf:"bytes,4,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// Serving network session integrity key (HEX encoded).
	SNwkSIntKey string `protobuf:"bytes,5,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// Forwarding network session integrity key (HEX encoded).
	FNwkSIntKey string `protobuf:"bytes,6,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,7,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// Downlink network frame-counter.
	NFCntDown uint32 `protobuf:"varint,8,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// Downlink application frame-counter.
	AFCntDown uint32 `protobuf:"varint,9,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
}

func (x *DeviceActivation) Reset() {
	*x = DeviceActivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_lorawan_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActivation) ProtoMessage() {}

func (x *DeviceActivation) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_lorawan_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActivation.ProtoReflect.Descriptor instead.
func (*DeviceActivation) Descriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceActivation) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DeviceActivation) GetDevAddr() string {
	if x != nil {
		return x.DevAddr
	}
	return ""
}

func (x *DeviceActivation) GetAppSKey() string {
	if x != nil {
		return x.AppSKey
	}
	return ""
}

func (x *DeviceActivation) GetNwkSEncKey() string {
	if x != nil {
		return x.NwkSEncKey
	}
	return ""
}

func (x *DeviceActivation) GetSNwkSIntKey() string {
	if x != nil {
		return x.SNwkSIntKey
	}
	return ""
}

func (x *DeviceActivation) GetFNwkSIntKey() string {
	if x != nil {
		return x.FNwkSIntKey
	}
	return ""
}

func (x *DeviceActivation) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceActivation) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceActivation) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

// LoRaWAN Gateway definition for inventory integration
type LoRaWANGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (EUI64).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Gateway location.
	Location *Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// Tags.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metadata (provided by the gateway).
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Stats interval (seconds).
	// This defines the expected interval in which the gateway sends its
	// statistics.
	StatsInterval uint32 `protobuf:"varint,7,opt,name=stats_interval,json=statsInterval,proto3" json:"stats_interval,omitempty"`
	// Gateway region.
	Region Region `protobuf:"varint,8,opt,name=region,proto3,enum=api.Region" json:"region,omitempty"`
	// Gateway model.
	Model string `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	// Firmware version.
	FirmwareVersion string `protobuf:"bytes,10,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Hardware version.
	HardwareVersion string `protobuf:"bytes,11,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	// Network configuration.
	NetworkConfig map[string]string `protobuf:"bytes,12,rep,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoRaWANGateway) Reset() {
	*x = LoRaWANGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_lorawan_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaWANGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaWANGateway) ProtoMessage() {}

func (x *LoRaWANGateway) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_lorawan_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaWANGateway.ProtoReflect.Descriptor instead.
func (*LoRaWANGateway) Descriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{3}
}

func (x *LoRaWANGateway) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *LoRaWANGateway) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoRaWANGateway) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoRaWANGateway) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LoRaWANGateway) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LoRaWANGateway) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LoRaWANGateway) GetStatsInterval() uint32 {
	if x != nil {
		return x.StatsInterval
	}
	return 0
}

func (x *LoRaWANGateway) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_EU868
}

func (x *LoRaWANGateway) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LoRaWANGateway) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *LoRaWANGateway) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *LoRaWANGateway) GetNetworkConfig() map[string]string {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

// Location information (simplified from util.Location)
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Altitude.
	Altitude float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// Location source.
	Source LocationSource `protobuf:"varint,4,opt,name=source,proto3,enum=api.LocationSource" json:"source,omitempty"`
	// Accuracy (meters).
	Accuracy float32 `protobuf:"fixed32,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_lorawan_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_lorawan_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_external_service_lorawan_types_proto_rawDescGZIP(), []int{4}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Location) GetSource() LocationSource {
	if x != nil {
		return x.Source
	}
	return LocationSource_UNKNOWN
}

func (x *Location) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

var File_external_service_lorawan_types_proto protoreflect.FileDescriptor

var file_external_service_lorawan_types_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0xc6, 0x0c, 0x0a, 0x0d,
	0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a,
	0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61,
	0x57, 0x41, 0x4e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x63, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x46, 0x63, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x42, 0x0a, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x72, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x15, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x16, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x6e, 0x62, 0x5f, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x62, 0x4b, 0x12, 0x2e,
	0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x72, 0x12, 0x32,
	0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x62,
	0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x62, 0x70, 0x52, 0x78, 0x31, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x29,
	0x0a, 0x11, 0x61, 0x62, 0x70, 0x5f, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x62, 0x70, 0x52, 0x78,
	0x31, 0x44, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x62, 0x70,
	0x5f, 0x72, 0x78, 0x32, 0x5f, 0x64, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x62, 0x70, 0x52, 0x78, 0x32, 0x44, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x62, 0x70, 0x5f, 0x72,
	0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x62, 0x70, 0x52, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x77, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x77,
	0x6b, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xad, 0x02,
	0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x53, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0d, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x77, 0x6b, 0x53, 0x45,
	0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0f, 0x73, 0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0f, 0x66,
	0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0c, 0x6e,
	0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0c,
	0x61, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xc1, 0x05,
	0x0a, 0x0e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61,
	0x57, 0x41, 0x4e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x2a, 0x8e, 0x01,
	0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x52, 0x5f, 0x54, 0x44, 0x4f, 0x41, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x53, 0x53, 0x49, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x5f, 0x47, 0x4e, 0x53, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4f, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x06, 0x2a, 0x1d,
	0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x54,
	0x41, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x42, 0x50, 0x10, 0x01, 0x2a, 0x34, 0x0a,
	0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x42, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x43, 0x10, 0x02, 0x2a, 0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x55, 0x38, 0x36, 0x38, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x39,
	0x31, 0x35, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4e, 0x37, 0x37, 0x39, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x55, 0x34, 0x33, 0x33, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55,
	0x39, 0x31, 0x35, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4e, 0x34, 0x37, 0x30, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x39, 0x32, 0x33, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x53, 0x39, 0x32, 0x33, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x39, 0x32,
	0x33, 0x5f, 0x33, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x39, 0x32, 0x33, 0x5f, 0x34,
	0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x52, 0x39, 0x32, 0x30, 0x10, 0x0a, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x38, 0x36, 0x35, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x55, 0x38, 0x36,
	0x34, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x4d, 0x32, 0x34, 0x30, 0x30, 0x10, 0x0d,
	0x2a, 0x7e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f, 0x31, 0x5f, 0x30,
	0x5f, 0x31, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f,
	0x31, 0x5f, 0x30, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x52, 0x41, 0x57,
	0x41, 0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f,
	0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x05,
	0x2a, 0x76, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01,
	0x42, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x30, 0x30, 0x32, 0x5f, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x30, 0x30, 0x32, 0x5f, 0x31, 0x5f,
	0x30, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x30, 0x30, 0x32, 0x5f, 0x31,
	0x5f, 0x30, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x30, 0x30, 0x32, 0x5f,
	0x31, 0x5f, 0x30, 0x5f, 0x33, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x30, 0x30, 0x32,
	0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x34, 0x10, 0x06, 0x2a, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x59, 0x45, 0x4e, 0x4e, 0x45, 0x5f, 0x4c, 0x50,
	0x50, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x53, 0x10, 0x02, 0x42, 0x3a, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x61, 0x72, 0x6b, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_service_lorawan_types_proto_rawDescOnce sync.Once
	file_external_service_lorawan_types_proto_rawDescData = file_external_service_lorawan_types_proto_rawDesc
)

func file_external_service_lorawan_types_proto_rawDescGZIP() []byte {
	file_external_service_lorawan_types_proto_rawDescOnce.Do(func() {
		file_external_service_lorawan_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_lorawan_types_proto_rawDescData)
	})
	return file_external_service_lorawan_types_proto_rawDescData
}

var file_external_service_lorawan_types_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_external_service_lorawan_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_external_service_lorawan_types_proto_goTypes = []any{
	(LocationSource)(0),      // 0: api.LocationSource
	(JoinMode)(0),            // 1: api.JoinMode
	(DeviceClass)(0),         // 2: api.DeviceClass
	(Region)(0),              // 3: api.Region
	(MacVersion)(0),          // 4: api.MacVersion
	(RegParamsRevision)(0),   // 5: api.RegParamsRevision
	(CodecRuntime)(0),        // 6: api.CodecRuntime
	(*LoRaWANDevice)(nil),    // 7: api.LoRaWANDevice
	(*DeviceKeys)(nil),       // 8: api.DeviceKeys
	(*DeviceActivation)(nil), // 9: api.DeviceActivation
	(*LoRaWANGateway)(nil),   // 10: api.LoRaWANGateway
	(*Location)(nil),         // 11: api.Location
	nil,                      // 12: api.LoRaWANDevice.TagsEntry
	nil,                      // 13: api.LoRaWANDevice.VariablesEntry
	nil,                      // 14: api.LoRaWANGateway.TagsEntry
	nil,                      // 15: api.LoRaWANGateway.MetadataEntry
	nil,                      // 16: api.LoRaWANGateway.NetworkConfigEntry
}
var file_external_service_lorawan_types_proto_depIdxs = []int32{
	1,  // 0: api.LoRaWANDevice.join_mode:type_name -> api.JoinMode
	2,  // 1: api.LoRaWANDevice.device_class:type_name -> api.DeviceClass
	3,  // 2: api.LoRaWANDevice.region:type_name -> api.Region
	4,  // 3: api.LoRaWANDevice.mac_version:type_name -> api.MacVersion
	5,  // 4: api.LoRaWANDevice.reg_params_revision:type_name -> api.RegParamsRevision
	12, // 5: api.LoRaWANDevice.tags:type_name -> api.LoRaWANDevice.TagsEntry
	13, // 6: api.LoRaWANDevice.variables:type_name -> api.LoRaWANDevice.VariablesEntry
	8,  // 7: api.LoRaWANDevice.keys:type_name -> api.DeviceKeys
	9,  // 8: api.LoRaWANDevice.device_activation:type_name -> api.DeviceActivation
	6,  // 9: api.LoRaWANDevice.payload_codec_runtime:type_name -> api.CodecRuntime
	11, // 10: api.LoRaWANGateway.location:type_name -> api.Location
	14, // 11: api.LoRaWANGateway.tags:type_name -> api.LoRaWANGateway.TagsEntry
	15, // 12: api.LoRaWANGateway.metadata:type_name -> api.LoRaWANGateway.MetadataEntry
	3,  // 13: api.LoRaWANGateway.region:type_name -> api.Region
	16, // 14: api.LoRaWANGateway.network_config:type_name -> api.LoRaWANGateway.NetworkConfigEntry
	0,  // 15: api.Location.source:type_name -> api.LocationSource
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_external_service_lorawan_types_proto_init() }
func file_external_service_lorawan_types_proto_init() {
	if File_external_service_lorawan_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_service_lorawan_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LoRaWANDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_lorawan_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_lorawan_types_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceActivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_lorawan_types_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LoRaWANGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_lorawan_types_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_lorawan_types_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_external_service_lorawan_types_proto_goTypes,
		DependencyIndexes: file_external_service_lorawan_types_proto_depIdxs,
		EnumInfos:         file_external_service_lorawan_types_proto_enumTypes,
		MessageInfos:      file_external_service_lorawan_types_proto_msgTypes,
	}.Build()
	File_external_service_lorawan_types_proto = out.File
	file_external_service_lorawan_types_proto_rawDesc = nil
	file_external_service_lorawan_types_proto_goTypes = nil
	file_external_service_lorawan_types_proto_depIdxs = nil
}
