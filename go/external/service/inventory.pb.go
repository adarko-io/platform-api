// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/inventory.proto

package service

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InventoryDevice represents a device in the inventory with all necessary configuration.
type InventoryDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64) - Primary identifier.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Device name/model.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Device description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Communication Mode (determines which configuration is used).
	CommunicationMode CommunicationMode `protobuf:"varint,4,opt,name=communication_mode,json=communicationMode,proto3,enum=api.CommunicationMode" json:"communication_mode,omitempty"`
	// Current inventory status.
	Status InventoryStatus `protobuf:"varint,5,opt,name=status,proto3,enum=api.InventoryStatus" json:"status,omitempty"`
	// Manufacturer information.
	Manufacturer string `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Model number/SKU.
	Model string `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	// Hardware version.
	HardwareVersion string `protobuf:"bytes,8,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	// Firmware version.
	FirmwareVersion string `protobuf:"bytes,9,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Serial number.
	SerialNumber string `protobuf:"bytes,10,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Device type specific configuration.
	Configuration *DeviceConfiguration `protobuf:"bytes,11,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Device tags/labels.
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional metadata.
	Metadata map[string]string `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Batch/lot information.
	BatchId string `protobuf:"bytes,14,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *InventoryDevice) Reset() {
	*x = InventoryDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryDevice) ProtoMessage() {}

func (x *InventoryDevice) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryDevice.ProtoReflect.Descriptor instead.
func (*InventoryDevice) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *InventoryDevice) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *InventoryDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryDevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryDevice) GetCommunicationMode() CommunicationMode {
	if x != nil {
		return x.CommunicationMode
	}
	return CommunicationMode_COMMUNICATION_MODE_UNKNOWN
}

func (x *InventoryDevice) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *InventoryDevice) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *InventoryDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InventoryDevice) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *InventoryDevice) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *InventoryDevice) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *InventoryDevice) GetConfiguration() *DeviceConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *InventoryDevice) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *InventoryDevice) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InventoryDevice) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// Device-type specific configuration.
type DeviceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeviceConfig:
	//
	//	*DeviceConfiguration_LorawanDevice
	//	*DeviceConfiguration_CellularMqtt
	//	*DeviceConfiguration_CellularTcp
	//	*DeviceConfiguration_CellularUdp
	//	*DeviceConfiguration_CellularHttp
	//	*DeviceConfiguration_CellularCoap
	//	*DeviceConfiguration_WifiMqtt
	//	*DeviceConfiguration_WifiTcp
	//	*DeviceConfiguration_WifiUdp
	//	*DeviceConfiguration_WifiHttp
	//	*DeviceConfiguration_WifiCoap
	//	*DeviceConfiguration_Websocket
	//	*DeviceConfiguration_Gateway
	//	*DeviceConfiguration_LorawanGateway
	DeviceConfig isDeviceConfiguration_DeviceConfig `protobuf_oneof:"device_config"`
}

func (x *DeviceConfiguration) Reset() {
	*x = DeviceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfiguration) ProtoMessage() {}

func (x *DeviceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfiguration.ProtoReflect.Descriptor instead.
func (*DeviceConfiguration) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{1}
}

func (m *DeviceConfiguration) GetDeviceConfig() isDeviceConfiguration_DeviceConfig {
	if m != nil {
		return m.DeviceConfig
	}
	return nil
}

func (x *DeviceConfiguration) GetLorawanDevice() *LoRaWANDevice {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_LorawanDevice); ok {
		return x.LorawanDevice
	}
	return nil
}

func (x *DeviceConfiguration) GetCellularMqtt() *CellularMQTTConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_CellularMqtt); ok {
		return x.CellularMqtt
	}
	return nil
}

func (x *DeviceConfiguration) GetCellularTcp() *CellularTCPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_CellularTcp); ok {
		return x.CellularTcp
	}
	return nil
}

func (x *DeviceConfiguration) GetCellularUdp() *CellularUDPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_CellularUdp); ok {
		return x.CellularUdp
	}
	return nil
}

func (x *DeviceConfiguration) GetCellularHttp() *CellularHTTPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_CellularHttp); ok {
		return x.CellularHttp
	}
	return nil
}

func (x *DeviceConfiguration) GetCellularCoap() *CellularCoAPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_CellularCoap); ok {
		return x.CellularCoap
	}
	return nil
}

func (x *DeviceConfiguration) GetWifiMqtt() *WiFiMQTTConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_WifiMqtt); ok {
		return x.WifiMqtt
	}
	return nil
}

func (x *DeviceConfiguration) GetWifiTcp() *WiFiTCPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_WifiTcp); ok {
		return x.WifiTcp
	}
	return nil
}

func (x *DeviceConfiguration) GetWifiUdp() *WiFiUDPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_WifiUdp); ok {
		return x.WifiUdp
	}
	return nil
}

func (x *DeviceConfiguration) GetWifiHttp() *WiFiHTTPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_WifiHttp); ok {
		return x.WifiHttp
	}
	return nil
}

func (x *DeviceConfiguration) GetWifiCoap() *WiFiCoAPConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_WifiCoap); ok {
		return x.WifiCoap
	}
	return nil
}

func (x *DeviceConfiguration) GetWebsocket() *WebSocketConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *DeviceConfiguration) GetGateway() *GatewayConfig {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_Gateway); ok {
		return x.Gateway
	}
	return nil
}

func (x *DeviceConfiguration) GetLorawanGateway() *LoRaWANGateway {
	if x, ok := x.GetDeviceConfig().(*DeviceConfiguration_LorawanGateway); ok {
		return x.LorawanGateway
	}
	return nil
}

type isDeviceConfiguration_DeviceConfig interface {
	isDeviceConfiguration_DeviceConfig()
}

type DeviceConfiguration_LorawanDevice struct {
	// LoRaWAN device configuration
	LorawanDevice *LoRaWANDevice `protobuf:"bytes,1,opt,name=lorawan_device,json=lorawanDevice,proto3,oneof"`
}

type DeviceConfiguration_CellularMqtt struct {
	// Cellular MQTT specific configuration.
	CellularMqtt *CellularMQTTConfig `protobuf:"bytes,2,opt,name=cellular_mqtt,json=cellularMqtt,proto3,oneof"`
}

type DeviceConfiguration_CellularTcp struct {
	// Cellular TCP specific configuration.
	CellularTcp *CellularTCPConfig `protobuf:"bytes,3,opt,name=cellular_tcp,json=cellularTcp,proto3,oneof"`
}

type DeviceConfiguration_CellularUdp struct {
	// Cellular UDP specific configuration.
	CellularUdp *CellularUDPConfig `protobuf:"bytes,4,opt,name=cellular_udp,json=cellularUdp,proto3,oneof"`
}

type DeviceConfiguration_CellularHttp struct {
	// Cellular HTTP specific configuration.
	CellularHttp *CellularHTTPConfig `protobuf:"bytes,5,opt,name=cellular_http,json=cellularHttp,proto3,oneof"`
}

type DeviceConfiguration_CellularCoap struct {
	// Cellular CoAP specific configuration.
	CellularCoap *CellularCoAPConfig `protobuf:"bytes,6,opt,name=cellular_coap,json=cellularCoap,proto3,oneof"`
}

type DeviceConfiguration_WifiMqtt struct {
	// WiFi/Ethernet MQTT specific configuration.
	WifiMqtt *WiFiMQTTConfig `protobuf:"bytes,7,opt,name=wifi_mqtt,json=wifiMqtt,proto3,oneof"`
}

type DeviceConfiguration_WifiTcp struct {
	// WiFi/Ethernet TCP specific configuration.
	WifiTcp *WiFiTCPConfig `protobuf:"bytes,8,opt,name=wifi_tcp,json=wifiTcp,proto3,oneof"`
}

type DeviceConfiguration_WifiUdp struct {
	// WiFi/Ethernet UDP specific configuration.
	WifiUdp *WiFiUDPConfig `protobuf:"bytes,9,opt,name=wifi_udp,json=wifiUdp,proto3,oneof"`
}

type DeviceConfiguration_WifiHttp struct {
	// WiFi/Ethernet HTTP specific configuration.
	WifiHttp *WiFiHTTPConfig `protobuf:"bytes,10,opt,name=wifi_http,json=wifiHttp,proto3,oneof"`
}

type DeviceConfiguration_WifiCoap struct {
	// WiFi/Ethernet CoAP specific configuration.
	WifiCoap *WiFiCoAPConfig `protobuf:"bytes,11,opt,name=wifi_coap,json=wifiCoap,proto3,oneof"`
}

type DeviceConfiguration_Websocket struct {
	// WebSocket specific configuration.
	Websocket *WebSocketConfig `protobuf:"bytes,12,opt,name=websocket,proto3,oneof"`
}

type DeviceConfiguration_Gateway struct {
	// Gateway specific configuration.
	Gateway *GatewayConfig `protobuf:"bytes,13,opt,name=gateway,proto3,oneof"`
}

type DeviceConfiguration_LorawanGateway struct {
	// LoRaWAN Gateway specific configuration.
	LorawanGateway *LoRaWANGateway `protobuf:"bytes,14,opt,name=lorawan_gateway,json=lorawanGateway,proto3,oneof"`
}

func (*DeviceConfiguration_LorawanDevice) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_CellularMqtt) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_CellularTcp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_CellularUdp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_CellularHttp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_CellularCoap) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_WifiMqtt) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_WifiTcp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_WifiUdp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_WifiHttp) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_WifiCoap) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_Websocket) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_Gateway) isDeviceConfiguration_DeviceConfig() {}

func (*DeviceConfiguration_LorawanGateway) isDeviceConfiguration_DeviceConfig() {}

// Generic gateway configuration (for non-LoRaWAN gateways).
type GatewayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway EUI.
	GatewayEui string `protobuf:"bytes,1,opt,name=gateway_eui,json=gatewayEui,proto3" json:"gateway_eui,omitempty"`
	// Gateway type (Cellular, WiFi, etc. - not LoRaWAN).
	GatewayType string `protobuf:"bytes,2,opt,name=gateway_type,json=gatewayType,proto3" json:"gateway_type,omitempty"`
	// Supported device types.
	SupportedCommunicationModes []CommunicationMode `protobuf:"varint,3,rep,packed,name=supported_communication_modes,json=supportedCommunicationModes,proto3,enum=api.CommunicationMode" json:"supported_communication_modes,omitempty"`
	// Network configuration.
	NetworkConfig map[string]string `protobuf:"bytes,4,rep,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatewayConfig) Reset() {
	*x = GatewayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig) ProtoMessage() {}

func (x *GatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig.ProtoReflect.Descriptor instead.
func (*GatewayConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayConfig) GetGatewayEui() string {
	if x != nil {
		return x.GatewayEui
	}
	return ""
}

func (x *GatewayConfig) GetGatewayType() string {
	if x != nil {
		return x.GatewayType
	}
	return ""
}

func (x *GatewayConfig) GetSupportedCommunicationModes() []CommunicationMode {
	if x != nil {
		return x.SupportedCommunicationModes
	}
	return nil
}

func (x *GatewayConfig) GetNetworkConfig() map[string]string {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

// Cellular MQTT device configuration.
type CellularMQTTConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI number.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI number.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// MQTT broker endpoint.
	BrokerEndpoint string `protobuf:"bytes,3,opt,name=broker_endpoint,json=brokerEndpoint,proto3" json:"broker_endpoint,omitempty"`
	// MQTT broker port.
	BrokerPort uint32 `protobuf:"varint,4,opt,name=broker_port,json=brokerPort,proto3" json:"broker_port,omitempty"`
	// Uplink topic.
	UplinkTopic string `protobuf:"bytes,5,opt,name=uplink_topic,json=uplinkTopic,proto3" json:"uplink_topic,omitempty"`
	// Downlink topic.
	DownlinkTopic string `protobuf:"bytes,6,opt,name=downlink_topic,json=downlinkTopic,proto3" json:"downlink_topic,omitempty"`
	// Downlink delivery mode.
	DownlinkMode DownlinkMode `protobuf:"varint,7,opt,name=downlink_mode,json=downlinkMode,proto3,enum=api.DownlinkMode" json:"downlink_mode,omitempty"`
	// QoS level for uplink.
	UplinkQos uint32 `protobuf:"varint,8,opt,name=uplink_qos,json=uplinkQos,proto3" json:"uplink_qos,omitempty"`
	// QoS level for downlink.
	DownlinkQos uint32 `protobuf:"varint,9,opt,name=downlink_qos,json=downlinkQos,proto3" json:"downlink_qos,omitempty"`
	// Keep alive interval (seconds).
	KeepAlive uint32 `protobuf:"varint,10,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// Authentication credentials.
	Authentication *MQTTAuth `protobuf:"bytes,11,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,12,opt,name=tls,proto3" json:"tls,omitempty"`
	// Network type preference.
	NetworkType CellularNetworkType `protobuf:"varint,13,opt,name=network_type,json=networkType,proto3,enum=api.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *CellularMQTTConfig) Reset() {
	*x = CellularMQTTConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularMQTTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularMQTTConfig) ProtoMessage() {}

func (x *CellularMQTTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularMQTTConfig.ProtoReflect.Descriptor instead.
func (*CellularMQTTConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *CellularMQTTConfig) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularMQTTConfig) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularMQTTConfig) GetBrokerEndpoint() string {
	if x != nil {
		return x.BrokerEndpoint
	}
	return ""
}

func (x *CellularMQTTConfig) GetBrokerPort() uint32 {
	if x != nil {
		return x.BrokerPort
	}
	return 0
}

func (x *CellularMQTTConfig) GetUplinkTopic() string {
	if x != nil {
		return x.UplinkTopic
	}
	return ""
}

func (x *CellularMQTTConfig) GetDownlinkTopic() string {
	if x != nil {
		return x.DownlinkTopic
	}
	return ""
}

func (x *CellularMQTTConfig) GetDownlinkMode() DownlinkMode {
	if x != nil {
		return x.DownlinkMode
	}
	return DownlinkMode_DOWNLINK_MODE_IMMEDIATE
}

func (x *CellularMQTTConfig) GetUplinkQos() uint32 {
	if x != nil {
		return x.UplinkQos
	}
	return 0
}

func (x *CellularMQTTConfig) GetDownlinkQos() uint32 {
	if x != nil {
		return x.DownlinkQos
	}
	return 0
}

func (x *CellularMQTTConfig) GetKeepAlive() uint32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *CellularMQTTConfig) GetAuthentication() *MQTTAuth {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *CellularMQTTConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *CellularMQTTConfig) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO
}

// Cellular TCP device configuration.
type CellularTCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI number.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI number.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,3,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,4,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Downlink delivery mode.
	DownlinkMode DownlinkMode `protobuf:"varint,5,opt,name=downlink_mode,json=downlinkMode,proto3,enum=api.DownlinkMode" json:"downlink_mode,omitempty"`
	// Keep alive interval (seconds).
	KeepAlive uint32 `protobuf:"varint,6,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// Connection timeout (seconds).
	ConnectionTimeout uint32 `protobuf:"varint,7,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,8,opt,name=tls,proto3" json:"tls,omitempty"`
	// Network type preference.
	NetworkType CellularNetworkType `protobuf:"varint,9,opt,name=network_type,json=networkType,proto3,enum=api.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *CellularTCPConfig) Reset() {
	*x = CellularTCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularTCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularTCPConfig) ProtoMessage() {}

func (x *CellularTCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularTCPConfig.ProtoReflect.Descriptor instead.
func (*CellularTCPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *CellularTCPConfig) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularTCPConfig) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularTCPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *CellularTCPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CellularTCPConfig) GetDownlinkMode() DownlinkMode {
	if x != nil {
		return x.DownlinkMode
	}
	return DownlinkMode_DOWNLINK_MODE_IMMEDIATE
}

func (x *CellularTCPConfig) GetKeepAlive() uint32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *CellularTCPConfig) GetConnectionTimeout() uint32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *CellularTCPConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *CellularTCPConfig) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO
}

// Cellular UDP device configuration.
type CellularUDPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI number.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI number.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,3,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,4,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Downlink delivery mode.
	DownlinkMode DownlinkMode `protobuf:"varint,5,opt,name=downlink_mode,json=downlinkMode,proto3,enum=api.DownlinkMode" json:"downlink_mode,omitempty"`
	// Network type preference.
	NetworkType CellularNetworkType `protobuf:"varint,6,opt,name=network_type,json=networkType,proto3,enum=api.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *CellularUDPConfig) Reset() {
	*x = CellularUDPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularUDPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularUDPConfig) ProtoMessage() {}

func (x *CellularUDPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularUDPConfig.ProtoReflect.Descriptor instead.
func (*CellularUDPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *CellularUDPConfig) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularUDPConfig) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularUDPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *CellularUDPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CellularUDPConfig) GetDownlinkMode() DownlinkMode {
	if x != nil {
		return x.DownlinkMode
	}
	return DownlinkMode_DOWNLINK_MODE_IMMEDIATE
}

func (x *CellularUDPConfig) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO
}

// Cellular HTTP device configuration.
type CellularHTTPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI number.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI number.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,3,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,4,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Uplink endpoint path.
	UplinkPath string `protobuf:"bytes,5,opt,name=uplink_path,json=uplinkPath,proto3" json:"uplink_path,omitempty"`
	// Downlink endpoint path.
	DownlinkPath string `protobuf:"bytes,6,opt,name=downlink_path,json=downlinkPath,proto3" json:"downlink_path,omitempty"`
	// HTTP method for uplink.
	UplinkMethod string `protobuf:"bytes,7,opt,name=uplink_method,json=uplinkMethod,proto3" json:"uplink_method,omitempty"`
	// Downlink delivery mode.
	DownlinkMode DownlinkMode `protobuf:"varint,8,opt,name=downlink_mode,json=downlinkMode,proto3,enum=api.DownlinkMode" json:"downlink_mode,omitempty"`
	// Authentication credentials.
	Authentication *HTTPAuth `protobuf:"bytes,9,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,10,opt,name=tls,proto3" json:"tls,omitempty"`
	// Network type preference.
	NetworkType CellularNetworkType `protobuf:"varint,11,opt,name=network_type,json=networkType,proto3,enum=api.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *CellularHTTPConfig) Reset() {
	*x = CellularHTTPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularHTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularHTTPConfig) ProtoMessage() {}

func (x *CellularHTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularHTTPConfig.ProtoReflect.Descriptor instead.
func (*CellularHTTPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *CellularHTTPConfig) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularHTTPConfig) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularHTTPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *CellularHTTPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CellularHTTPConfig) GetUplinkPath() string {
	if x != nil {
		return x.UplinkPath
	}
	return ""
}

func (x *CellularHTTPConfig) GetDownlinkPath() string {
	if x != nil {
		return x.DownlinkPath
	}
	return ""
}

func (x *CellularHTTPConfig) GetUplinkMethod() string {
	if x != nil {
		return x.UplinkMethod
	}
	return ""
}

func (x *CellularHTTPConfig) GetDownlinkMode() DownlinkMode {
	if x != nil {
		return x.DownlinkMode
	}
	return DownlinkMode_DOWNLINK_MODE_IMMEDIATE
}

func (x *CellularHTTPConfig) GetAuthentication() *HTTPAuth {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *CellularHTTPConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *CellularHTTPConfig) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO
}

// Cellular CoAP device configuration.
type CellularCoAPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI number.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI number.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,3,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,4,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Uplink URI path.
	UplinkPath string `protobuf:"bytes,5,opt,name=uplink_path,json=uplinkPath,proto3" json:"uplink_path,omitempty"`
	// Downlink URI path.
	DownlinkPath string `protobuf:"bytes,6,opt,name=downlink_path,json=downlinkPath,proto3" json:"downlink_path,omitempty"`
	// Downlink delivery mode.
	DownlinkMode DownlinkMode `protobuf:"varint,7,opt,name=downlink_mode,json=downlinkMode,proto3,enum=api.DownlinkMode" json:"downlink_mode,omitempty"`
	// DTLS configuration.
	Dtls *DTLSConfig `protobuf:"bytes,8,opt,name=dtls,proto3" json:"dtls,omitempty"`
	// Network type preference.
	NetworkType CellularNetworkType `protobuf:"varint,9,opt,name=network_type,json=networkType,proto3,enum=api.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *CellularCoAPConfig) Reset() {
	*x = CellularCoAPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularCoAPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularCoAPConfig) ProtoMessage() {}

func (x *CellularCoAPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularCoAPConfig.ProtoReflect.Descriptor instead.
func (*CellularCoAPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *CellularCoAPConfig) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularCoAPConfig) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularCoAPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *CellularCoAPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *CellularCoAPConfig) GetUplinkPath() string {
	if x != nil {
		return x.UplinkPath
	}
	return ""
}

func (x *CellularCoAPConfig) GetDownlinkPath() string {
	if x != nil {
		return x.DownlinkPath
	}
	return ""
}

func (x *CellularCoAPConfig) GetDownlinkMode() DownlinkMode {
	if x != nil {
		return x.DownlinkMode
	}
	return DownlinkMode_DOWNLINK_MODE_IMMEDIATE
}

func (x *CellularCoAPConfig) GetDtls() *DTLSConfig {
	if x != nil {
		return x.Dtls
	}
	return nil
}

func (x *CellularCoAPConfig) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO
}

// WiFi/Ethernet MQTT device configuration.
type WiFiMQTTConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// MQTT broker endpoint.
	BrokerEndpoint string `protobuf:"bytes,2,opt,name=broker_endpoint,json=brokerEndpoint,proto3" json:"broker_endpoint,omitempty"`
	// MQTT broker port.
	BrokerPort uint32 `protobuf:"varint,3,opt,name=broker_port,json=brokerPort,proto3" json:"broker_port,omitempty"`
	// Uplink topic.
	UplinkTopic string `protobuf:"bytes,4,opt,name=uplink_topic,json=uplinkTopic,proto3" json:"uplink_topic,omitempty"`
	// Downlink topic.
	DownlinkTopic string `protobuf:"bytes,5,opt,name=downlink_topic,json=downlinkTopic,proto3" json:"downlink_topic,omitempty"`
	// QoS level for uplink.
	UplinkQos uint32 `protobuf:"varint,6,opt,name=uplink_qos,json=uplinkQos,proto3" json:"uplink_qos,omitempty"`
	// QoS level for downlink.
	DownlinkQos uint32 `protobuf:"varint,7,opt,name=downlink_qos,json=downlinkQos,proto3" json:"downlink_qos,omitempty"`
	// Keep alive interval (seconds).
	KeepAlive uint32 `protobuf:"varint,8,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// Authentication credentials.
	Authentication *MQTTAuth `protobuf:"bytes,9,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,10,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *WiFiMQTTConfig) Reset() {
	*x = WiFiMQTTConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiMQTTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiMQTTConfig) ProtoMessage() {}

func (x *WiFiMQTTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiMQTTConfig.ProtoReflect.Descriptor instead.
func (*WiFiMQTTConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *WiFiMQTTConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WiFiMQTTConfig) GetBrokerEndpoint() string {
	if x != nil {
		return x.BrokerEndpoint
	}
	return ""
}

func (x *WiFiMQTTConfig) GetBrokerPort() uint32 {
	if x != nil {
		return x.BrokerPort
	}
	return 0
}

func (x *WiFiMQTTConfig) GetUplinkTopic() string {
	if x != nil {
		return x.UplinkTopic
	}
	return ""
}

func (x *WiFiMQTTConfig) GetDownlinkTopic() string {
	if x != nil {
		return x.DownlinkTopic
	}
	return ""
}

func (x *WiFiMQTTConfig) GetUplinkQos() uint32 {
	if x != nil {
		return x.UplinkQos
	}
	return 0
}

func (x *WiFiMQTTConfig) GetDownlinkQos() uint32 {
	if x != nil {
		return x.DownlinkQos
	}
	return 0
}

func (x *WiFiMQTTConfig) GetKeepAlive() uint32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *WiFiMQTTConfig) GetAuthentication() *MQTTAuth {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *WiFiMQTTConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// WiFi/Ethernet TCP device configuration.
type WiFiTCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,2,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Keep alive interval (seconds).
	KeepAlive uint32 `protobuf:"varint,4,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// Connection timeout (seconds).
	ConnectionTimeout uint32 `protobuf:"varint,5,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *WiFiTCPConfig) Reset() {
	*x = WiFiTCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiTCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiTCPConfig) ProtoMessage() {}

func (x *WiFiTCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiTCPConfig.ProtoReflect.Descriptor instead.
func (*WiFiTCPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *WiFiTCPConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WiFiTCPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *WiFiTCPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *WiFiTCPConfig) GetKeepAlive() uint32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *WiFiTCPConfig) GetConnectionTimeout() uint32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *WiFiTCPConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// WiFi/Ethernet UDP device configuration.
type WiFiUDPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,2,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
}

func (x *WiFiUDPConfig) Reset() {
	*x = WiFiUDPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiUDPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiUDPConfig) ProtoMessage() {}

func (x *WiFiUDPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiUDPConfig.ProtoReflect.Descriptor instead.
func (*WiFiUDPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *WiFiUDPConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WiFiUDPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *WiFiUDPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

// WiFi/Ethernet HTTP device configuration.
type WiFiHTTPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,2,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Uplink endpoint path.
	UplinkPath string `protobuf:"bytes,4,opt,name=uplink_path,json=uplinkPath,proto3" json:"uplink_path,omitempty"`
	// Downlink endpoint path.
	DownlinkPath string `protobuf:"bytes,5,opt,name=downlink_path,json=downlinkPath,proto3" json:"downlink_path,omitempty"`
	// HTTP method for uplink.
	UplinkMethod string `protobuf:"bytes,6,opt,name=uplink_method,json=uplinkMethod,proto3" json:"uplink_method,omitempty"`
	// Authentication credentials.
	Authentication *HTTPAuth `protobuf:"bytes,7,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,8,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *WiFiHTTPConfig) Reset() {
	*x = WiFiHTTPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiHTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiHTTPConfig) ProtoMessage() {}

func (x *WiFiHTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiHTTPConfig.ProtoReflect.Descriptor instead.
func (*WiFiHTTPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *WiFiHTTPConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WiFiHTTPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *WiFiHTTPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *WiFiHTTPConfig) GetUplinkPath() string {
	if x != nil {
		return x.UplinkPath
	}
	return ""
}

func (x *WiFiHTTPConfig) GetDownlinkPath() string {
	if x != nil {
		return x.DownlinkPath
	}
	return ""
}

func (x *WiFiHTTPConfig) GetUplinkMethod() string {
	if x != nil {
		return x.UplinkMethod
	}
	return ""
}

func (x *WiFiHTTPConfig) GetAuthentication() *HTTPAuth {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *WiFiHTTPConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// WiFi/Ethernet CoAP device configuration.
type WiFiCoAPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Server endpoint.
	ServerEndpoint string `protobuf:"bytes,2,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	// Server port.
	ServerPort uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Uplink URI path.
	UplinkPath string `protobuf:"bytes,4,opt,name=uplink_path,json=uplinkPath,proto3" json:"uplink_path,omitempty"`
	// Downlink URI path.
	DownlinkPath string `protobuf:"bytes,5,opt,name=downlink_path,json=downlinkPath,proto3" json:"downlink_path,omitempty"`
	// DTLS configuration.
	Dtls *DTLSConfig `protobuf:"bytes,6,opt,name=dtls,proto3" json:"dtls,omitempty"`
}

func (x *WiFiCoAPConfig) Reset() {
	*x = WiFiCoAPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiCoAPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiCoAPConfig) ProtoMessage() {}

func (x *WiFiCoAPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiCoAPConfig.ProtoReflect.Descriptor instead.
func (*WiFiCoAPConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *WiFiCoAPConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WiFiCoAPConfig) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

func (x *WiFiCoAPConfig) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *WiFiCoAPConfig) GetUplinkPath() string {
	if x != nil {
		return x.UplinkPath
	}
	return ""
}

func (x *WiFiCoAPConfig) GetDownlinkPath() string {
	if x != nil {
		return x.DownlinkPath
	}
	return ""
}

func (x *WiFiCoAPConfig) GetDtls() *DTLSConfig {
	if x != nil {
		return x.Dtls
	}
	return nil
}

// WebSocket device configuration.
type WebSocketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address.
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// WebSocket endpoint.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// WebSocket subprotocol.
	Subprotocol string `protobuf:"bytes,3,opt,name=subprotocol,proto3" json:"subprotocol,omitempty"`
	// Authentication credentials.
	Authentication *WebSocketAuth `protobuf:"bytes,4,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// TLS/SSL configuration.
	Tls *TLSConfig `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *WebSocketConfig) Reset() {
	*x = WebSocketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSocketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketConfig) ProtoMessage() {}

func (x *WebSocketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketConfig.ProtoReflect.Descriptor instead.
func (*WebSocketConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *WebSocketConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *WebSocketConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WebSocketConfig) GetSubprotocol() string {
	if x != nil {
		return x.Subprotocol
	}
	return ""
}

func (x *WebSocketConfig) GetAuthentication() *WebSocketAuth {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *WebSocketConfig) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

// Authentication configurations.
type MQTTAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Client certificate (for mutual TLS).
	ClientCert string `protobuf:"bytes,3,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// Client private key.
	ClientKey string `protobuf:"bytes,4,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *MQTTAuth) Reset() {
	*x = MQTTAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTAuth) ProtoMessage() {}

func (x *MQTTAuth) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTAuth.ProtoReflect.Descriptor instead.
func (*MQTTAuth) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *MQTTAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MQTTAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MQTTAuth) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *MQTTAuth) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

type HTTPAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP authentication type.
	AuthType string `protobuf:"bytes,1,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"` // basic, bearer, api_key
	// Username (for basic auth).
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password (for basic auth).
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Token (for bearer auth).
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// API key.
	ApiKey string `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// API key header name.
	ApiKeyHeader string `protobuf:"bytes,6,opt,name=api_key_header,json=apiKeyHeader,proto3" json:"api_key_header,omitempty"`
}

func (x *HTTPAuth) Reset() {
	*x = HTTPAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAuth) ProtoMessage() {}

func (x *HTTPAuth) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAuth.ProtoReflect.Descriptor instead.
func (*HTTPAuth) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *HTTPAuth) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *HTTPAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HTTPAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *HTTPAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HTTPAuth) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *HTTPAuth) GetApiKeyHeader() string {
	if x != nil {
		return x.ApiKeyHeader
	}
	return ""
}

type WebSocketAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authentication type.
	AuthType string `protobuf:"bytes,1,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	// Authentication credentials.
	Credentials map[string]string `protobuf:"bytes,2,rep,name=credentials,proto3" json:"credentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WebSocketAuth) Reset() {
	*x = WebSocketAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSocketAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketAuth) ProtoMessage() {}

func (x *WebSocketAuth) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketAuth.ProtoReflect.Descriptor instead.
func (*WebSocketAuth) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *WebSocketAuth) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *WebSocketAuth) GetCredentials() map[string]string {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// Security configurations.
type TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable TLS.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// CA certificate.
	CaCert string `protobuf:"bytes,2,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Client certificate.
	ClientCert string `protobuf:"bytes,3,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// Client private key.
	ClientKey string `protobuf:"bytes,4,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// Skip certificate verification (for testing).
	SkipVerify bool `protobuf:"varint,5,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig.ProtoReflect.Descriptor instead.
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *TLSConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLSConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *TLSConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *TLSConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *TLSConfig) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

type DTLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable DTLS.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Pre-shared key.
	Psk string `protobuf:"bytes,2,opt,name=psk,proto3" json:"psk,omitempty"`
	// PSK identity.
	PskIdentity string `protobuf:"bytes,3,opt,name=psk_identity,json=pskIdentity,proto3" json:"psk_identity,omitempty"`
	// CA certificate.
	CaCert string `protobuf:"bytes,4,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Client certificate.
	ClientCert string `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// Client private key.
	ClientKey string `protobuf:"bytes,6,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *DTLSConfig) Reset() {
	*x = DTLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTLSConfig) ProtoMessage() {}

func (x *DTLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTLSConfig.ProtoReflect.Descriptor instead.
func (*DTLSConfig) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *DTLSConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DTLSConfig) GetPsk() string {
	if x != nil {
		return x.Psk
	}
	return ""
}

func (x *DTLSConfig) GetPskIdentity() string {
	if x != nil {
		return x.PskIdentity
	}
	return ""
}

func (x *DTLSConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *DTLSConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *DTLSConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

// Request/Response messages.
type CreateInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to create.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateInventoryDeviceRequest) Reset() {
	*x = CreateInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryDeviceRequest) ProtoMessage() {}

func (x *CreateInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *CreateInventoryDeviceRequest) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *CreateInventoryDeviceResponse) Reset() {
	*x = CreateInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryDeviceResponse) ProtoMessage() {}

func (x *CreateInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *CreateInventoryDeviceResponse) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type GetInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *GetInventoryDeviceRequest) Reset() {
	*x = GetInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryDeviceRequest) ProtoMessage() {}

func (x *GetInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *GetInventoryDeviceRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type GetInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device information.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetInventoryDeviceResponse) Reset() {
	*x = GetInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryDeviceResponse) ProtoMessage() {}

func (x *GetInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *GetInventoryDeviceResponse) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetInventoryDeviceResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetInventoryDeviceResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to update.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateInventoryDeviceRequest) Reset() {
	*x = UpdateInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInventoryDeviceRequest) ProtoMessage() {}

func (x *UpdateInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateInventoryDeviceRequest) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeleteInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *DeleteInventoryDeviceRequest) Reset() {
	*x = DeleteInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInventoryDeviceRequest) ProtoMessage() {}

func (x *DeleteInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteInventoryDeviceRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type ListInventoryDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of devices to return.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for pagination.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Filter by device type.
	CommunicationModes []CommunicationMode `protobuf:"varint,3,rep,packed,name=communication_modes,json=communicationModes,proto3,enum=api.CommunicationMode" json:"communication_modes,omitempty"`
	// Filter by status.
	Statuses []InventoryStatus `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=api.InventoryStatus" json:"statuses,omitempty"`
	// Filter by manufacturer.
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Filter by model.
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// Search query (name, description, etc.).
	Search string `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	// Filter by tags.
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListInventoryDevicesRequest) Reset() {
	*x = ListInventoryDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryDevicesRequest) ProtoMessage() {}

func (x *ListInventoryDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListInventoryDevicesRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{25}
}

func (x *ListInventoryDevicesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListInventoryDevicesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListInventoryDevicesRequest) GetCommunicationModes() []CommunicationMode {
	if x != nil {
		return x.CommunicationModes
	}
	return nil
}

func (x *ListInventoryDevicesRequest) GetStatuses() []InventoryStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListInventoryDevicesRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type InventoryDeviceListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Device name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Device type.
	CommunicationMode CommunicationMode `protobuf:"varint,3,opt,name=communication_mode,json=communicationMode,proto3,enum=api.CommunicationMode" json:"communication_mode,omitempty"`
	// Current status.
	Status InventoryStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.InventoryStatus" json:"status,omitempty"`
	// Manufacturer.
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Model.
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InventoryDeviceListItem) Reset() {
	*x = InventoryDeviceListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryDeviceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryDeviceListItem) ProtoMessage() {}

func (x *InventoryDeviceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryDeviceListItem.ProtoReflect.Descriptor instead.
func (*InventoryDeviceListItem) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{26}
}

func (x *InventoryDeviceListItem) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *InventoryDeviceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryDeviceListItem) GetCommunicationMode() CommunicationMode {
	if x != nil {
		return x.CommunicationMode
	}
	return CommunicationMode_COMMUNICATION_MODE_UNKNOWN
}

func (x *InventoryDeviceListItem) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *InventoryDeviceListItem) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *InventoryDeviceListItem) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InventoryDeviceListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryDeviceListItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListInventoryDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count.
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Device list.
	Devices []*InventoryDeviceListItem `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ListInventoryDevicesResponse) Reset() {
	*x = ListInventoryDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryDevicesResponse) ProtoMessage() {}

func (x *ListInventoryDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListInventoryDevicesResponse) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{27}
}

func (x *ListInventoryDevicesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInventoryDevicesResponse) GetDevices() []*InventoryDeviceListItem {
	if x != nil {
		return x.Devices
	}
	return nil
}

type UpdateDeviceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// New status.
	Status InventoryStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.InventoryStatus" json:"status,omitempty"`
	// Status update reason/notes.
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *UpdateDeviceStatusRequest) Reset() {
	*x = UpdateDeviceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceStatusRequest) ProtoMessage() {}

func (x *UpdateDeviceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceStatusRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateDeviceStatusRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *UpdateDeviceStatusRequest) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *UpdateDeviceStatusRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type BulkImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices to import.
	Devices []*InventoryDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Skip devices that already exist.
	SkipExisting bool `protobuf:"varint,2,opt,name=skip_existing,json=skipExisting,proto3" json:"skip_existing,omitempty"`
}

func (x *BulkImportRequest) Reset() {
	*x = BulkImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkImportRequest) ProtoMessage() {}

func (x *BulkImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkImportRequest.ProtoReflect.Descriptor instead.
func (*BulkImportRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{29}
}

func (x *BulkImportRequest) GetDevices() []*InventoryDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *BulkImportRequest) GetSkipExisting() bool {
	if x != nil {
		return x.SkipExisting
	}
	return false
}

type BulkImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of devices successfully imported.
	ImportedCount uint32 `protobuf:"varint,1,opt,name=imported_count,json=importedCount,proto3" json:"imported_count,omitempty"`
	// Number of devices skipped.
	SkippedCount uint32 `protobuf:"varint,2,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	// Number of devices failed.
	FailedCount uint32 `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	// Import errors.
	Errors []*ImportError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BulkImportResponse) Reset() {
	*x = BulkImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkImportResponse) ProtoMessage() {}

func (x *BulkImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkImportResponse.ProtoReflect.Descriptor instead.
func (*BulkImportResponse) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{30}
}

func (x *BulkImportResponse) GetImportedCount() uint32 {
	if x != nil {
		return x.ImportedCount
	}
	return 0
}

func (x *BulkImportResponse) GetSkippedCount() uint32 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *BulkImportResponse) GetFailedCount() uint32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BulkImportResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ImportError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI that failed.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Error message.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ImportError) Reset() {
	*x = ImportError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportError) ProtoMessage() {}

func (x *ImportError) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportError.ProtoReflect.Descriptor instead.
func (*ImportError) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{31}
}

func (x *ImportError) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *ImportError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SearchInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search criteria.
	Criteria map[string]string `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maximum results.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchInventoryDeviceRequest) Reset() {
	*x = SearchInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInventoryDeviceRequest) ProtoMessage() {}

func (x *SearchInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*SearchInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{32}
}

func (x *SearchInventoryDeviceRequest) GetCriteria() map[string]string {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *SearchInventoryDeviceRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Found devices.
	Devices []*InventoryDeviceListItem `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SearchInventoryDeviceResponse) Reset() {
	*x = SearchInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_inventory_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInventoryDeviceResponse) ProtoMessage() {}

func (x *SearchInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_inventory_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*SearchInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_external_service_inventory_proto_rawDescGZIP(), []int{33}
}

func (x *SearchInventoryDeviceResponse) GetDevices() []*InventoryDeviceListItem {
	if x != nil {
		return x.Devices
	}
	return nil
}

var File_external_service_inventory_proto protoreflect.FileDescriptor

var file_external_service_inventory_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8,
	0x05, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x75, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x06, 0x0a, 0x13, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x71, 0x74, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x63, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x55, 0x44, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x64, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x48, 0x74, 0x74, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f,
	0x41, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x4d, 0x71, 0x74, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x66, 0x69, 0x54, 0x63, 0x70, 0x12, 0x2f, 0x0a,
	0x08, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x75, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x55, 0x44, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x66, 0x69, 0x55, 0x64, 0x70, 0x12, 0x32,
	0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x48, 0x74,
	0x74, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x61, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69,
	0x43, 0x6f, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0f,
	0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61,
	0x57, 0x41, 0x4e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f,
	0x72, 0x61, 0x77, 0x61, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbf, 0x02,
	0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x75, 0x69,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x40, 0x0a,
	0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xff, 0x03, 0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x51, 0x54, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xea, 0x02, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x43,
	0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfa,
	0x01, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x44, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x12,
	0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe6, 0x02,
	0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x41, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0d,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x74, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x0e, 0x57, 0x69, 0x46, 0x69, 0x4d,
	0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x6f, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x6f, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x51,
	0x54, 0x54, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x57, 0x69, 0x46,
	0x69, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x7a, 0x0a, 0x0d, 0x57, 0x69, 0x46, 0x69, 0x55, 0x44, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0xbf, 0x02, 0x0a, 0x0e, 0x57, 0x69, 0x46, 0x69, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x46, 0x69, 0x43, 0x6f, 0x41, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x74, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x74, 0x6c, 0x73, 0x22, 0xce, 0x01, 0x0a,
	0x0f, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x3a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65,
	0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x08, 0x4d, 0x51, 0x54, 0x54, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x57, 0x65,
	0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9f, 0x01, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x44, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0x2d, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4c, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0x91, 0x03, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe4, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x77, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x71, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0x68, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xad, 0x01, 0x0a,
	0x12, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x0b,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32, 0xa2, 0x07,
	0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x75, 0x69, 0x7d, 0x12, 0x73, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x75, 0x69, 0x7d, 0x12, 0x69, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x75, 0x69, 0x7d, 0x12, 0x6b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x76, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75,
	0x69, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x0a, 0x42, 0x75, 0x6c,
	0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b,
	0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x79, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x64, 0x61, 0x72, 0x6b, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_service_inventory_proto_rawDescOnce sync.Once
	file_external_service_inventory_proto_rawDescData = file_external_service_inventory_proto_rawDesc
)

func file_external_service_inventory_proto_rawDescGZIP() []byte {
	file_external_service_inventory_proto_rawDescOnce.Do(func() {
		file_external_service_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_inventory_proto_rawDescData)
	})
	return file_external_service_inventory_proto_rawDescData
}

var file_external_service_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_external_service_inventory_proto_goTypes = []any{
	(*InventoryDevice)(nil),               // 0: api.InventoryDevice
	(*DeviceConfiguration)(nil),           // 1: api.DeviceConfiguration
	(*GatewayConfig)(nil),                 // 2: api.GatewayConfig
	(*CellularMQTTConfig)(nil),            // 3: api.CellularMQTTConfig
	(*CellularTCPConfig)(nil),             // 4: api.CellularTCPConfig
	(*CellularUDPConfig)(nil),             // 5: api.CellularUDPConfig
	(*CellularHTTPConfig)(nil),            // 6: api.CellularHTTPConfig
	(*CellularCoAPConfig)(nil),            // 7: api.CellularCoAPConfig
	(*WiFiMQTTConfig)(nil),                // 8: api.WiFiMQTTConfig
	(*WiFiTCPConfig)(nil),                 // 9: api.WiFiTCPConfig
	(*WiFiUDPConfig)(nil),                 // 10: api.WiFiUDPConfig
	(*WiFiHTTPConfig)(nil),                // 11: api.WiFiHTTPConfig
	(*WiFiCoAPConfig)(nil),                // 12: api.WiFiCoAPConfig
	(*WebSocketConfig)(nil),               // 13: api.WebSocketConfig
	(*MQTTAuth)(nil),                      // 14: api.MQTTAuth
	(*HTTPAuth)(nil),                      // 15: api.HTTPAuth
	(*WebSocketAuth)(nil),                 // 16: api.WebSocketAuth
	(*TLSConfig)(nil),                     // 17: api.TLSConfig
	(*DTLSConfig)(nil),                    // 18: api.DTLSConfig
	(*CreateInventoryDeviceRequest)(nil),  // 19: api.CreateInventoryDeviceRequest
	(*CreateInventoryDeviceResponse)(nil), // 20: api.CreateInventoryDeviceResponse
	(*GetInventoryDeviceRequest)(nil),     // 21: api.GetInventoryDeviceRequest
	(*GetInventoryDeviceResponse)(nil),    // 22: api.GetInventoryDeviceResponse
	(*UpdateInventoryDeviceRequest)(nil),  // 23: api.UpdateInventoryDeviceRequest
	(*DeleteInventoryDeviceRequest)(nil),  // 24: api.DeleteInventoryDeviceRequest
	(*ListInventoryDevicesRequest)(nil),   // 25: api.ListInventoryDevicesRequest
	(*InventoryDeviceListItem)(nil),       // 26: api.InventoryDeviceListItem
	(*ListInventoryDevicesResponse)(nil),  // 27: api.ListInventoryDevicesResponse
	(*UpdateDeviceStatusRequest)(nil),     // 28: api.UpdateDeviceStatusRequest
	(*BulkImportRequest)(nil),             // 29: api.BulkImportRequest
	(*BulkImportResponse)(nil),            // 30: api.BulkImportResponse
	(*ImportError)(nil),                   // 31: api.ImportError
	(*SearchInventoryDeviceRequest)(nil),  // 32: api.SearchInventoryDeviceRequest
	(*SearchInventoryDeviceResponse)(nil), // 33: api.SearchInventoryDeviceResponse
	nil,                                   // 34: api.InventoryDevice.TagsEntry
	nil,                                   // 35: api.InventoryDevice.MetadataEntry
	nil,                                   // 36: api.GatewayConfig.NetworkConfigEntry
	nil,                                   // 37: api.WebSocketAuth.CredentialsEntry
	nil,                                   // 38: api.ListInventoryDevicesRequest.TagsEntry
	nil,                                   // 39: api.SearchInventoryDeviceRequest.CriteriaEntry
	(CommunicationMode)(0),                // 40: api.CommunicationMode
	(InventoryStatus)(0),                  // 41: api.InventoryStatus
	(*LoRaWANDevice)(nil),                 // 42: api.LoRaWANDevice
	(*LoRaWANGateway)(nil),                // 43: api.LoRaWANGateway
	(DownlinkMode)(0),                     // 44: api.DownlinkMode
	(CellularNetworkType)(0),              // 45: api.CellularNetworkType
	(*timestamppb.Timestamp)(nil),         // 46: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 47: google.protobuf.Empty
}
var file_external_service_inventory_proto_depIdxs = []int32{
	40, // 0: api.InventoryDevice.communication_mode:type_name -> api.CommunicationMode
	41, // 1: api.InventoryDevice.status:type_name -> api.InventoryStatus
	1,  // 2: api.InventoryDevice.configuration:type_name -> api.DeviceConfiguration
	34, // 3: api.InventoryDevice.tags:type_name -> api.InventoryDevice.TagsEntry
	35, // 4: api.InventoryDevice.metadata:type_name -> api.InventoryDevice.MetadataEntry
	42, // 5: api.DeviceConfiguration.lorawan_device:type_name -> api.LoRaWANDevice
	3,  // 6: api.DeviceConfiguration.cellular_mqtt:type_name -> api.CellularMQTTConfig
	4,  // 7: api.DeviceConfiguration.cellular_tcp:type_name -> api.CellularTCPConfig
	5,  // 8: api.DeviceConfiguration.cellular_udp:type_name -> api.CellularUDPConfig
	6,  // 9: api.DeviceConfiguration.cellular_http:type_name -> api.CellularHTTPConfig
	7,  // 10: api.DeviceConfiguration.cellular_coap:type_name -> api.CellularCoAPConfig
	8,  // 11: api.DeviceConfiguration.wifi_mqtt:type_name -> api.WiFiMQTTConfig
	9,  // 12: api.DeviceConfiguration.wifi_tcp:type_name -> api.WiFiTCPConfig
	10, // 13: api.DeviceConfiguration.wifi_udp:type_name -> api.WiFiUDPConfig
	11, // 14: api.DeviceConfiguration.wifi_http:type_name -> api.WiFiHTTPConfig
	12, // 15: api.DeviceConfiguration.wifi_coap:type_name -> api.WiFiCoAPConfig
	13, // 16: api.DeviceConfiguration.websocket:type_name -> api.WebSocketConfig
	2,  // 17: api.DeviceConfiguration.gateway:type_name -> api.GatewayConfig
	43, // 18: api.DeviceConfiguration.lorawan_gateway:type_name -> api.LoRaWANGateway
	40, // 19: api.GatewayConfig.supported_communication_modes:type_name -> api.CommunicationMode
	36, // 20: api.GatewayConfig.network_config:type_name -> api.GatewayConfig.NetworkConfigEntry
	44, // 21: api.CellularMQTTConfig.downlink_mode:type_name -> api.DownlinkMode
	14, // 22: api.CellularMQTTConfig.authentication:type_name -> api.MQTTAuth
	17, // 23: api.CellularMQTTConfig.tls:type_name -> api.TLSConfig
	45, // 24: api.CellularMQTTConfig.network_type:type_name -> api.CellularNetworkType
	44, // 25: api.CellularTCPConfig.downlink_mode:type_name -> api.DownlinkMode
	17, // 26: api.CellularTCPConfig.tls:type_name -> api.TLSConfig
	45, // 27: api.CellularTCPConfig.network_type:type_name -> api.CellularNetworkType
	44, // 28: api.CellularUDPConfig.downlink_mode:type_name -> api.DownlinkMode
	45, // 29: api.CellularUDPConfig.network_type:type_name -> api.CellularNetworkType
	44, // 30: api.CellularHTTPConfig.downlink_mode:type_name -> api.DownlinkMode
	15, // 31: api.CellularHTTPConfig.authentication:type_name -> api.HTTPAuth
	17, // 32: api.CellularHTTPConfig.tls:type_name -> api.TLSConfig
	45, // 33: api.CellularHTTPConfig.network_type:type_name -> api.CellularNetworkType
	44, // 34: api.CellularCoAPConfig.downlink_mode:type_name -> api.DownlinkMode
	18, // 35: api.CellularCoAPConfig.dtls:type_name -> api.DTLSConfig
	45, // 36: api.CellularCoAPConfig.network_type:type_name -> api.CellularNetworkType
	14, // 37: api.WiFiMQTTConfig.authentication:type_name -> api.MQTTAuth
	17, // 38: api.WiFiMQTTConfig.tls:type_name -> api.TLSConfig
	17, // 39: api.WiFiTCPConfig.tls:type_name -> api.TLSConfig
	15, // 40: api.WiFiHTTPConfig.authentication:type_name -> api.HTTPAuth
	17, // 41: api.WiFiHTTPConfig.tls:type_name -> api.TLSConfig
	18, // 42: api.WiFiCoAPConfig.dtls:type_name -> api.DTLSConfig
	16, // 43: api.WebSocketConfig.authentication:type_name -> api.WebSocketAuth
	17, // 44: api.WebSocketConfig.tls:type_name -> api.TLSConfig
	37, // 45: api.WebSocketAuth.credentials:type_name -> api.WebSocketAuth.CredentialsEntry
	0,  // 46: api.CreateInventoryDeviceRequest.device:type_name -> api.InventoryDevice
	0,  // 47: api.GetInventoryDeviceResponse.device:type_name -> api.InventoryDevice
	46, // 48: api.GetInventoryDeviceResponse.created_at:type_name -> google.protobuf.Timestamp
	46, // 49: api.GetInventoryDeviceResponse.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 50: api.UpdateInventoryDeviceRequest.device:type_name -> api.InventoryDevice
	40, // 51: api.ListInventoryDevicesRequest.communication_modes:type_name -> api.CommunicationMode
	41, // 52: api.ListInventoryDevicesRequest.statuses:type_name -> api.InventoryStatus
	38, // 53: api.ListInventoryDevicesRequest.tags:type_name -> api.ListInventoryDevicesRequest.TagsEntry
	40, // 54: api.InventoryDeviceListItem.communication_mode:type_name -> api.CommunicationMode
	41, // 55: api.InventoryDeviceListItem.status:type_name -> api.InventoryStatus
	46, // 56: api.InventoryDeviceListItem.created_at:type_name -> google.protobuf.Timestamp
	46, // 57: api.InventoryDeviceListItem.updated_at:type_name -> google.protobuf.Timestamp
	26, // 58: api.ListInventoryDevicesResponse.devices:type_name -> api.InventoryDeviceListItem
	41, // 59: api.UpdateDeviceStatusRequest.status:type_name -> api.InventoryStatus
	0,  // 60: api.BulkImportRequest.devices:type_name -> api.InventoryDevice
	31, // 61: api.BulkImportResponse.errors:type_name -> api.ImportError
	39, // 62: api.SearchInventoryDeviceRequest.criteria:type_name -> api.SearchInventoryDeviceRequest.CriteriaEntry
	26, // 63: api.SearchInventoryDeviceResponse.devices:type_name -> api.InventoryDeviceListItem
	19, // 64: api.InventoryService.Create:input_type -> api.CreateInventoryDeviceRequest
	21, // 65: api.InventoryService.Get:input_type -> api.GetInventoryDeviceRequest
	23, // 66: api.InventoryService.Update:input_type -> api.UpdateInventoryDeviceRequest
	24, // 67: api.InventoryService.Delete:input_type -> api.DeleteInventoryDeviceRequest
	25, // 68: api.InventoryService.List:input_type -> api.ListInventoryDevicesRequest
	28, // 69: api.InventoryService.UpdateStatus:input_type -> api.UpdateDeviceStatusRequest
	29, // 70: api.InventoryService.BulkImport:input_type -> api.BulkImportRequest
	32, // 71: api.InventoryService.Search:input_type -> api.SearchInventoryDeviceRequest
	20, // 72: api.InventoryService.Create:output_type -> api.CreateInventoryDeviceResponse
	22, // 73: api.InventoryService.Get:output_type -> api.GetInventoryDeviceResponse
	47, // 74: api.InventoryService.Update:output_type -> google.protobuf.Empty
	47, // 75: api.InventoryService.Delete:output_type -> google.protobuf.Empty
	27, // 76: api.InventoryService.List:output_type -> api.ListInventoryDevicesResponse
	47, // 77: api.InventoryService.UpdateStatus:output_type -> google.protobuf.Empty
	30, // 78: api.InventoryService.BulkImport:output_type -> api.BulkImportResponse
	33, // 79: api.InventoryService.Search:output_type -> api.SearchInventoryDeviceResponse
	72, // [72:80] is the sub-list for method output_type
	64, // [64:72] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_external_service_inventory_proto_init() }
func file_external_service_inventory_proto_init() {
	if File_external_service_inventory_proto != nil {
		return
	}
	file_external_service_lorawan_types_proto_init()
	file_external_service_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_external_service_inventory_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GatewayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CellularMQTTConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CellularTCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CellularUDPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CellularHTTPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CellularCoAPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*WiFiMQTTConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*WiFiTCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*WiFiUDPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*WiFiHTTPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*WiFiCoAPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*WebSocketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MQTTAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*WebSocketAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DTLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryDeviceListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDeviceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*BulkImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*BulkImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ImportError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SearchInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_inventory_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*SearchInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_external_service_inventory_proto_msgTypes[1].OneofWrappers = []any{
		(*DeviceConfiguration_LorawanDevice)(nil),
		(*DeviceConfiguration_CellularMqtt)(nil),
		(*DeviceConfiguration_CellularTcp)(nil),
		(*DeviceConfiguration_CellularUdp)(nil),
		(*DeviceConfiguration_CellularHttp)(nil),
		(*DeviceConfiguration_CellularCoap)(nil),
		(*DeviceConfiguration_WifiMqtt)(nil),
		(*DeviceConfiguration_WifiTcp)(nil),
		(*DeviceConfiguration_WifiUdp)(nil),
		(*DeviceConfiguration_WifiHttp)(nil),
		(*DeviceConfiguration_WifiCoap)(nil),
		(*DeviceConfiguration_Websocket)(nil),
		(*DeviceConfiguration_Gateway)(nil),
		(*DeviceConfiguration_LorawanGateway)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_service_inventory_proto_goTypes,
		DependencyIndexes: file_external_service_inventory_proto_depIdxs,
		MessageInfos:      file_external_service_inventory_proto_msgTypes,
	}.Build()
	File_external_service_inventory_proto = out.File
	file_external_service_inventory_proto_rawDesc = nil
	file_external_service_inventory_proto_goTypes = nil
	file_external_service_inventory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Create a new device in inventory.
	Create(ctx context.Context, in *CreateInventoryDeviceRequest, opts ...grpc.CallOption) (*CreateInventoryDeviceResponse, error)
	// Get device from inventory by EUI.
	Get(ctx context.Context, in *GetInventoryDeviceRequest, opts ...grpc.CallOption) (*GetInventoryDeviceResponse, error)
	// Update device in inventory.
	Update(ctx context.Context, in *UpdateInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete device from inventory.
	Delete(ctx context.Context, in *DeleteInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List devices in inventory with filtering.
	List(ctx context.Context, in *ListInventoryDevicesRequest, opts ...grpc.CallOption) (*ListInventoryDevicesResponse, error)
	// Update device status (onboarded/provisioned).
	UpdateStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bulk import devices to inventory.
	BulkImport(ctx context.Context, in *BulkImportRequest, opts ...grpc.CallOption) (*BulkImportResponse, error)
	// Search for device by various criteria.
	Search(ctx context.Context, in *SearchInventoryDeviceRequest, opts ...grpc.CallOption) (*SearchInventoryDeviceResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) Create(ctx context.Context, in *CreateInventoryDeviceRequest, opts ...grpc.CallOption) (*CreateInventoryDeviceResponse, error) {
	out := new(CreateInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.InventoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Get(ctx context.Context, in *GetInventoryDeviceRequest, opts ...grpc.CallOption) (*GetInventoryDeviceResponse, error) {
	out := new(GetInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.InventoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Update(ctx context.Context, in *UpdateInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.InventoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Delete(ctx context.Context, in *DeleteInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.InventoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) List(ctx context.Context, in *ListInventoryDevicesRequest, opts ...grpc.CallOption) (*ListInventoryDevicesResponse, error) {
	out := new(ListInventoryDevicesResponse)
	err := c.cc.Invoke(ctx, "/api.InventoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.InventoryService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BulkImport(ctx context.Context, in *BulkImportRequest, opts ...grpc.CallOption) (*BulkImportResponse, error) {
	out := new(BulkImportResponse)
	err := c.cc.Invoke(ctx, "/api.InventoryService/BulkImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Search(ctx context.Context, in *SearchInventoryDeviceRequest, opts ...grpc.CallOption) (*SearchInventoryDeviceResponse, error) {
	out := new(SearchInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/api.InventoryService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
type InventoryServiceServer interface {
	// Create a new device in inventory.
	Create(context.Context, *CreateInventoryDeviceRequest) (*CreateInventoryDeviceResponse, error)
	// Get device from inventory by EUI.
	Get(context.Context, *GetInventoryDeviceRequest) (*GetInventoryDeviceResponse, error)
	// Update device in inventory.
	Update(context.Context, *UpdateInventoryDeviceRequest) (*emptypb.Empty, error)
	// Delete device from inventory.
	Delete(context.Context, *DeleteInventoryDeviceRequest) (*emptypb.Empty, error)
	// List devices in inventory with filtering.
	List(context.Context, *ListInventoryDevicesRequest) (*ListInventoryDevicesResponse, error)
	// Update device status (onboarded/provisioned).
	UpdateStatus(context.Context, *UpdateDeviceStatusRequest) (*emptypb.Empty, error)
	// Bulk import devices to inventory.
	BulkImport(context.Context, *BulkImportRequest) (*BulkImportResponse, error)
	// Search for device by various criteria.
	Search(context.Context, *SearchInventoryDeviceRequest) (*SearchInventoryDeviceResponse, error)
}

// UnimplementedInventoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (*UnimplementedInventoryServiceServer) Create(context.Context, *CreateInventoryDeviceRequest) (*CreateInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedInventoryServiceServer) Get(context.Context, *GetInventoryDeviceRequest) (*GetInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedInventoryServiceServer) Update(context.Context, *UpdateInventoryDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedInventoryServiceServer) Delete(context.Context, *DeleteInventoryDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedInventoryServiceServer) List(context.Context, *ListInventoryDevicesRequest) (*ListInventoryDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedInventoryServiceServer) UpdateStatus(context.Context, *UpdateDeviceStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedInventoryServiceServer) BulkImport(context.Context, *BulkImportRequest) (*BulkImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkImport not implemented")
}
func (*UnimplementedInventoryServiceServer) Search(context.Context, *SearchInventoryDeviceRequest) (*SearchInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Create(ctx, req.(*CreateInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Get(ctx, req.(*GetInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Update(ctx, req.(*UpdateInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Delete(ctx, req.(*DeleteInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventoryDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).List(ctx, req.(*ListInventoryDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateStatus(ctx, req.(*UpdateDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BulkImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BulkImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/BulkImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BulkImport(ctx, req.(*BulkImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InventoryService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Search(ctx, req.(*SearchInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InventoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InventoryService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InventoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InventoryService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InventoryService_List_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _InventoryService_UpdateStatus_Handler,
		},
		{
			MethodName: "BulkImport",
			Handler:    _InventoryService_BulkImport_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _InventoryService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/service/inventory.proto",
}
