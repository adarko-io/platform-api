// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/shared_enums.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transport protocol enumeration - unified for inventory and data services.
type TransportProtocol int32

const (
	// Unknown protocol.
	TransportProtocol_TRANSPORT_PROTOCOL_UNKNOWN TransportProtocol = 0
	// LoRaWAN.
	TransportProtocol_TRANSPORT_LORAWAN TransportProtocol = 1
	// HTTP/HTTPS over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
	TransportProtocol_TRANSPORT_CELLULAR_HTTP TransportProtocol = 2
	// MQTT over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
	TransportProtocol_TRANSPORT_CELLULAR_MQTT TransportProtocol = 3
	// TCP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
	TransportProtocol_TRANSPORT_CELLULAR_TCP TransportProtocol = 4
	// UDP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
	TransportProtocol_TRANSPORT_CELLULAR_UDP TransportProtocol = 5
	// CoAP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).
	TransportProtocol_TRANSPORT_CELLULAR_COAP TransportProtocol = 6
	// HTTP/HTTPS over WiFi/Ethernet.
	TransportProtocol_TRANSPORT_HTTP TransportProtocol = 7
	// MQTT over WiFi/Ethernet.
	TransportProtocol_TRANSPORT_MQTT TransportProtocol = 8
	// TCP over WiFi/Ethernet.
	TransportProtocol_TRANSPORT_TCP TransportProtocol = 9
	// UDP over WiFi/Ethernet.
	TransportProtocol_TRANSPORT_UDP TransportProtocol = 10
	// CoAP over WiFi/Ethernet.
	TransportProtocol_TRANSPORT_COAP TransportProtocol = 11
	// WebSocket.
	TransportProtocol_TRANSPORT_WEBSOCKET TransportProtocol = 12
)

// Enum value maps for TransportProtocol.
var (
	TransportProtocol_name = map[int32]string{
		0:  "TRANSPORT_PROTOCOL_UNKNOWN",
		1:  "TRANSPORT_LORAWAN",
		2:  "TRANSPORT_CELLULAR_HTTP",
		3:  "TRANSPORT_CELLULAR_MQTT",
		4:  "TRANSPORT_CELLULAR_TCP",
		5:  "TRANSPORT_CELLULAR_UDP",
		6:  "TRANSPORT_CELLULAR_COAP",
		7:  "TRANSPORT_HTTP",
		8:  "TRANSPORT_MQTT",
		9:  "TRANSPORT_TCP",
		10: "TRANSPORT_UDP",
		11: "TRANSPORT_COAP",
		12: "TRANSPORT_WEBSOCKET",
	}
	TransportProtocol_value = map[string]int32{
		"TRANSPORT_PROTOCOL_UNKNOWN": 0,
		"TRANSPORT_LORAWAN":          1,
		"TRANSPORT_CELLULAR_HTTP":    2,
		"TRANSPORT_CELLULAR_MQTT":    3,
		"TRANSPORT_CELLULAR_TCP":     4,
		"TRANSPORT_CELLULAR_UDP":     5,
		"TRANSPORT_CELLULAR_COAP":    6,
		"TRANSPORT_HTTP":             7,
		"TRANSPORT_MQTT":             8,
		"TRANSPORT_TCP":              9,
		"TRANSPORT_UDP":              10,
		"TRANSPORT_COAP":             11,
		"TRANSPORT_WEBSOCKET":        12,
	}
)

func (x TransportProtocol) Enum() *TransportProtocol {
	p := new(TransportProtocol)
	*p = x
	return p
}

func (x TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[0].Descriptor()
}

func (TransportProtocol) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[0]
}

func (x TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportProtocol.Descriptor instead.
func (TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{0}
}

// Device type enumeration - unified for inventory and other services.
type DeviceType int32

const (
	// Unknown device type.
	DeviceType_DEVICE_TYPE_UNKNOWN DeviceType = 0
	// LoRaWAN device.
	DeviceType_DEVICE_TYPE_LORAWAN DeviceType = 1
	// Cellular MQTT device.
	DeviceType_DEVICE_TYPE_CELLULAR_MQTT DeviceType = 2
	// Cellular TCP device.
	DeviceType_DEVICE_TYPE_CELLULAR_TCP DeviceType = 3
	// Cellular UDP device.
	DeviceType_DEVICE_TYPE_CELLULAR_UDP DeviceType = 4
	// Cellular HTTP device.
	DeviceType_DEVICE_TYPE_CELLULAR_HTTP DeviceType = 5
	// Cellular CoAP device.
	DeviceType_DEVICE_TYPE_CELLULAR_COAP DeviceType = 6
	// WiFi/Ethernet MQTT device.
	DeviceType_DEVICE_TYPE_WIFI_MQTT DeviceType = 7
	// WiFi/Ethernet TCP device.
	DeviceType_DEVICE_TYPE_WIFI_TCP DeviceType = 8
	// WiFi/Ethernet UDP device.
	DeviceType_DEVICE_TYPE_WIFI_UDP DeviceType = 9
	// WiFi/Ethernet HTTP device.
	DeviceType_DEVICE_TYPE_WIFI_HTTP DeviceType = 10
	// WiFi/Ethernet CoAP device.
	DeviceType_DEVICE_TYPE_WIFI_COAP DeviceType = 11
	// WebSocket device.
	DeviceType_DEVICE_TYPE_WEBSOCKET DeviceType = 12
	// Gateway device.
	DeviceType_DEVICE_TYPE_GATEWAY DeviceType = 13
	// LoRaWAN Gateway device.
	DeviceType_DEVICE_TYPE_LORAWAN_GATEWAY DeviceType = 14
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0:  "DEVICE_TYPE_UNKNOWN",
		1:  "DEVICE_TYPE_LORAWAN",
		2:  "DEVICE_TYPE_CELLULAR_MQTT",
		3:  "DEVICE_TYPE_CELLULAR_TCP",
		4:  "DEVICE_TYPE_CELLULAR_UDP",
		5:  "DEVICE_TYPE_CELLULAR_HTTP",
		6:  "DEVICE_TYPE_CELLULAR_COAP",
		7:  "DEVICE_TYPE_WIFI_MQTT",
		8:  "DEVICE_TYPE_WIFI_TCP",
		9:  "DEVICE_TYPE_WIFI_UDP",
		10: "DEVICE_TYPE_WIFI_HTTP",
		11: "DEVICE_TYPE_WIFI_COAP",
		12: "DEVICE_TYPE_WEBSOCKET",
		13: "DEVICE_TYPE_GATEWAY",
		14: "DEVICE_TYPE_LORAWAN_GATEWAY",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNKNOWN":         0,
		"DEVICE_TYPE_LORAWAN":         1,
		"DEVICE_TYPE_CELLULAR_MQTT":   2,
		"DEVICE_TYPE_CELLULAR_TCP":    3,
		"DEVICE_TYPE_CELLULAR_UDP":    4,
		"DEVICE_TYPE_CELLULAR_HTTP":   5,
		"DEVICE_TYPE_CELLULAR_COAP":   6,
		"DEVICE_TYPE_WIFI_MQTT":       7,
		"DEVICE_TYPE_WIFI_TCP":        8,
		"DEVICE_TYPE_WIFI_UDP":        9,
		"DEVICE_TYPE_WIFI_HTTP":       10,
		"DEVICE_TYPE_WIFI_COAP":       11,
		"DEVICE_TYPE_WEBSOCKET":       12,
		"DEVICE_TYPE_GATEWAY":         13,
		"DEVICE_TYPE_LORAWAN_GATEWAY": 14,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{1}
}

// Location source enumeration - unified across all services.
type LocationSource int32

const (
	// Unknown location source.
	LocationSource_LOCATION_SOURCE_UNKNOWN LocationSource = 0
	// GPS coordinates.
	LocationSource_LOCATION_SOURCE_GPS LocationSource = 1
	// Manually configured.
	LocationSource_LOCATION_SOURCE_MANUAL LocationSource = 2
	// Calculated via triangulation.
	LocationSource_LOCATION_SOURCE_TRIANGULATION LocationSource = 3
	// WiFi-based location.
	LocationSource_LOCATION_SOURCE_WIFI LocationSource = 4
	// Manual override.
	LocationSource_LOCATION_SOURCE_MANUAL_OVERRIDE LocationSource = 5
	// Configuration-based.
	LocationSource_LOCATION_SOURCE_CONFIG LocationSource = 6
	// GEO resolver TDOA.
	LocationSource_LOCATION_SOURCE_GEO_RESOLVER_TDOA LocationSource = 7
	// GEO resolver RSSI.
	LocationSource_LOCATION_SOURCE_GEO_RESOLVER_RSSI LocationSource = 8
	// GEO resolver GNSS.
	LocationSource_LOCATION_SOURCE_GEO_RESOLVER_GNSS LocationSource = 9
	// GEO resolver WiFi.
	LocationSource_LOCATION_SOURCE_GEO_RESOLVER_WIFI LocationSource = 10
)

// Enum value maps for LocationSource.
var (
	LocationSource_name = map[int32]string{
		0:  "LOCATION_SOURCE_UNKNOWN",
		1:  "LOCATION_SOURCE_GPS",
		2:  "LOCATION_SOURCE_MANUAL",
		3:  "LOCATION_SOURCE_TRIANGULATION",
		4:  "LOCATION_SOURCE_WIFI",
		5:  "LOCATION_SOURCE_MANUAL_OVERRIDE",
		6:  "LOCATION_SOURCE_CONFIG",
		7:  "LOCATION_SOURCE_GEO_RESOLVER_TDOA",
		8:  "LOCATION_SOURCE_GEO_RESOLVER_RSSI",
		9:  "LOCATION_SOURCE_GEO_RESOLVER_GNSS",
		10: "LOCATION_SOURCE_GEO_RESOLVER_WIFI",
	}
	LocationSource_value = map[string]int32{
		"LOCATION_SOURCE_UNKNOWN":           0,
		"LOCATION_SOURCE_GPS":               1,
		"LOCATION_SOURCE_MANUAL":            2,
		"LOCATION_SOURCE_TRIANGULATION":     3,
		"LOCATION_SOURCE_WIFI":              4,
		"LOCATION_SOURCE_MANUAL_OVERRIDE":   5,
		"LOCATION_SOURCE_CONFIG":            6,
		"LOCATION_SOURCE_GEO_RESOLVER_TDOA": 7,
		"LOCATION_SOURCE_GEO_RESOLVER_RSSI": 8,
		"LOCATION_SOURCE_GEO_RESOLVER_GNSS": 9,
		"LOCATION_SOURCE_GEO_RESOLVER_WIFI": 10,
	}
)

func (x LocationSource) Enum() *LocationSource {
	p := new(LocationSource)
	*p = x
	return p
}

func (x LocationSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationSource) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[2].Descriptor()
}

func (LocationSource) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[2]
}

func (x LocationSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationSource.Descriptor instead.
func (LocationSource) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{2}
}

// Inventory status enumeration.
type InventoryStatus int32

const (
	// Device in inventory, not yet onboarded.
	InventoryStatus_INVENTORY_STATUS_INVENTORY InventoryStatus = 0
	// Device onboarded to platform.
	InventoryStatus_INVENTORY_STATUS_ONBOARDED InventoryStatus = 1
	// Device provisioned and active.
	InventoryStatus_INVENTORY_STATUS_PROVISIONED InventoryStatus = 2
	// Device decommissioned.
	InventoryStatus_INVENTORY_STATUS_DECOMMISSIONED InventoryStatus = 3
	// Device reported as faulty.
	InventoryStatus_INVENTORY_STATUS_FAULTY InventoryStatus = 4
	// Device lost or stolen.
	InventoryStatus_INVENTORY_STATUS_LOST InventoryStatus = 5
)

// Enum value maps for InventoryStatus.
var (
	InventoryStatus_name = map[int32]string{
		0: "INVENTORY_STATUS_INVENTORY",
		1: "INVENTORY_STATUS_ONBOARDED",
		2: "INVENTORY_STATUS_PROVISIONED",
		3: "INVENTORY_STATUS_DECOMMISSIONED",
		4: "INVENTORY_STATUS_FAULTY",
		5: "INVENTORY_STATUS_LOST",
	}
	InventoryStatus_value = map[string]int32{
		"INVENTORY_STATUS_INVENTORY":      0,
		"INVENTORY_STATUS_ONBOARDED":      1,
		"INVENTORY_STATUS_PROVISIONED":    2,
		"INVENTORY_STATUS_DECOMMISSIONED": 3,
		"INVENTORY_STATUS_FAULTY":         4,
		"INVENTORY_STATUS_LOST":           5,
	}
)

func (x InventoryStatus) Enum() *InventoryStatus {
	p := new(InventoryStatus)
	*p = x
	return p
}

func (x InventoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[3].Descriptor()
}

func (InventoryStatus) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[3]
}

func (x InventoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryStatus.Descriptor instead.
func (InventoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{3}
}

// Downlink delivery mode enumeration.
type DownlinkMode int32

const (
	// Immediate downlink (for always-on devices).
	DownlinkMode_DOWNLINK_MODE_IMMEDIATE DownlinkMode = 0
	// Queued downlink (for battery-powered devices, sent on next uplink).
	DownlinkMode_DOWNLINK_MODE_QUEUED DownlinkMode = 1
	// Scheduled downlink (sent at specific time).
	DownlinkMode_DOWNLINK_MODE_SCHEDULED DownlinkMode = 2
)

// Enum value maps for DownlinkMode.
var (
	DownlinkMode_name = map[int32]string{
		0: "DOWNLINK_MODE_IMMEDIATE",
		1: "DOWNLINK_MODE_QUEUED",
		2: "DOWNLINK_MODE_SCHEDULED",
	}
	DownlinkMode_value = map[string]int32{
		"DOWNLINK_MODE_IMMEDIATE": 0,
		"DOWNLINK_MODE_QUEUED":    1,
		"DOWNLINK_MODE_SCHEDULED": 2,
	}
)

func (x DownlinkMode) Enum() *DownlinkMode {
	p := new(DownlinkMode)
	*p = x
	return p
}

func (x DownlinkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownlinkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[4].Descriptor()
}

func (DownlinkMode) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[4]
}

func (x DownlinkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownlinkMode.Descriptor instead.
func (DownlinkMode) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{4}
}

// Cellular network type enumeration.
type CellularNetworkType int32

const (
	CellularNetworkType_CELLULAR_NETWORK_TYPE_AUTO    CellularNetworkType = 0
	CellularNetworkType_CELLULAR_NETWORK_TYPE_GSM_2G  CellularNetworkType = 1
	CellularNetworkType_CELLULAR_NETWORK_TYPE_UMTS_3G CellularNetworkType = 2
	CellularNetworkType_CELLULAR_NETWORK_TYPE_LTE_4G  CellularNetworkType = 3
	CellularNetworkType_CELLULAR_NETWORK_TYPE_NR_5G   CellularNetworkType = 4
	CellularNetworkType_CELLULAR_NETWORK_TYPE_NB_IOT  CellularNetworkType = 5
	CellularNetworkType_CELLULAR_NETWORK_TYPE_LTE_M   CellularNetworkType = 6
)

// Enum value maps for CellularNetworkType.
var (
	CellularNetworkType_name = map[int32]string{
		0: "CELLULAR_NETWORK_TYPE_AUTO",
		1: "CELLULAR_NETWORK_TYPE_GSM_2G",
		2: "CELLULAR_NETWORK_TYPE_UMTS_3G",
		3: "CELLULAR_NETWORK_TYPE_LTE_4G",
		4: "CELLULAR_NETWORK_TYPE_NR_5G",
		5: "CELLULAR_NETWORK_TYPE_NB_IOT",
		6: "CELLULAR_NETWORK_TYPE_LTE_M",
	}
	CellularNetworkType_value = map[string]int32{
		"CELLULAR_NETWORK_TYPE_AUTO":    0,
		"CELLULAR_NETWORK_TYPE_GSM_2G":  1,
		"CELLULAR_NETWORK_TYPE_UMTS_3G": 2,
		"CELLULAR_NETWORK_TYPE_LTE_4G":  3,
		"CELLULAR_NETWORK_TYPE_NR_5G":   4,
		"CELLULAR_NETWORK_TYPE_NB_IOT":  5,
		"CELLULAR_NETWORK_TYPE_LTE_M":   6,
	}
)

func (x CellularNetworkType) Enum() *CellularNetworkType {
	p := new(CellularNetworkType)
	*p = x
	return p
}

func (x CellularNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellularNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[5].Descriptor()
}

func (CellularNetworkType) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[5]
}

func (x CellularNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellularNetworkType.Descriptor instead.
func (CellularNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{5}
}

// Aggregation type for time-series data.
type AggregationType int32

const (
	// No aggregation (raw data).
	AggregationType_AGGREGATION_TYPE_NONE AggregationType = 0
	// Average values.
	AggregationType_AGGREGATION_TYPE_AVG AggregationType = 1
	// Minimum values.
	AggregationType_AGGREGATION_TYPE_MIN AggregationType = 2
	// Maximum values.
	AggregationType_AGGREGATION_TYPE_MAX AggregationType = 3
	// Sum of values.
	AggregationType_AGGREGATION_TYPE_SUM AggregationType = 4
	// Count of data points.
	AggregationType_AGGREGATION_TYPE_COUNT AggregationType = 5
	// First value in time window.
	AggregationType_AGGREGATION_TYPE_FIRST AggregationType = 6
	// Last value in time window.
	AggregationType_AGGREGATION_TYPE_LAST AggregationType = 7
)

// Enum value maps for AggregationType.
var (
	AggregationType_name = map[int32]string{
		0: "AGGREGATION_TYPE_NONE",
		1: "AGGREGATION_TYPE_AVG",
		2: "AGGREGATION_TYPE_MIN",
		3: "AGGREGATION_TYPE_MAX",
		4: "AGGREGATION_TYPE_SUM",
		5: "AGGREGATION_TYPE_COUNT",
		6: "AGGREGATION_TYPE_FIRST",
		7: "AGGREGATION_TYPE_LAST",
	}
	AggregationType_value = map[string]int32{
		"AGGREGATION_TYPE_NONE":  0,
		"AGGREGATION_TYPE_AVG":   1,
		"AGGREGATION_TYPE_MIN":   2,
		"AGGREGATION_TYPE_MAX":   3,
		"AGGREGATION_TYPE_SUM":   4,
		"AGGREGATION_TYPE_COUNT": 5,
		"AGGREGATION_TYPE_FIRST": 6,
		"AGGREGATION_TYPE_LAST":  7,
	}
)

func (x AggregationType) Enum() *AggregationType {
	p := new(AggregationType)
	*p = x
	return p
}

func (x AggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[6].Descriptor()
}

func (AggregationType) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[6]
}

func (x AggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationType.Descriptor instead.
func (AggregationType) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{6}
}

// Time interval for aggregation.
type TimeInterval int32

const (
	// 1 minute intervals.
	TimeInterval_TIME_INTERVAL_MINUTE TimeInterval = 0
	// 5 minute intervals.
	TimeInterval_TIME_INTERVAL_MINUTE_5 TimeInterval = 1
	// 15 minute intervals.
	TimeInterval_TIME_INTERVAL_MINUTE_15 TimeInterval = 2
	// 30 minute intervals.
	TimeInterval_TIME_INTERVAL_MINUTE_30 TimeInterval = 3
	// 1 hour intervals.
	TimeInterval_TIME_INTERVAL_HOUR TimeInterval = 4
	// 6 hour intervals.
	TimeInterval_TIME_INTERVAL_HOUR_6 TimeInterval = 5
	// 12 hour intervals.
	TimeInterval_TIME_INTERVAL_HOUR_12 TimeInterval = 6
	// 1 day intervals.
	TimeInterval_TIME_INTERVAL_DAY TimeInterval = 7
	// 1 week intervals.
	TimeInterval_TIME_INTERVAL_WEEK TimeInterval = 8
	// 1 month intervals.
	TimeInterval_TIME_INTERVAL_MONTH TimeInterval = 9
)

// Enum value maps for TimeInterval.
var (
	TimeInterval_name = map[int32]string{
		0: "TIME_INTERVAL_MINUTE",
		1: "TIME_INTERVAL_MINUTE_5",
		2: "TIME_INTERVAL_MINUTE_15",
		3: "TIME_INTERVAL_MINUTE_30",
		4: "TIME_INTERVAL_HOUR",
		5: "TIME_INTERVAL_HOUR_6",
		6: "TIME_INTERVAL_HOUR_12",
		7: "TIME_INTERVAL_DAY",
		8: "TIME_INTERVAL_WEEK",
		9: "TIME_INTERVAL_MONTH",
	}
	TimeInterval_value = map[string]int32{
		"TIME_INTERVAL_MINUTE":    0,
		"TIME_INTERVAL_MINUTE_5":  1,
		"TIME_INTERVAL_MINUTE_15": 2,
		"TIME_INTERVAL_MINUTE_30": 3,
		"TIME_INTERVAL_HOUR":      4,
		"TIME_INTERVAL_HOUR_6":    5,
		"TIME_INTERVAL_HOUR_12":   6,
		"TIME_INTERVAL_DAY":       7,
		"TIME_INTERVAL_WEEK":      8,
		"TIME_INTERVAL_MONTH":     9,
	}
)

func (x TimeInterval) Enum() *TimeInterval {
	p := new(TimeInterval)
	*p = x
	return p
}

func (x TimeInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_external_service_shared_enums_proto_enumTypes[7].Descriptor()
}

func (TimeInterval) Type() protoreflect.EnumType {
	return &file_external_service_shared_enums_proto_enumTypes[7]
}

func (x TimeInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInterval.Descriptor instead.
func (TimeInterval) EnumDescriptor() ([]byte, []int) {
	return file_external_service_shared_enums_proto_rawDescGZIP(), []int{7}
}

var File_external_service_shared_enums_proto protoreflect.FileDescriptor

var file_external_service_shared_enums_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x2a, 0xd4, 0x02, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f,
	0x52, 0x41, 0x57, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x51, 0x54, 0x54, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f,
	0x43, 0x4f, 0x41, 0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x51, 0x54, 0x54, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10,
	0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55,
	0x44, 0x50, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x4f, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x0c, 0x2a, 0xb1, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x51, 0x54, 0x54, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x41, 0x50, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f,
	0x4d, 0x51, 0x54, 0x54, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x49, 0x46, 0x49, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x43, 0x4f, 0x41, 0x50, 0x10, 0x0b,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x52, 0x41, 0x57, 0x41, 0x4e, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x0e, 0x2a, 0xfc, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52,
	0x49, 0x41, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x44, 0x4f, 0x41, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x53, 0x53, 0x49, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x4e, 0x53, 0x53, 0x10, 0x09, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x49,
	0x46, 0x49, 0x10, 0x0a, 0x2a, 0xd0, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x62, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x80, 0x02, 0x0a, 0x13,
	0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x53, 0x4d,
	0x5f, 0x32, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4d, 0x54, 0x53, 0x5f, 0x33, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x54, 0x45, 0x5f, 0x34, 0x47, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x52, 0x5f, 0x35, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x42, 0x5f, 0x49, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x54, 0x45, 0x5f, 0x4d, 0x10, 0x06, 0x2a, 0xe7,
	0x01, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x07, 0x2a, 0x93, 0x02, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x35, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x31, 0x35, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x54, 0x45, 0x5f, 0x33, 0x30, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x36, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x5f, 0x31, 0x32, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x09, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x61,
	0x72, 0x6b, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_external_service_shared_enums_proto_rawDescOnce sync.Once
	file_external_service_shared_enums_proto_rawDescData = file_external_service_shared_enums_proto_rawDesc
)

func file_external_service_shared_enums_proto_rawDescGZIP() []byte {
	file_external_service_shared_enums_proto_rawDescOnce.Do(func() {
		file_external_service_shared_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_shared_enums_proto_rawDescData)
	})
	return file_external_service_shared_enums_proto_rawDescData
}

var file_external_service_shared_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_external_service_shared_enums_proto_goTypes = []any{
	(TransportProtocol)(0),   // 0: api.TransportProtocol
	(DeviceType)(0),          // 1: api.DeviceType
	(LocationSource)(0),      // 2: api.LocationSource
	(InventoryStatus)(0),     // 3: api.InventoryStatus
	(DownlinkMode)(0),        // 4: api.DownlinkMode
	(CellularNetworkType)(0), // 5: api.CellularNetworkType
	(AggregationType)(0),     // 6: api.AggregationType
	(TimeInterval)(0),        // 7: api.TimeInterval
}
var file_external_service_shared_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_external_service_shared_enums_proto_init() }
func file_external_service_shared_enums_proto_init() {
	if File_external_service_shared_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_shared_enums_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_external_service_shared_enums_proto_goTypes,
		DependencyIndexes: file_external_service_shared_enums_proto_depIdxs,
		EnumInfos:         file_external_service_shared_enums_proto_enumTypes,
	}.Build()
	File_external_service_shared_enums_proto = out.File
	file_external_service_shared_enums_proto_rawDesc = nil
	file_external_service_shared_enums_proto_goTypes = nil
	file_external_service_shared_enums_proto_depIdxs = nil
}
