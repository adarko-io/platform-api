// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: external/service/data.proto

package service

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeviceData represents a single data point from a device or gateway.
// Supports data from multiple protocols: LoRaWAN, Cellular, HTTP, MQTT, TCP, UDP, CoAP.
type DeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64) - Device EUI or Gateway EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Timestamp when the data was received.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transport protocol used.
	TransportProtocol TransportProtocol `protobuf:"varint,3,opt,name=transport_protocol,json=transportProtocol,proto3,enum=api.TransportProtocol" json:"transport_protocol,omitempty"`
	// Raw payload data (base64 encoded).
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Decoded data (JSON object as string).
	DecodedData string `protobuf:"bytes,5,opt,name=decoded_data,json=decodedData,proto3" json:"decoded_data,omitempty"`
	// Signal quality metrics (protocol-specific).
	SignalMetrics *SignalMetrics `protobuf:"bytes,6,opt,name=signal_metrics,json=signalMetrics,proto3" json:"signal_metrics,omitempty"`
	// Device location (for location history tracking).
	Location *DeviceLocation `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	// Protocol-specific metadata.
	ProtocolMetadata *ProtocolMetadata `protobuf:"bytes,8,opt,name=protocol_metadata,json=protocolMetadata,proto3" json:"protocol_metadata,omitempty"`
	// Additional metadata.
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeviceData) Reset() {
	*x = DeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceData) ProtoMessage() {}

func (x *DeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceData.ProtoReflect.Descriptor instead.
func (*DeviceData) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceData) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *DeviceData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DeviceData) GetTransportProtocol() TransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return TransportProtocol_TRANSPORT_PROTOCOL_UNKNOWN
}

func (x *DeviceData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *DeviceData) GetDecodedData() string {
	if x != nil {
		return x.DecodedData
	}
	return ""
}

func (x *DeviceData) GetSignalMetrics() *SignalMetrics {
	if x != nil {
		return x.SignalMetrics
	}
	return nil
}

func (x *DeviceData) GetLocation() *DeviceLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DeviceData) GetProtocolMetadata() *ProtocolMetadata {
	if x != nil {
		return x.ProtocolMetadata
	}
	return nil
}

func (x *DeviceData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Signal quality metrics (protocol-specific).
type SignalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RSSI (Received Signal Strength Indicator) in dBm (LoRaWAN, Cellular).
	Rssi int32 `protobuf:"varint,1,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// SNR (Signal-to-Noise Ratio) in dB (LoRaWAN).
	Snr float32 `protobuf:"fixed32,2,opt,name=snr,proto3" json:"snr,omitempty"`
	// Spreading factor (LoRaWAN specific).
	SpreadingFactor uint32 `protobuf:"varint,3,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// Bandwidth in Hz (LoRaWAN specific).
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Frequency in Hz (LoRaWAN specific).
	Frequency uint64 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Signal strength percentage (0-100) for other protocols.
	SignalStrengthPercent uint32 `protobuf:"varint,6,opt,name=signal_strength_percent,json=signalStrengthPercent,proto3" json:"signal_strength_percent,omitempty"`
	// Link quality indicator (cellular specific).
	Lqi uint32 `protobuf:"varint,7,opt,name=lqi,proto3" json:"lqi,omitempty"`
}

func (x *SignalMetrics) Reset() {
	*x = SignalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMetrics) ProtoMessage() {}

func (x *SignalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMetrics.ProtoReflect.Descriptor instead.
func (*SignalMetrics) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{1}
}

func (x *SignalMetrics) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *SignalMetrics) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *SignalMetrics) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

func (x *SignalMetrics) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *SignalMetrics) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SignalMetrics) GetSignalStrengthPercent() uint32 {
	if x != nil {
		return x.SignalStrengthPercent
	}
	return 0
}

func (x *SignalMetrics) GetLqi() uint32 {
	if x != nil {
		return x.Lqi
	}
	return 0
}

// Protocol-specific metadata for different transport protocols.
type ProtocolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProtocolData:
	//
	//	*ProtocolMetadata_Lorawan
	//	*ProtocolMetadata_Cellular
	//	*ProtocolMetadata_Http
	//	*ProtocolMetadata_Mqtt
	//	*ProtocolMetadata_Tcp
	//	*ProtocolMetadata_Udp
	//	*ProtocolMetadata_Coap
	//	*ProtocolMetadata_Websocket
	ProtocolData isProtocolMetadata_ProtocolData `protobuf_oneof:"protocol_data"`
}

func (x *ProtocolMetadata) Reset() {
	*x = ProtocolMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMetadata) ProtoMessage() {}

func (x *ProtocolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMetadata.ProtoReflect.Descriptor instead.
func (*ProtocolMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{2}
}

func (m *ProtocolMetadata) GetProtocolData() isProtocolMetadata_ProtocolData {
	if m != nil {
		return m.ProtocolData
	}
	return nil
}

func (x *ProtocolMetadata) GetLorawan() *LoRaWANMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

func (x *ProtocolMetadata) GetCellular() *CellularMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Cellular); ok {
		return x.Cellular
	}
	return nil
}

func (x *ProtocolMetadata) GetHttp() *HTTPMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Http); ok {
		return x.Http
	}
	return nil
}

func (x *ProtocolMetadata) GetMqtt() *MQTTMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (x *ProtocolMetadata) GetTcp() *TCPMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *ProtocolMetadata) GetUdp() *UDPMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Udp); ok {
		return x.Udp
	}
	return nil
}

func (x *ProtocolMetadata) GetCoap() *CoAPMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Coap); ok {
		return x.Coap
	}
	return nil
}

func (x *ProtocolMetadata) GetWebsocket() *WebSocketMetadata {
	if x, ok := x.GetProtocolData().(*ProtocolMetadata_Websocket); ok {
		return x.Websocket
	}
	return nil
}

type isProtocolMetadata_ProtocolData interface {
	isProtocolMetadata_ProtocolData()
}

type ProtocolMetadata_Lorawan struct {
	// LoRaWAN specific metadata.
	Lorawan *LoRaWANMetadata `protobuf:"bytes,1,opt,name=lorawan,proto3,oneof"`
}

type ProtocolMetadata_Cellular struct {
	// Cellular network metadata (for all cellular protocols).
	Cellular *CellularMetadata `protobuf:"bytes,2,opt,name=cellular,proto3,oneof"`
}

type ProtocolMetadata_Http struct {
	// HTTP specific metadata (works with both cellular and WiFi/Ethernet).
	Http *HTTPMetadata `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type ProtocolMetadata_Mqtt struct {
	// MQTT specific metadata (works with both cellular and WiFi/Ethernet).
	Mqtt *MQTTMetadata `protobuf:"bytes,4,opt,name=mqtt,proto3,oneof"`
}

type ProtocolMetadata_Tcp struct {
	// TCP specific metadata (works with both cellular and WiFi/Ethernet).
	Tcp *TCPMetadata `protobuf:"bytes,5,opt,name=tcp,proto3,oneof"`
}

type ProtocolMetadata_Udp struct {
	// UDP specific metadata (works with both cellular and WiFi/Ethernet).
	Udp *UDPMetadata `protobuf:"bytes,6,opt,name=udp,proto3,oneof"`
}

type ProtocolMetadata_Coap struct {
	// CoAP specific metadata (works with both cellular and WiFi/Ethernet).
	Coap *CoAPMetadata `protobuf:"bytes,7,opt,name=coap,proto3,oneof"`
}

type ProtocolMetadata_Websocket struct {
	// WebSocket specific metadata.
	Websocket *WebSocketMetadata `protobuf:"bytes,8,opt,name=websocket,proto3,oneof"`
}

func (*ProtocolMetadata_Lorawan) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Cellular) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Http) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Mqtt) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Tcp) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Udp) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Coap) isProtocolMetadata_ProtocolData() {}

func (*ProtocolMetadata_Websocket) isProtocolMetadata_ProtocolData() {}

// LoRaWAN specific metadata.
type LoRaWANMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame counter.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame port.
	FPort uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Data rate.
	DataRate string `protobuf:"bytes,3,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// Confirmed/unconfirmed uplink.
	Confirmed bool `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Gateway count that received the message.
	GatewayCount uint32 `protobuf:"varint,5,opt,name=gateway_count,json=gatewayCount,proto3" json:"gateway_count,omitempty"`
}

func (x *LoRaWANMetadata) Reset() {
	*x = LoRaWANMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaWANMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaWANMetadata) ProtoMessage() {}

func (x *LoRaWANMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaWANMetadata.ProtoReflect.Descriptor instead.
func (*LoRaWANMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{3}
}

func (x *LoRaWANMetadata) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *LoRaWANMetadata) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *LoRaWANMetadata) GetDataRate() string {
	if x != nil {
		return x.DataRate
	}
	return ""
}

func (x *LoRaWANMetadata) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *LoRaWANMetadata) GetGatewayCount() uint32 {
	if x != nil {
		return x.GatewayCount
	}
	return 0
}

// Cellular specific metadata.
type CellularMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMEI of the device.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// IMSI of the SIM card.
	Imsi string `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Cell ID.
	CellId string `protobuf:"bytes,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	// Mobile Country Code.
	Mcc string `protobuf:"bytes,4,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile Network Code.
	Mnc string `protobuf:"bytes,5,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// Location Area Code.
	Lac string `protobuf:"bytes,6,opt,name=lac,proto3" json:"lac,omitempty"`
	// Network type (2G, 3G, 4G, 5G, NB-IoT, LTE-M).
	NetworkType string `protobuf:"bytes,7,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
}

func (x *CellularMetadata) Reset() {
	*x = CellularMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularMetadata) ProtoMessage() {}

func (x *CellularMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularMetadata.ProtoReflect.Descriptor instead.
func (*CellularMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{4}
}

func (x *CellularMetadata) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CellularMetadata) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *CellularMetadata) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *CellularMetadata) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *CellularMetadata) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

func (x *CellularMetadata) GetLac() string {
	if x != nil {
		return x.Lac
	}
	return ""
}

func (x *CellularMetadata) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

// HTTP specific metadata.
type HTTPMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP method used.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Request headers.
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Query parameters.
	QueryParams map[string]string `protobuf:"bytes,3,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP status code (for responses).
	StatusCode uint32 `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Content type.
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// User agent.
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Remote IP address.
	RemoteIp string `protobuf:"bytes,7,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
}

func (x *HTTPMetadata) Reset() {
	*x = HTTPMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPMetadata) ProtoMessage() {}

func (x *HTTPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPMetadata.ProtoReflect.Descriptor instead.
func (*HTTPMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{5}
}

func (x *HTTPMetadata) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPMetadata) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPMetadata) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *HTTPMetadata) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HTTPMetadata) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HTTPMetadata) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

// MQTT specific metadata.
type MQTTMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic the message was published to.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// QoS level (0, 1, 2).
	Qos uint32 `protobuf:"varint,2,opt,name=qos,proto3" json:"qos,omitempty"`
	// Retain flag.
	Retain bool `protobuf:"varint,3,opt,name=retain,proto3" json:"retain,omitempty"`
	// Message ID.
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Client ID.
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Broker hostname/IP.
	Broker string `protobuf:"bytes,6,opt,name=broker,proto3" json:"broker,omitempty"`
}

func (x *MQTTMetadata) Reset() {
	*x = MQTTMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTMetadata) ProtoMessage() {}

func (x *MQTTMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTMetadata.ProtoReflect.Descriptor instead.
func (*MQTTMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{6}
}

func (x *MQTTMetadata) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MQTTMetadata) GetQos() uint32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

func (x *MQTTMetadata) GetRetain() bool {
	if x != nil {
		return x.Retain
	}
	return false
}

func (x *MQTTMetadata) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MQTTMetadata) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MQTTMetadata) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

// TCP specific metadata.
type TCPMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source IP address.
	SourceIp string `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// Source port.
	SourcePort uint32 `protobuf:"varint,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// Destination IP address.
	DestinationIp string `protobuf:"bytes,3,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	// Destination port.
	DestinationPort uint32 `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// Connection state.
	ConnectionState string `protobuf:"bytes,5,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
}

func (x *TCPMetadata) Reset() {
	*x = TCPMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPMetadata) ProtoMessage() {}

func (x *TCPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPMetadata.ProtoReflect.Descriptor instead.
func (*TCPMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{7}
}

func (x *TCPMetadata) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *TCPMetadata) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *TCPMetadata) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *TCPMetadata) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *TCPMetadata) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

// UDP specific metadata.
type UDPMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source IP address.
	SourceIp string `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// Source port.
	SourcePort uint32 `protobuf:"varint,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// Destination IP address.
	DestinationIp string `protobuf:"bytes,3,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	// Destination port.
	DestinationPort uint32 `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// Packet size.
	PacketSize uint32 `protobuf:"varint,5,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
}

func (x *UDPMetadata) Reset() {
	*x = UDPMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDPMetadata) ProtoMessage() {}

func (x *UDPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDPMetadata.ProtoReflect.Descriptor instead.
func (*UDPMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{8}
}

func (x *UDPMetadata) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *UDPMetadata) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *UDPMetadata) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *UDPMetadata) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *UDPMetadata) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

// CoAP specific metadata.
type CoAPMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CoAP method (GET, POST, PUT, DELETE).
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// URI path.
	UriPath string `protobuf:"bytes,2,opt,name=uri_path,json=uriPath,proto3" json:"uri_path,omitempty"`
	// Message type (CON, NON, ACK, RST).
	MessageType string `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Message ID.
	MessageId uint32 `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Token.
	Token []byte `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// Response code.
	ResponseCode string `protobuf:"bytes,6,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Content format.
	ContentFormat uint32 `protobuf:"varint,7,opt,name=content_format,json=contentFormat,proto3" json:"content_format,omitempty"`
}

func (x *CoAPMetadata) Reset() {
	*x = CoAPMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoAPMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoAPMetadata) ProtoMessage() {}

func (x *CoAPMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoAPMetadata.ProtoReflect.Descriptor instead.
func (*CoAPMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{9}
}

func (x *CoAPMetadata) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CoAPMetadata) GetUriPath() string {
	if x != nil {
		return x.UriPath
	}
	return ""
}

func (x *CoAPMetadata) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *CoAPMetadata) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CoAPMetadata) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CoAPMetadata) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *CoAPMetadata) GetContentFormat() uint32 {
	if x != nil {
		return x.ContentFormat
	}
	return 0
}

// WebSocket specific metadata.
type WebSocketMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WebSocket subprotocol.
	Subprotocol string `protobuf:"bytes,1,opt,name=subprotocol,proto3" json:"subprotocol,omitempty"`
	// Message type (text, binary, ping, pong, close).
	MessageType string `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// WebSocket endpoint URL.
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Connection state.
	ConnectionState string `protobuf:"bytes,4,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	// Remote IP address.
	RemoteIp string `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
}

func (x *WebSocketMetadata) Reset() {
	*x = WebSocketMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSocketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketMetadata) ProtoMessage() {}

func (x *WebSocketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketMetadata.ProtoReflect.Descriptor instead.
func (*WebSocketMetadata) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{10}
}

func (x *WebSocketMetadata) GetSubprotocol() string {
	if x != nil {
		return x.Subprotocol
	}
	return ""
}

func (x *WebSocketMetadata) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *WebSocketMetadata) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WebSocketMetadata) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

func (x *WebSocketMetadata) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

// Device location information.
type DeviceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude in decimal degrees.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude in decimal degrees.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Altitude in meters.
	Altitude float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// Accuracy in meters.
	Accuracy float32 `protobuf:"fixed32,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// Location source.
	Source LocationSource `protobuf:"varint,5,opt,name=source,proto3,enum=api.LocationSource" json:"source,omitempty"`
}

func (x *DeviceLocation) Reset() {
	*x = DeviceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLocation) ProtoMessage() {}

func (x *DeviceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLocation.ProtoReflect.Descriptor instead.
func (*DeviceLocation) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *DeviceLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *DeviceLocation) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *DeviceLocation) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *DeviceLocation) GetSource() LocationSource {
	if x != nil {
		return x.Source
	}
	return LocationSource_LOCATION_SOURCE_UNKNOWN
}

// Request to insert device data from datalogger.
type InsertFromDataloggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local device data ID (UUID from datalogger storage).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Device EUI (EUI64 as string).
	Eui string `protobuf:"bytes,2,opt,name=eui,proto3" json:"eui,omitempty"`
	// Protocol used (e.g., "mqtt-lorawan", "mqtt", "tcp", "udp").
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Processed data (JSON string containing decoded sensor readings).
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Original data (raw message as received, JSON string).
	OriginalData string `protobuf:"bytes,5,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	// Timestamp when data was received by datalogger.
	ReceivedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	// Optional: Additional metadata.
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InsertFromDataloggerRequest) Reset() {
	*x = InsertFromDataloggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertFromDataloggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertFromDataloggerRequest) ProtoMessage() {}

func (x *InsertFromDataloggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertFromDataloggerRequest.ProtoReflect.Descriptor instead.
func (*InsertFromDataloggerRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{12}
}

func (x *InsertFromDataloggerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InsertFromDataloggerRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *InsertFromDataloggerRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *InsertFromDataloggerRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *InsertFromDataloggerRequest) GetOriginalData() string {
	if x != nil {
		return x.OriginalData
	}
	return ""
}

func (x *InsertFromDataloggerRequest) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *InsertFromDataloggerRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response from inserting datalogger data.
type InsertFromDataloggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success status.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Message (error message if success=false).
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Assigned data ID (if applicable).
	DataId string `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
}

func (x *InsertFromDataloggerResponse) Reset() {
	*x = InsertFromDataloggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertFromDataloggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertFromDataloggerResponse) ProtoMessage() {}

func (x *InsertFromDataloggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertFromDataloggerResponse.ProtoReflect.Descriptor instead.
func (*InsertFromDataloggerResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{13}
}

func (x *InsertFromDataloggerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InsertFromDataloggerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InsertFromDataloggerResponse) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

// Request to insert device data.
type InsertDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single data point or batch of data points.
	Data []*DeviceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertDataRequest) Reset() {
	*x = InsertDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertDataRequest) ProtoMessage() {}

func (x *InsertDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertDataRequest.ProtoReflect.Descriptor instead.
func (*InsertDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{14}
}

func (x *InsertDataRequest) GetData() []*DeviceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to get device data.
type GetDeviceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Start time for data range.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for data range.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Maximum number of data points to return.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for pagination.
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// Include decoded data in response.
	IncludeDecoded bool `protobuf:"varint,6,opt,name=include_decoded,json=includeDecoded,proto3" json:"include_decoded,omitempty"`
	// Include signal metrics in response.
	IncludeSignalMetrics bool `protobuf:"varint,7,opt,name=include_signal_metrics,json=includeSignalMetrics,proto3" json:"include_signal_metrics,omitempty"`
	// Filter by transport protocol.
	TransportProtocols []TransportProtocol `protobuf:"varint,8,rep,packed,name=transport_protocols,json=transportProtocols,proto3,enum=api.TransportProtocol" json:"transport_protocols,omitempty"`
	// Filter by frame port (LoRaWAN specific).
	FPorts []uint32 `protobuf:"varint,9,rep,packed,name=f_ports,json=fPorts,proto3" json:"f_ports,omitempty"`
	// Filter by MQTT topics (MQTT specific).
	MqttTopics []string `protobuf:"bytes,10,rep,name=mqtt_topics,json=mqttTopics,proto3" json:"mqtt_topics,omitempty"`
	// Filter by HTTP methods (HTTP specific).
	HttpMethods []string `protobuf:"bytes,11,rep,name=http_methods,json=httpMethods,proto3" json:"http_methods,omitempty"`
}

func (x *GetDeviceDataRequest) Reset() {
	*x = GetDeviceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataRequest) ProtoMessage() {}

func (x *GetDeviceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeviceDataRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *GetDeviceDataRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetDeviceDataRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetDeviceDataRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeviceDataRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeviceDataRequest) GetIncludeDecoded() bool {
	if x != nil {
		return x.IncludeDecoded
	}
	return false
}

func (x *GetDeviceDataRequest) GetIncludeSignalMetrics() bool {
	if x != nil {
		return x.IncludeSignalMetrics
	}
	return false
}

func (x *GetDeviceDataRequest) GetTransportProtocols() []TransportProtocol {
	if x != nil {
		return x.TransportProtocols
	}
	return nil
}

func (x *GetDeviceDataRequest) GetFPorts() []uint32 {
	if x != nil {
		return x.FPorts
	}
	return nil
}

func (x *GetDeviceDataRequest) GetMqttTopics() []string {
	if x != nil {
		return x.MqttTopics
	}
	return nil
}

func (x *GetDeviceDataRequest) GetHttpMethods() []string {
	if x != nil {
		return x.HttpMethods
	}
	return nil
}

// Response containing device data.
type GetDeviceDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of data points available.
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Data points.
	Data []*DeviceData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeviceDataResponse) Reset() {
	*x = GetDeviceDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataResponse) ProtoMessage() {}

func (x *GetDeviceDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceDataResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{16}
}

func (x *GetDeviceDataResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetDeviceDataResponse) GetData() []*DeviceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for aggregated data.
type GetAggregatedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI(s) to get data for.
	Euis []string `protobuf:"bytes,1,rep,name=euis,proto3" json:"euis,omitempty"`
	// Start time for data range.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for data range.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Aggregation type.
	Aggregation AggregationType `protobuf:"varint,4,opt,name=aggregation,proto3,enum=api.AggregationType" json:"aggregation,omitempty"`
	// Time interval for aggregation.
	Interval TimeInterval `protobuf:"varint,5,opt,name=interval,proto3,enum=api.TimeInterval" json:"interval,omitempty"`
	// Fields to aggregate (e.g., "temperature", "humidity").
	Fields []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	// Group by device (if false, aggregate across all devices).
	GroupByDevice bool `protobuf:"varint,7,opt,name=group_by_device,json=groupByDevice,proto3" json:"group_by_device,omitempty"`
}

func (x *GetAggregatedDataRequest) Reset() {
	*x = GetAggregatedDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedDataRequest) ProtoMessage() {}

func (x *GetAggregatedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedDataRequest.ProtoReflect.Descriptor instead.
func (*GetAggregatedDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{17}
}

func (x *GetAggregatedDataRequest) GetEuis() []string {
	if x != nil {
		return x.Euis
	}
	return nil
}

func (x *GetAggregatedDataRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetAggregatedDataRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetAggregatedDataRequest) GetAggregation() AggregationType {
	if x != nil {
		return x.Aggregation
	}
	return AggregationType_AGGREGATION_TYPE_NONE
}

func (x *GetAggregatedDataRequest) GetInterval() TimeInterval {
	if x != nil {
		return x.Interval
	}
	return TimeInterval_TIME_INTERVAL_MINUTE
}

func (x *GetAggregatedDataRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetAggregatedDataRequest) GetGroupByDevice() bool {
	if x != nil {
		return x.GroupByDevice
	}
	return false
}

// Aggregated data point.
type AggregatedDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp (bucket start time).
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// EUI (if grouped by device).
	Eui string `protobuf:"bytes,2,opt,name=eui,proto3" json:"eui,omitempty"`
	// Aggregated values by field name.
	Values map[string]float64 `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Count of data points in this bucket.
	Count uint32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggregatedDataPoint) Reset() {
	*x = AggregatedDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedDataPoint) ProtoMessage() {}

func (x *AggregatedDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedDataPoint.ProtoReflect.Descriptor instead.
func (*AggregatedDataPoint) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{18}
}

func (x *AggregatedDataPoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AggregatedDataPoint) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *AggregatedDataPoint) GetValues() map[string]float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AggregatedDataPoint) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Response containing aggregated data.
type GetAggregatedDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregated data points.
	Data []*AggregatedDataPoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAggregatedDataResponse) Reset() {
	*x = GetAggregatedDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedDataResponse) ProtoMessage() {}

func (x *GetAggregatedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedDataResponse.ProtoReflect.Descriptor instead.
func (*GetAggregatedDataResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{19}
}

func (x *GetAggregatedDataResponse) GetData() []*AggregatedDataPoint {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to get latest data.
type GetLatestDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Include decoded data in response.
	IncludeDecoded bool `protobuf:"varint,2,opt,name=include_decoded,json=includeDecoded,proto3" json:"include_decoded,omitempty"`
	// Include signal metrics in response.
	IncludeSignalMetrics bool `protobuf:"varint,3,opt,name=include_signal_metrics,json=includeSignalMetrics,proto3" json:"include_signal_metrics,omitempty"`
}

func (x *GetLatestDataRequest) Reset() {
	*x = GetLatestDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataRequest) ProtoMessage() {}

func (x *GetLatestDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataRequest.ProtoReflect.Descriptor instead.
func (*GetLatestDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{20}
}

func (x *GetLatestDataRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *GetLatestDataRequest) GetIncludeDecoded() bool {
	if x != nil {
		return x.IncludeDecoded
	}
	return false
}

func (x *GetLatestDataRequest) GetIncludeSignalMetrics() bool {
	if x != nil {
		return x.IncludeSignalMetrics
	}
	return false
}

// Response containing latest data.
type GetLatestDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latest data point (null if no data available).
	Data *DeviceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetLatestDataResponse) Reset() {
	*x = GetLatestDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataResponse) ProtoMessage() {}

func (x *GetLatestDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataResponse.ProtoReflect.Descriptor instead.
func (*GetLatestDataResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{21}
}

func (x *GetLatestDataResponse) GetData() *DeviceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for multi-device data.
type GetMultiDeviceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUIs to get data for.
	Euis []string `protobuf:"bytes,1,rep,name=euis,proto3" json:"euis,omitempty"`
	// Start time for data range.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for data range.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Maximum number of data points per device.
	LimitPerDevice uint32 `protobuf:"varint,4,opt,name=limit_per_device,json=limitPerDevice,proto3" json:"limit_per_device,omitempty"`
	// Include decoded data in response.
	IncludeDecoded bool `protobuf:"varint,5,opt,name=include_decoded,json=includeDecoded,proto3" json:"include_decoded,omitempty"`
}

func (x *GetMultiDeviceDataRequest) Reset() {
	*x = GetMultiDeviceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultiDeviceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultiDeviceDataRequest) ProtoMessage() {}

func (x *GetMultiDeviceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultiDeviceDataRequest.ProtoReflect.Descriptor instead.
func (*GetMultiDeviceDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{22}
}

func (x *GetMultiDeviceDataRequest) GetEuis() []string {
	if x != nil {
		return x.Euis
	}
	return nil
}

func (x *GetMultiDeviceDataRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMultiDeviceDataRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetMultiDeviceDataRequest) GetLimitPerDevice() uint32 {
	if x != nil {
		return x.LimitPerDevice
	}
	return 0
}

func (x *GetMultiDeviceDataRequest) GetIncludeDecoded() bool {
	if x != nil {
		return x.IncludeDecoded
	}
	return false
}

// Response containing multi-device data.
type GetMultiDeviceDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data grouped by EUI.
	DeviceData map[string]*GetDeviceDataResponse `protobuf:"bytes,1,rep,name=device_data,json=deviceData,proto3" json:"device_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMultiDeviceDataResponse) Reset() {
	*x = GetMultiDeviceDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultiDeviceDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultiDeviceDataResponse) ProtoMessage() {}

func (x *GetMultiDeviceDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultiDeviceDataResponse.ProtoReflect.Descriptor instead.
func (*GetMultiDeviceDataResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{23}
}

func (x *GetMultiDeviceDataResponse) GetDeviceData() map[string]*GetDeviceDataResponse {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

// Request to delete device data.
type DeleteDeviceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Start time for deletion range (optional).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for deletion range (optional).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *DeleteDeviceDataRequest) Reset() {
	*x = DeleteDeviceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceDataRequest) ProtoMessage() {}

func (x *DeleteDeviceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceDataRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteDeviceDataRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *DeleteDeviceDataRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DeleteDeviceDataRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Request for data statistics.
type GetDataStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (optional, if not set, stats for all devices).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Start time for stats range.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for stats range.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetDataStatsRequest) Reset() {
	*x = GetDataStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataStatsRequest) ProtoMessage() {}

func (x *GetDataStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataStatsRequest.ProtoReflect.Descriptor instead.
func (*GetDataStatsRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{25}
}

func (x *GetDataStatsRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *GetDataStatsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetDataStatsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Data statistics.
type DataStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of data points.
	TotalCount uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// First data timestamp.
	FirstTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_timestamp,json=firstTimestamp,proto3" json:"first_timestamp,omitempty"`
	// Last data timestamp.
	LastTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	// Average data rate (messages per hour).
	AvgDataRate float64 `protobuf:"fixed64,4,opt,name=avg_data_rate,json=avgDataRate,proto3" json:"avg_data_rate,omitempty"`
	// Unique devices count (for application stats).
	UniqueDevices uint32 `protobuf:"varint,5,opt,name=unique_devices,json=uniqueDevices,proto3" json:"unique_devices,omitempty"`
	// Data size statistics.
	SizeStats *DataSizeStats `protobuf:"bytes,6,opt,name=size_stats,json=sizeStats,proto3" json:"size_stats,omitempty"`
}

func (x *DataStats) Reset() {
	*x = DataStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStats) ProtoMessage() {}

func (x *DataStats) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStats.ProtoReflect.Descriptor instead.
func (*DataStats) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{26}
}

func (x *DataStats) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DataStats) GetFirstTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTimestamp
	}
	return nil
}

func (x *DataStats) GetLastTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *DataStats) GetAvgDataRate() float64 {
	if x != nil {
		return x.AvgDataRate
	}
	return 0
}

func (x *DataStats) GetUniqueDevices() uint32 {
	if x != nil {
		return x.UniqueDevices
	}
	return 0
}

func (x *DataStats) GetSizeStats() *DataSizeStats {
	if x != nil {
		return x.SizeStats
	}
	return nil
}

// Data size statistics.
type DataSizeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes stored.
	TotalBytes uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Average message size in bytes.
	AvgMessageSize float64 `protobuf:"fixed64,2,opt,name=avg_message_size,json=avgMessageSize,proto3" json:"avg_message_size,omitempty"`
	// Minimum message size in bytes.
	MinMessageSize uint32 `protobuf:"varint,3,opt,name=min_message_size,json=minMessageSize,proto3" json:"min_message_size,omitempty"`
	// Maximum message size in bytes.
	MaxMessageSize uint32 `protobuf:"varint,4,opt,name=max_message_size,json=maxMessageSize,proto3" json:"max_message_size,omitempty"`
}

func (x *DataSizeStats) Reset() {
	*x = DataSizeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSizeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSizeStats) ProtoMessage() {}

func (x *DataSizeStats) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSizeStats.ProtoReflect.Descriptor instead.
func (*DataSizeStats) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{27}
}

func (x *DataSizeStats) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *DataSizeStats) GetAvgMessageSize() float64 {
	if x != nil {
		return x.AvgMessageSize
	}
	return 0
}

func (x *DataSizeStats) GetMinMessageSize() uint32 {
	if x != nil {
		return x.MinMessageSize
	}
	return 0
}

func (x *DataSizeStats) GetMaxMessageSize() uint32 {
	if x != nil {
		return x.MaxMessageSize
	}
	return 0
}

// Response containing data statistics.
type GetDataStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statistics.
	Stats *DataStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetDataStatsResponse) Reset() {
	*x = GetDataStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataStatsResponse) ProtoMessage() {}

func (x *GetDataStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataStatsResponse.ProtoReflect.Descriptor instead.
func (*GetDataStatsResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{28}
}

func (x *GetDataStatsResponse) GetStats() *DataStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Request to update device location.
type UpdateDeviceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Device location.
	Location *DeviceLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Timestamp when location was updated (optional, defaults to current time).
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Source that provided this location update.
	SourceInfo string `protobuf:"bytes,4,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
}

func (x *UpdateDeviceLocationRequest) Reset() {
	*x = UpdateDeviceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceLocationRequest) ProtoMessage() {}

func (x *UpdateDeviceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceLocationRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateDeviceLocationRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *UpdateDeviceLocationRequest) GetLocation() *DeviceLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateDeviceLocationRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UpdateDeviceLocationRequest) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

// Request to get device location.
type GetDeviceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *GetDeviceLocationRequest) Reset() {
	*x = GetDeviceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceLocationRequest) ProtoMessage() {}

func (x *GetDeviceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceLocationRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceLocationRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{30}
}

func (x *GetDeviceLocationRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

// Response containing device location.
type GetDeviceLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Device location.
	Location *DeviceLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Timestamp when location was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Source that provided this location.
	SourceInfo string `protobuf:"bytes,4,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
}

func (x *GetDeviceLocationResponse) Reset() {
	*x = GetDeviceLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceLocationResponse) ProtoMessage() {}

func (x *GetDeviceLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceLocationResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceLocationResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{31}
}

func (x *GetDeviceLocationResponse) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *GetDeviceLocationResponse) GetLocation() *DeviceLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GetDeviceLocationResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetDeviceLocationResponse) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

// Request to get locations for multiple devices.
type GetMultiDeviceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUIs to get locations for.
	Euis []string `protobuf:"bytes,1,rep,name=euis,proto3" json:"euis,omitempty"`
}

func (x *GetMultiDeviceLocationRequest) Reset() {
	*x = GetMultiDeviceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultiDeviceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultiDeviceLocationRequest) ProtoMessage() {}

func (x *GetMultiDeviceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultiDeviceLocationRequest.ProtoReflect.Descriptor instead.
func (*GetMultiDeviceLocationRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{32}
}

func (x *GetMultiDeviceLocationRequest) GetEuis() []string {
	if x != nil {
		return x.Euis
	}
	return nil
}

// Response containing multiple device locations.
type GetMultiDeviceLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device locations grouped by EUI.
	Locations map[string]*GetDeviceLocationResponse `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMultiDeviceLocationResponse) Reset() {
	*x = GetMultiDeviceLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultiDeviceLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultiDeviceLocationResponse) ProtoMessage() {}

func (x *GetMultiDeviceLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultiDeviceLocationResponse.ProtoReflect.Descriptor instead.
func (*GetMultiDeviceLocationResponse) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{33}
}

func (x *GetMultiDeviceLocationResponse) GetLocations() map[string]*GetDeviceLocationResponse {
	if x != nil {
		return x.Locations
	}
	return nil
}

// Request to delete device location.
type DeleteDeviceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64).
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *DeleteDeviceLocationRequest) Reset() {
	*x = DeleteDeviceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_service_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceLocationRequest) ProtoMessage() {}

func (x *DeleteDeviceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_service_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceLocationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceLocationRequest) Descriptor() ([]byte, []int) {
	return file_external_service_data_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteDeviceLocationRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

var File_external_service_data_proto protoreflect.FileDescriptor

var file_external_service_data_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61,
	0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x75, 0x69, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x71, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x71, 0x69, 0x22, 0x89, 0x03,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41,
	0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x72,
	0x61, 0x77, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x74,
	0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x43, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63,
	0x70, 0x12, 0x24, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x44, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x41, 0x50,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x61, 0x70,
	0x12, 0x36, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x4c, 0x6f,
	0x52, 0x61, 0x57, 0x41, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x43, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x63,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x0c, 0x48, 0x54, 0x54,
	0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2,
	0x01, 0x0a, 0x0c, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x0b, 0x55, 0x44, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x41, 0x50, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x69, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x69, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x03, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x74, 0x74,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x02, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x75, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x39, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x3c, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x75, 0x69, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x59, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xbb,
	0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x75, 0x69, 0x73, 0x22, 0xd0, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x5c, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69,
	0x32, 0xf0, 0x0a, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x78, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65,
	0x75, 0x69, 0x7d, 0x12, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75, 0x69,
	0x7d, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x75,
	0x6c, 0x6b, 0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75, 0x69, 0x7d, 0x12, 0x5f, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x7d,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x75, 0x69, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75,
	0x69, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x64, 0x61, 0x72, 0x6b, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_service_data_proto_rawDescOnce sync.Once
	file_external_service_data_proto_rawDescData = file_external_service_data_proto_rawDesc
)

func file_external_service_data_proto_rawDescGZIP() []byte {
	file_external_service_data_proto_rawDescOnce.Do(func() {
		file_external_service_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_service_data_proto_rawDescData)
	})
	return file_external_service_data_proto_rawDescData
}

var file_external_service_data_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_external_service_data_proto_goTypes = []any{
	(*DeviceData)(nil),                     // 0: api.DeviceData
	(*SignalMetrics)(nil),                  // 1: api.SignalMetrics
	(*ProtocolMetadata)(nil),               // 2: api.ProtocolMetadata
	(*LoRaWANMetadata)(nil),                // 3: api.LoRaWANMetadata
	(*CellularMetadata)(nil),               // 4: api.CellularMetadata
	(*HTTPMetadata)(nil),                   // 5: api.HTTPMetadata
	(*MQTTMetadata)(nil),                   // 6: api.MQTTMetadata
	(*TCPMetadata)(nil),                    // 7: api.TCPMetadata
	(*UDPMetadata)(nil),                    // 8: api.UDPMetadata
	(*CoAPMetadata)(nil),                   // 9: api.CoAPMetadata
	(*WebSocketMetadata)(nil),              // 10: api.WebSocketMetadata
	(*DeviceLocation)(nil),                 // 11: api.DeviceLocation
	(*InsertFromDataloggerRequest)(nil),    // 12: api.InsertFromDataloggerRequest
	(*InsertFromDataloggerResponse)(nil),   // 13: api.InsertFromDataloggerResponse
	(*InsertDataRequest)(nil),              // 14: api.InsertDataRequest
	(*GetDeviceDataRequest)(nil),           // 15: api.GetDeviceDataRequest
	(*GetDeviceDataResponse)(nil),          // 16: api.GetDeviceDataResponse
	(*GetAggregatedDataRequest)(nil),       // 17: api.GetAggregatedDataRequest
	(*AggregatedDataPoint)(nil),            // 18: api.AggregatedDataPoint
	(*GetAggregatedDataResponse)(nil),      // 19: api.GetAggregatedDataResponse
	(*GetLatestDataRequest)(nil),           // 20: api.GetLatestDataRequest
	(*GetLatestDataResponse)(nil),          // 21: api.GetLatestDataResponse
	(*GetMultiDeviceDataRequest)(nil),      // 22: api.GetMultiDeviceDataRequest
	(*GetMultiDeviceDataResponse)(nil),     // 23: api.GetMultiDeviceDataResponse
	(*DeleteDeviceDataRequest)(nil),        // 24: api.DeleteDeviceDataRequest
	(*GetDataStatsRequest)(nil),            // 25: api.GetDataStatsRequest
	(*DataStats)(nil),                      // 26: api.DataStats
	(*DataSizeStats)(nil),                  // 27: api.DataSizeStats
	(*GetDataStatsResponse)(nil),           // 28: api.GetDataStatsResponse
	(*UpdateDeviceLocationRequest)(nil),    // 29: api.UpdateDeviceLocationRequest
	(*GetDeviceLocationRequest)(nil),       // 30: api.GetDeviceLocationRequest
	(*GetDeviceLocationResponse)(nil),      // 31: api.GetDeviceLocationResponse
	(*GetMultiDeviceLocationRequest)(nil),  // 32: api.GetMultiDeviceLocationRequest
	(*GetMultiDeviceLocationResponse)(nil), // 33: api.GetMultiDeviceLocationResponse
	(*DeleteDeviceLocationRequest)(nil),    // 34: api.DeleteDeviceLocationRequest
	nil,                                    // 35: api.DeviceData.MetadataEntry
	nil,                                    // 36: api.HTTPMetadata.HeadersEntry
	nil,                                    // 37: api.HTTPMetadata.QueryParamsEntry
	nil,                                    // 38: api.InsertFromDataloggerRequest.MetadataEntry
	nil,                                    // 39: api.AggregatedDataPoint.ValuesEntry
	nil,                                    // 40: api.GetMultiDeviceDataResponse.DeviceDataEntry
	nil,                                    // 41: api.GetMultiDeviceLocationResponse.LocationsEntry
	(*timestamppb.Timestamp)(nil),          // 42: google.protobuf.Timestamp
	(TransportProtocol)(0),                 // 43: api.TransportProtocol
	(LocationSource)(0),                    // 44: api.LocationSource
	(AggregationType)(0),                   // 45: api.AggregationType
	(TimeInterval)(0),                      // 46: api.TimeInterval
	(*emptypb.Empty)(nil),                  // 47: google.protobuf.Empty
}
var file_external_service_data_proto_depIdxs = []int32{
	42, // 0: api.DeviceData.timestamp:type_name -> google.protobuf.Timestamp
	43, // 1: api.DeviceData.transport_protocol:type_name -> api.TransportProtocol
	1,  // 2: api.DeviceData.signal_metrics:type_name -> api.SignalMetrics
	11, // 3: api.DeviceData.location:type_name -> api.DeviceLocation
	2,  // 4: api.DeviceData.protocol_metadata:type_name -> api.ProtocolMetadata
	35, // 5: api.DeviceData.metadata:type_name -> api.DeviceData.MetadataEntry
	3,  // 6: api.ProtocolMetadata.lorawan:type_name -> api.LoRaWANMetadata
	4,  // 7: api.ProtocolMetadata.cellular:type_name -> api.CellularMetadata
	5,  // 8: api.ProtocolMetadata.http:type_name -> api.HTTPMetadata
	6,  // 9: api.ProtocolMetadata.mqtt:type_name -> api.MQTTMetadata
	7,  // 10: api.ProtocolMetadata.tcp:type_name -> api.TCPMetadata
	8,  // 11: api.ProtocolMetadata.udp:type_name -> api.UDPMetadata
	9,  // 12: api.ProtocolMetadata.coap:type_name -> api.CoAPMetadata
	10, // 13: api.ProtocolMetadata.websocket:type_name -> api.WebSocketMetadata
	36, // 14: api.HTTPMetadata.headers:type_name -> api.HTTPMetadata.HeadersEntry
	37, // 15: api.HTTPMetadata.query_params:type_name -> api.HTTPMetadata.QueryParamsEntry
	44, // 16: api.DeviceLocation.source:type_name -> api.LocationSource
	42, // 17: api.InsertFromDataloggerRequest.received_at:type_name -> google.protobuf.Timestamp
	38, // 18: api.InsertFromDataloggerRequest.metadata:type_name -> api.InsertFromDataloggerRequest.MetadataEntry
	0,  // 19: api.InsertDataRequest.data:type_name -> api.DeviceData
	42, // 20: api.GetDeviceDataRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 21: api.GetDeviceDataRequest.end_time:type_name -> google.protobuf.Timestamp
	43, // 22: api.GetDeviceDataRequest.transport_protocols:type_name -> api.TransportProtocol
	0,  // 23: api.GetDeviceDataResponse.data:type_name -> api.DeviceData
	42, // 24: api.GetAggregatedDataRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 25: api.GetAggregatedDataRequest.end_time:type_name -> google.protobuf.Timestamp
	45, // 26: api.GetAggregatedDataRequest.aggregation:type_name -> api.AggregationType
	46, // 27: api.GetAggregatedDataRequest.interval:type_name -> api.TimeInterval
	42, // 28: api.AggregatedDataPoint.timestamp:type_name -> google.protobuf.Timestamp
	39, // 29: api.AggregatedDataPoint.values:type_name -> api.AggregatedDataPoint.ValuesEntry
	18, // 30: api.GetAggregatedDataResponse.data:type_name -> api.AggregatedDataPoint
	0,  // 31: api.GetLatestDataResponse.data:type_name -> api.DeviceData
	42, // 32: api.GetMultiDeviceDataRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 33: api.GetMultiDeviceDataRequest.end_time:type_name -> google.protobuf.Timestamp
	40, // 34: api.GetMultiDeviceDataResponse.device_data:type_name -> api.GetMultiDeviceDataResponse.DeviceDataEntry
	42, // 35: api.DeleteDeviceDataRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 36: api.DeleteDeviceDataRequest.end_time:type_name -> google.protobuf.Timestamp
	42, // 37: api.GetDataStatsRequest.start_time:type_name -> google.protobuf.Timestamp
	42, // 38: api.GetDataStatsRequest.end_time:type_name -> google.protobuf.Timestamp
	42, // 39: api.DataStats.first_timestamp:type_name -> google.protobuf.Timestamp
	42, // 40: api.DataStats.last_timestamp:type_name -> google.protobuf.Timestamp
	27, // 41: api.DataStats.size_stats:type_name -> api.DataSizeStats
	26, // 42: api.GetDataStatsResponse.stats:type_name -> api.DataStats
	11, // 43: api.UpdateDeviceLocationRequest.location:type_name -> api.DeviceLocation
	42, // 44: api.UpdateDeviceLocationRequest.timestamp:type_name -> google.protobuf.Timestamp
	11, // 45: api.GetDeviceLocationResponse.location:type_name -> api.DeviceLocation
	42, // 46: api.GetDeviceLocationResponse.updated_at:type_name -> google.protobuf.Timestamp
	41, // 47: api.GetMultiDeviceLocationResponse.locations:type_name -> api.GetMultiDeviceLocationResponse.LocationsEntry
	16, // 48: api.GetMultiDeviceDataResponse.DeviceDataEntry.value:type_name -> api.GetDeviceDataResponse
	31, // 49: api.GetMultiDeviceLocationResponse.LocationsEntry.value:type_name -> api.GetDeviceLocationResponse
	14, // 50: api.DataService.Insert:input_type -> api.InsertDataRequest
	12, // 51: api.DataService.InsertFromDatalogger:input_type -> api.InsertFromDataloggerRequest
	15, // 52: api.DataService.GetDeviceData:input_type -> api.GetDeviceDataRequest
	17, // 53: api.DataService.GetAggregatedData:input_type -> api.GetAggregatedDataRequest
	20, // 54: api.DataService.GetLatestData:input_type -> api.GetLatestDataRequest
	22, // 55: api.DataService.GetMultiDeviceData:input_type -> api.GetMultiDeviceDataRequest
	24, // 56: api.DataService.DeleteDeviceData:input_type -> api.DeleteDeviceDataRequest
	25, // 57: api.DataService.GetDataStats:input_type -> api.GetDataStatsRequest
	29, // 58: api.DataService.UpdateDeviceLocation:input_type -> api.UpdateDeviceLocationRequest
	30, // 59: api.DataService.GetDeviceLocation:input_type -> api.GetDeviceLocationRequest
	32, // 60: api.DataService.GetMultiDeviceLocation:input_type -> api.GetMultiDeviceLocationRequest
	34, // 61: api.DataService.DeleteDeviceLocation:input_type -> api.DeleteDeviceLocationRequest
	47, // 62: api.DataService.Insert:output_type -> google.protobuf.Empty
	13, // 63: api.DataService.InsertFromDatalogger:output_type -> api.InsertFromDataloggerResponse
	16, // 64: api.DataService.GetDeviceData:output_type -> api.GetDeviceDataResponse
	19, // 65: api.DataService.GetAggregatedData:output_type -> api.GetAggregatedDataResponse
	21, // 66: api.DataService.GetLatestData:output_type -> api.GetLatestDataResponse
	23, // 67: api.DataService.GetMultiDeviceData:output_type -> api.GetMultiDeviceDataResponse
	47, // 68: api.DataService.DeleteDeviceData:output_type -> google.protobuf.Empty
	28, // 69: api.DataService.GetDataStats:output_type -> api.GetDataStatsResponse
	47, // 70: api.DataService.UpdateDeviceLocation:output_type -> google.protobuf.Empty
	31, // 71: api.DataService.GetDeviceLocation:output_type -> api.GetDeviceLocationResponse
	33, // 72: api.DataService.GetMultiDeviceLocation:output_type -> api.GetMultiDeviceLocationResponse
	47, // 73: api.DataService.DeleteDeviceLocation:output_type -> google.protobuf.Empty
	62, // [62:74] is the sub-list for method output_type
	50, // [50:62] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_external_service_data_proto_init() }
func file_external_service_data_proto_init() {
	if File_external_service_data_proto != nil {
		return
	}
	file_external_service_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_external_service_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SignalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ProtocolMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LoRaWANMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CellularMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MQTTMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TCPMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UDPMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CoAPMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*WebSocketMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*InsertFromDataloggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*InsertFromDataloggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*InsertDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregatedDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AggregatedDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregatedDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetLatestDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetLatestDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetMultiDeviceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetMultiDeviceDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDeviceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DataStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DataSizeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDeviceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeviceLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetMultiDeviceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetMultiDeviceLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_service_data_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDeviceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_external_service_data_proto_msgTypes[2].OneofWrappers = []any{
		(*ProtocolMetadata_Lorawan)(nil),
		(*ProtocolMetadata_Cellular)(nil),
		(*ProtocolMetadata_Http)(nil),
		(*ProtocolMetadata_Mqtt)(nil),
		(*ProtocolMetadata_Tcp)(nil),
		(*ProtocolMetadata_Udp)(nil),
		(*ProtocolMetadata_Coap)(nil),
		(*ProtocolMetadata_Websocket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_service_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_service_data_proto_goTypes,
		DependencyIndexes: file_external_service_data_proto_depIdxs,
		MessageInfos:      file_external_service_data_proto_msgTypes,
	}.Build()
	File_external_service_data_proto = out.File
	file_external_service_data_proto_rawDesc = nil
	file_external_service_data_proto_goTypes = nil
	file_external_service_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	// Insert device data point(s).
	Insert(ctx context.Context, in *InsertDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Insert device data from datalogger (specific endpoint for datalogger integration).
	InsertFromDatalogger(ctx context.Context, in *InsertFromDataloggerRequest, opts ...grpc.CallOption) (*InsertFromDataloggerResponse, error)
	// Get device data for a specific device within a time range.
	GetDeviceData(ctx context.Context, in *GetDeviceDataRequest, opts ...grpc.CallOption) (*GetDeviceDataResponse, error)
	// Get aggregated device data (for dashboards, analytics).
	GetAggregatedData(ctx context.Context, in *GetAggregatedDataRequest, opts ...grpc.CallOption) (*GetAggregatedDataResponse, error)
	// Get latest data point for a device.
	GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error)
	// Get data for multiple devices.
	GetMultiDeviceData(ctx context.Context, in *GetMultiDeviceDataRequest, opts ...grpc.CallOption) (*GetMultiDeviceDataResponse, error)
	// Delete device data (for GDPR compliance, data retention).
	DeleteDeviceData(ctx context.Context, in *DeleteDeviceDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get data statistics for a device or application.
	GetDataStats(ctx context.Context, in *GetDataStatsRequest, opts ...grpc.CallOption) (*GetDataStatsResponse, error)
	// Update device location (latest location is stored separately).
	UpdateDeviceLocation(ctx context.Context, in *UpdateDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get device location (current/latest location).
	GetDeviceLocation(ctx context.Context, in *GetDeviceLocationRequest, opts ...grpc.CallOption) (*GetDeviceLocationResponse, error)
	// Get locations for multiple devices.
	GetMultiDeviceLocation(ctx context.Context, in *GetMultiDeviceLocationRequest, opts ...grpc.CallOption) (*GetMultiDeviceLocationResponse, error)
	// Delete device location.
	DeleteDeviceLocation(ctx context.Context, in *DeleteDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Insert(ctx context.Context, in *InsertDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DataService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) InsertFromDatalogger(ctx context.Context, in *InsertFromDataloggerRequest, opts ...grpc.CallOption) (*InsertFromDataloggerResponse, error) {
	out := new(InsertFromDataloggerResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/InsertFromDatalogger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeviceData(ctx context.Context, in *GetDeviceDataRequest, opts ...grpc.CallOption) (*GetDeviceDataResponse, error) {
	out := new(GetDeviceDataResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetAggregatedData(ctx context.Context, in *GetAggregatedDataRequest, opts ...grpc.CallOption) (*GetAggregatedDataResponse, error) {
	out := new(GetAggregatedDataResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetAggregatedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error) {
	out := new(GetLatestDataResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetLatestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetMultiDeviceData(ctx context.Context, in *GetMultiDeviceDataRequest, opts ...grpc.CallOption) (*GetMultiDeviceDataResponse, error) {
	out := new(GetMultiDeviceDataResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetMultiDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDeviceData(ctx context.Context, in *DeleteDeviceDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DataService/DeleteDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDataStats(ctx context.Context, in *GetDataStatsRequest, opts ...grpc.CallOption) (*GetDataStatsResponse, error) {
	out := new(GetDataStatsResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetDataStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDeviceLocation(ctx context.Context, in *UpdateDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DataService/UpdateDeviceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDeviceLocation(ctx context.Context, in *GetDeviceLocationRequest, opts ...grpc.CallOption) (*GetDeviceLocationResponse, error) {
	out := new(GetDeviceLocationResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetDeviceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetMultiDeviceLocation(ctx context.Context, in *GetMultiDeviceLocationRequest, opts ...grpc.CallOption) (*GetMultiDeviceLocationResponse, error) {
	out := new(GetMultiDeviceLocationResponse)
	err := c.cc.Invoke(ctx, "/api.DataService/GetMultiDeviceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDeviceLocation(ctx context.Context, in *DeleteDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DataService/DeleteDeviceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	// Insert device data point(s).
	Insert(context.Context, *InsertDataRequest) (*emptypb.Empty, error)
	// Insert device data from datalogger (specific endpoint for datalogger integration).
	InsertFromDatalogger(context.Context, *InsertFromDataloggerRequest) (*InsertFromDataloggerResponse, error)
	// Get device data for a specific device within a time range.
	GetDeviceData(context.Context, *GetDeviceDataRequest) (*GetDeviceDataResponse, error)
	// Get aggregated device data (for dashboards, analytics).
	GetAggregatedData(context.Context, *GetAggregatedDataRequest) (*GetAggregatedDataResponse, error)
	// Get latest data point for a device.
	GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error)
	// Get data for multiple devices.
	GetMultiDeviceData(context.Context, *GetMultiDeviceDataRequest) (*GetMultiDeviceDataResponse, error)
	// Delete device data (for GDPR compliance, data retention).
	DeleteDeviceData(context.Context, *DeleteDeviceDataRequest) (*emptypb.Empty, error)
	// Get data statistics for a device or application.
	GetDataStats(context.Context, *GetDataStatsRequest) (*GetDataStatsResponse, error)
	// Update device location (latest location is stored separately).
	UpdateDeviceLocation(context.Context, *UpdateDeviceLocationRequest) (*emptypb.Empty, error)
	// Get device location (current/latest location).
	GetDeviceLocation(context.Context, *GetDeviceLocationRequest) (*GetDeviceLocationResponse, error)
	// Get locations for multiple devices.
	GetMultiDeviceLocation(context.Context, *GetMultiDeviceLocationRequest) (*GetMultiDeviceLocationResponse, error)
	// Delete device location.
	DeleteDeviceLocation(context.Context, *DeleteDeviceLocationRequest) (*emptypb.Empty, error)
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) Insert(context.Context, *InsertDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedDataServiceServer) InsertFromDatalogger(context.Context, *InsertFromDataloggerRequest) (*InsertFromDataloggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFromDatalogger not implemented")
}
func (*UnimplementedDataServiceServer) GetDeviceData(context.Context, *GetDeviceDataRequest) (*GetDeviceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceData not implemented")
}
func (*UnimplementedDataServiceServer) GetAggregatedData(context.Context, *GetAggregatedDataRequest) (*GetAggregatedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedData not implemented")
}
func (*UnimplementedDataServiceServer) GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (*UnimplementedDataServiceServer) GetMultiDeviceData(context.Context, *GetMultiDeviceDataRequest) (*GetMultiDeviceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiDeviceData not implemented")
}
func (*UnimplementedDataServiceServer) DeleteDeviceData(context.Context, *DeleteDeviceDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceData not implemented")
}
func (*UnimplementedDataServiceServer) GetDataStats(context.Context, *GetDataStatsRequest) (*GetDataStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStats not implemented")
}
func (*UnimplementedDataServiceServer) UpdateDeviceLocation(context.Context, *UpdateDeviceLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceLocation not implemented")
}
func (*UnimplementedDataServiceServer) GetDeviceLocation(context.Context, *GetDeviceLocationRequest) (*GetDeviceLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceLocation not implemented")
}
func (*UnimplementedDataServiceServer) GetMultiDeviceLocation(context.Context, *GetMultiDeviceLocationRequest) (*GetMultiDeviceLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiDeviceLocation not implemented")
}
func (*UnimplementedDataServiceServer) DeleteDeviceLocation(context.Context, *DeleteDeviceLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceLocation not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Insert(ctx, req.(*InsertDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_InsertFromDatalogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFromDataloggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).InsertFromDatalogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/InsertFromDatalogger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).InsertFromDatalogger(ctx, req.(*InsertFromDataloggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeviceData(ctx, req.(*GetDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetAggregatedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetAggregatedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetAggregatedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetAggregatedData(ctx, req.(*GetAggregatedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetLatestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetLatestData(ctx, req.(*GetLatestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetMultiDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetMultiDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetMultiDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetMultiDeviceData(ctx, req.(*GetMultiDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/DeleteDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDeviceData(ctx, req.(*DeleteDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDataStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDataStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetDataStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDataStats(ctx, req.(*GetDataStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/UpdateDeviceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDeviceLocation(ctx, req.(*UpdateDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetDeviceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeviceLocation(ctx, req.(*GetDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetMultiDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetMultiDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/GetMultiDeviceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetMultiDeviceLocation(ctx, req.(*GetMultiDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DataService/DeleteDeviceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDeviceLocation(ctx, req.(*DeleteDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DataService_Insert_Handler,
		},
		{
			MethodName: "InsertFromDatalogger",
			Handler:    _DataService_InsertFromDatalogger_Handler,
		},
		{
			MethodName: "GetDeviceData",
			Handler:    _DataService_GetDeviceData_Handler,
		},
		{
			MethodName: "GetAggregatedData",
			Handler:    _DataService_GetAggregatedData_Handler,
		},
		{
			MethodName: "GetLatestData",
			Handler:    _DataService_GetLatestData_Handler,
		},
		{
			MethodName: "GetMultiDeviceData",
			Handler:    _DataService_GetMultiDeviceData_Handler,
		},
		{
			MethodName: "DeleteDeviceData",
			Handler:    _DataService_DeleteDeviceData_Handler,
		},
		{
			MethodName: "GetDataStats",
			Handler:    _DataService_GetDataStats_Handler,
		},
		{
			MethodName: "UpdateDeviceLocation",
			Handler:    _DataService_UpdateDeviceLocation_Handler,
		},
		{
			MethodName: "GetDeviceLocation",
			Handler:    _DataService_GetDeviceLocation_Handler,
		},
		{
			MethodName: "GetMultiDeviceLocation",
			Handler:    _DataService_GetMultiDeviceLocation_Handler,
		},
		{
			MethodName: "DeleteDeviceLocation",
			Handler:    _DataService_DeleteDeviceLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/service/data.proto",
}
