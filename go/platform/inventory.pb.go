// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: platform/inventory.proto

package platform

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InventoryDevice represents a device in the inventory with all necessary configuration.
type InventoryDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EUI (EUI64) - Primary identifier.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Serial number.
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Device name/model.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Device description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Current inventory status.
	Status InventoryStatus `protobuf:"varint,5,opt,name=status,proto3,enum=platform.InventoryStatus" json:"status,omitempty"`
	// Manufacturer information.
	Manufacturer string `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Model number/SKU.
	Model string `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	// Hardware version.
	HardwareVersion string `protobuf:"bytes,8,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	// Firmware version.
	FirmwareVersion string `protobuf:"bytes,9,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// Device type specific configuration JSON.
	Configuration *structpb.Value `protobuf:"bytes,10,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Device Type LoRaWAN Gateway, LoRaWAN Device, Cellular Device, Wifi etc.
	DeviceType DeviceType `protobuf:"varint,11,opt,name=device_type,json=deviceType,proto3,enum=platform.DeviceType" json:"device_type,omitempty"`
	// Asset Type Water Meter, Gas Meter, Energy Meter etc.
	AssetType    AssetType    `protobuf:"varint,12,opt,name=asset_type,json=assetType,proto3,enum=platform.AssetType" json:"asset_type,omitempty"`
	AssetSubType AssetSubType `protobuf:"varint,13,opt,name=asset_sub_type,json=assetSubType,proto3,enum=platform.AssetSubType" json:"asset_sub_type,omitempty"`
	// Device tags/labels.
	Tags map[string]string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional metadata.
	Metadata map[string]string `protobuf:"bytes,15,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Batch/lot information.
	BatchId string `protobuf:"bytes,16,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *InventoryDevice) Reset() {
	*x = InventoryDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryDevice) ProtoMessage() {}

func (x *InventoryDevice) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryDevice.ProtoReflect.Descriptor instead.
func (*InventoryDevice) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *InventoryDevice) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *InventoryDevice) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *InventoryDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryDevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryDevice) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *InventoryDevice) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *InventoryDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InventoryDevice) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *InventoryDevice) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *InventoryDevice) GetConfiguration() *structpb.Value {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *InventoryDevice) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNKNOWN
}

func (x *InventoryDevice) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_ASSET_TYPE_UNKNOWN
}

func (x *InventoryDevice) GetAssetSubType() AssetSubType {
	if x != nil {
		return x.AssetSubType
	}
	return AssetSubType_ASSET_SUB_TYPE_UNKNOWN
}

func (x *InventoryDevice) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *InventoryDevice) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InventoryDevice) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// Request/Response messages.
type CreateInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to create.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateInventoryDeviceRequest) Reset() {
	*x = CreateInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryDeviceRequest) ProtoMessage() {}

func (x *CreateInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInventoryDeviceRequest) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *CreateInventoryDeviceResponse) Reset() {
	*x = CreateInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryDeviceResponse) ProtoMessage() {}

func (x *CreateInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *CreateInventoryDeviceResponse) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type GetInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *GetInventoryDeviceRequest) Reset() {
	*x = GetInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryDeviceRequest) ProtoMessage() {}

func (x *GetInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *GetInventoryDeviceRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type GetInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device information.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetInventoryDeviceResponse) Reset() {
	*x = GetInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryDeviceResponse) ProtoMessage() {}

func (x *GetInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *GetInventoryDeviceResponse) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetInventoryDeviceResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetInventoryDeviceResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device to update.
	Device *InventoryDevice `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateInventoryDeviceRequest) Reset() {
	*x = UpdateInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInventoryDeviceRequest) ProtoMessage() {}

func (x *UpdateInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateInventoryDeviceRequest) GetDevice() *InventoryDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeleteInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *DeleteInventoryDeviceRequest) Reset() {
	*x = DeleteInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInventoryDeviceRequest) ProtoMessage() {}

func (x *DeleteInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteInventoryDeviceRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

type ListInventoryDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of devices to return.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset for pagination.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Filter by manufacturer.
	Manufacturer string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Filter by model.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// Search query (name, description, etc.).
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	// Filter by tags.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListInventoryDevicesRequest) Reset() {
	*x = ListInventoryDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryDevicesRequest) ProtoMessage() {}

func (x *ListInventoryDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListInventoryDevicesRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *ListInventoryDevicesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListInventoryDevicesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListInventoryDevicesRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListInventoryDevicesRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type InventoryDeviceListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Device name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Current status.
	Status InventoryStatus `protobuf:"varint,3,opt,name=status,proto3,enum=platform.InventoryStatus" json:"status,omitempty"`
	// Manufacturer.
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Model.
	Model string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InventoryDeviceListItem) Reset() {
	*x = InventoryDeviceListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryDeviceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryDeviceListItem) ProtoMessage() {}

func (x *InventoryDeviceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryDeviceListItem.ProtoReflect.Descriptor instead.
func (*InventoryDeviceListItem) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *InventoryDeviceListItem) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *InventoryDeviceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryDeviceListItem) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *InventoryDeviceListItem) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *InventoryDeviceListItem) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InventoryDeviceListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryDeviceListItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListInventoryDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count.
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Device list.
	Devices []*InventoryDeviceListItem `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ListInventoryDevicesResponse) Reset() {
	*x = ListInventoryDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryDevicesResponse) ProtoMessage() {}

func (x *ListInventoryDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListInventoryDevicesResponse) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *ListInventoryDevicesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInventoryDevicesResponse) GetDevices() []*InventoryDeviceListItem {
	if x != nil {
		return x.Devices
	}
	return nil
}

type UpdateDeviceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// New status.
	Status InventoryStatus `protobuf:"varint,2,opt,name=status,proto3,enum=platform.InventoryStatus" json:"status,omitempty"`
	// Status update reason/notes.
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *UpdateDeviceStatusRequest) Reset() {
	*x = UpdateDeviceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceStatusRequest) ProtoMessage() {}

func (x *UpdateDeviceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceStatusRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDeviceStatusRequest) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *UpdateDeviceStatusRequest) GetStatus() InventoryStatus {
	if x != nil {
		return x.Status
	}
	return InventoryStatus_INVENTORY_STATUS_INVENTORY
}

func (x *UpdateDeviceStatusRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type BulkImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices to import.
	Devices []*InventoryDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Skip devices that already exist.
	SkipExisting bool `protobuf:"varint,2,opt,name=skip_existing,json=skipExisting,proto3" json:"skip_existing,omitempty"`
}

func (x *BulkImportRequest) Reset() {
	*x = BulkImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkImportRequest) ProtoMessage() {}

func (x *BulkImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkImportRequest.ProtoReflect.Descriptor instead.
func (*BulkImportRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *BulkImportRequest) GetDevices() []*InventoryDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *BulkImportRequest) GetSkipExisting() bool {
	if x != nil {
		return x.SkipExisting
	}
	return false
}

type BulkImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of devices successfully imported.
	ImportedCount uint32 `protobuf:"varint,1,opt,name=imported_count,json=importedCount,proto3" json:"imported_count,omitempty"`
	// Number of devices skipped.
	SkippedCount uint32 `protobuf:"varint,2,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	// Number of devices failed.
	FailedCount uint32 `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	// Import errors.
	Errors []*ImportError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BulkImportResponse) Reset() {
	*x = BulkImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkImportResponse) ProtoMessage() {}

func (x *BulkImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkImportResponse.ProtoReflect.Descriptor instead.
func (*BulkImportResponse) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *BulkImportResponse) GetImportedCount() uint32 {
	if x != nil {
		return x.ImportedCount
	}
	return 0
}

func (x *BulkImportResponse) GetSkippedCount() uint32 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *BulkImportResponse) GetFailedCount() uint32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BulkImportResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ImportError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI that failed.
	Eui string `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Error message.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ImportError) Reset() {
	*x = ImportError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportError) ProtoMessage() {}

func (x *ImportError) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportError.ProtoReflect.Descriptor instead.
func (*ImportError) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *ImportError) GetEui() string {
	if x != nil {
		return x.Eui
	}
	return ""
}

func (x *ImportError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SearchInventoryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search criteria.
	Criteria map[string]string `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maximum results.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchInventoryDeviceRequest) Reset() {
	*x = SearchInventoryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInventoryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInventoryDeviceRequest) ProtoMessage() {}

func (x *SearchInventoryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInventoryDeviceRequest.ProtoReflect.Descriptor instead.
func (*SearchInventoryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *SearchInventoryDeviceRequest) GetCriteria() map[string]string {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *SearchInventoryDeviceRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchInventoryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Found devices.
	Devices []*InventoryDeviceListItem `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *SearchInventoryDeviceResponse) Reset() {
	*x = SearchInventoryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_inventory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInventoryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInventoryDeviceResponse) ProtoMessage() {}

func (x *SearchInventoryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_platform_inventory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInventoryDeviceResponse.ProtoReflect.Descriptor instead.
func (*SearchInventoryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_platform_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *SearchInventoryDeviceResponse) GetDevices() []*InventoryDeviceListItem {
	if x != nil {
		return x.Devices
	}
	return nil
}

var File_platform_inventory_proto protoreflect.FileDescriptor

var file_platform_inventory_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x06, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75,
	0x69, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0x2d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x51, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x75, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7c, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x6d, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0xb2, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x1c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5c, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32,
	0xe4, 0x07, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75, 0x69, 0x7d, 0x12, 0x78, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x65, 0x75, 0x69, 0x7d, 0x12, 0x6e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x75, 0x69, 0x7d, 0x12, 0x75, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x75, 0x69,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x83, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x61, 0x72, 0x6b, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76,
	0x34, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_platform_inventory_proto_rawDescOnce sync.Once
	file_platform_inventory_proto_rawDescData = file_platform_inventory_proto_rawDesc
)

func file_platform_inventory_proto_rawDescGZIP() []byte {
	file_platform_inventory_proto_rawDescOnce.Do(func() {
		file_platform_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_inventory_proto_rawDescData)
	})
	return file_platform_inventory_proto_rawDescData
}

var file_platform_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_platform_inventory_proto_goTypes = []any{
	(*InventoryDevice)(nil),               // 0: platform.InventoryDevice
	(*CreateInventoryDeviceRequest)(nil),  // 1: platform.CreateInventoryDeviceRequest
	(*CreateInventoryDeviceResponse)(nil), // 2: platform.CreateInventoryDeviceResponse
	(*GetInventoryDeviceRequest)(nil),     // 3: platform.GetInventoryDeviceRequest
	(*GetInventoryDeviceResponse)(nil),    // 4: platform.GetInventoryDeviceResponse
	(*UpdateInventoryDeviceRequest)(nil),  // 5: platform.UpdateInventoryDeviceRequest
	(*DeleteInventoryDeviceRequest)(nil),  // 6: platform.DeleteInventoryDeviceRequest
	(*ListInventoryDevicesRequest)(nil),   // 7: platform.ListInventoryDevicesRequest
	(*InventoryDeviceListItem)(nil),       // 8: platform.InventoryDeviceListItem
	(*ListInventoryDevicesResponse)(nil),  // 9: platform.ListInventoryDevicesResponse
	(*UpdateDeviceStatusRequest)(nil),     // 10: platform.UpdateDeviceStatusRequest
	(*BulkImportRequest)(nil),             // 11: platform.BulkImportRequest
	(*BulkImportResponse)(nil),            // 12: platform.BulkImportResponse
	(*ImportError)(nil),                   // 13: platform.ImportError
	(*SearchInventoryDeviceRequest)(nil),  // 14: platform.SearchInventoryDeviceRequest
	(*SearchInventoryDeviceResponse)(nil), // 15: platform.SearchInventoryDeviceResponse
	nil,                                   // 16: platform.InventoryDevice.TagsEntry
	nil,                                   // 17: platform.InventoryDevice.MetadataEntry
	nil,                                   // 18: platform.ListInventoryDevicesRequest.TagsEntry
	nil,                                   // 19: platform.SearchInventoryDeviceRequest.CriteriaEntry
	(InventoryStatus)(0),                  // 20: platform.InventoryStatus
	(*structpb.Value)(nil),                // 21: google.protobuf.Value
	(DeviceType)(0),                       // 22: platform.DeviceType
	(AssetType)(0),                        // 23: platform.AssetType
	(AssetSubType)(0),                     // 24: platform.AssetSubType
	(*timestamppb.Timestamp)(nil),         // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 26: google.protobuf.Empty
}
var file_platform_inventory_proto_depIdxs = []int32{
	20, // 0: platform.InventoryDevice.status:type_name -> platform.InventoryStatus
	21, // 1: platform.InventoryDevice.configuration:type_name -> google.protobuf.Value
	22, // 2: platform.InventoryDevice.device_type:type_name -> platform.DeviceType
	23, // 3: platform.InventoryDevice.asset_type:type_name -> platform.AssetType
	24, // 4: platform.InventoryDevice.asset_sub_type:type_name -> platform.AssetSubType
	16, // 5: platform.InventoryDevice.tags:type_name -> platform.InventoryDevice.TagsEntry
	17, // 6: platform.InventoryDevice.metadata:type_name -> platform.InventoryDevice.MetadataEntry
	0,  // 7: platform.CreateInventoryDeviceRequest.device:type_name -> platform.InventoryDevice
	0,  // 8: platform.GetInventoryDeviceResponse.device:type_name -> platform.InventoryDevice
	25, // 9: platform.GetInventoryDeviceResponse.created_at:type_name -> google.protobuf.Timestamp
	25, // 10: platform.GetInventoryDeviceResponse.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 11: platform.UpdateInventoryDeviceRequest.device:type_name -> platform.InventoryDevice
	18, // 12: platform.ListInventoryDevicesRequest.tags:type_name -> platform.ListInventoryDevicesRequest.TagsEntry
	20, // 13: platform.InventoryDeviceListItem.status:type_name -> platform.InventoryStatus
	25, // 14: platform.InventoryDeviceListItem.created_at:type_name -> google.protobuf.Timestamp
	25, // 15: platform.InventoryDeviceListItem.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 16: platform.ListInventoryDevicesResponse.devices:type_name -> platform.InventoryDeviceListItem
	20, // 17: platform.UpdateDeviceStatusRequest.status:type_name -> platform.InventoryStatus
	0,  // 18: platform.BulkImportRequest.devices:type_name -> platform.InventoryDevice
	13, // 19: platform.BulkImportResponse.errors:type_name -> platform.ImportError
	19, // 20: platform.SearchInventoryDeviceRequest.criteria:type_name -> platform.SearchInventoryDeviceRequest.CriteriaEntry
	8,  // 21: platform.SearchInventoryDeviceResponse.devices:type_name -> platform.InventoryDeviceListItem
	1,  // 22: platform.InventoryService.Create:input_type -> platform.CreateInventoryDeviceRequest
	3,  // 23: platform.InventoryService.Get:input_type -> platform.GetInventoryDeviceRequest
	5,  // 24: platform.InventoryService.Update:input_type -> platform.UpdateInventoryDeviceRequest
	6,  // 25: platform.InventoryService.Delete:input_type -> platform.DeleteInventoryDeviceRequest
	7,  // 26: platform.InventoryService.List:input_type -> platform.ListInventoryDevicesRequest
	10, // 27: platform.InventoryService.UpdateStatus:input_type -> platform.UpdateDeviceStatusRequest
	11, // 28: platform.InventoryService.BulkImport:input_type -> platform.BulkImportRequest
	14, // 29: platform.InventoryService.Search:input_type -> platform.SearchInventoryDeviceRequest
	2,  // 30: platform.InventoryService.Create:output_type -> platform.CreateInventoryDeviceResponse
	4,  // 31: platform.InventoryService.Get:output_type -> platform.GetInventoryDeviceResponse
	26, // 32: platform.InventoryService.Update:output_type -> google.protobuf.Empty
	26, // 33: platform.InventoryService.Delete:output_type -> google.protobuf.Empty
	9,  // 34: platform.InventoryService.List:output_type -> platform.ListInventoryDevicesResponse
	26, // 35: platform.InventoryService.UpdateStatus:output_type -> google.protobuf.Empty
	12, // 36: platform.InventoryService.BulkImport:output_type -> platform.BulkImportResponse
	15, // 37: platform.InventoryService.Search:output_type -> platform.SearchInventoryDeviceResponse
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_platform_inventory_proto_init() }
func file_platform_inventory_proto_init() {
	if File_platform_inventory_proto != nil {
		return
	}
	file_platform_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_platform_inventory_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*InventoryDeviceListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDeviceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BulkImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BulkImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ImportError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SearchInventoryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_inventory_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SearchInventoryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_inventory_proto_goTypes,
		DependencyIndexes: file_platform_inventory_proto_depIdxs,
		MessageInfos:      file_platform_inventory_proto_msgTypes,
	}.Build()
	File_platform_inventory_proto = out.File
	file_platform_inventory_proto_rawDesc = nil
	file_platform_inventory_proto_goTypes = nil
	file_platform_inventory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Create a new device in inventory.
	Create(ctx context.Context, in *CreateInventoryDeviceRequest, opts ...grpc.CallOption) (*CreateInventoryDeviceResponse, error)
	// Get device from inventory by EUI.
	Get(ctx context.Context, in *GetInventoryDeviceRequest, opts ...grpc.CallOption) (*GetInventoryDeviceResponse, error)
	// Update device in inventory.
	Update(ctx context.Context, in *UpdateInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete device from inventory.
	Delete(ctx context.Context, in *DeleteInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List devices in inventory with filtering.
	List(ctx context.Context, in *ListInventoryDevicesRequest, opts ...grpc.CallOption) (*ListInventoryDevicesResponse, error)
	// Update device status (onboarded/provisioned).
	UpdateStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bulk import devices to inventory.
	BulkImport(ctx context.Context, in *BulkImportRequest, opts ...grpc.CallOption) (*BulkImportResponse, error)
	// Search for device by various criteria.
	Search(ctx context.Context, in *SearchInventoryDeviceRequest, opts ...grpc.CallOption) (*SearchInventoryDeviceResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) Create(ctx context.Context, in *CreateInventoryDeviceRequest, opts ...grpc.CallOption) (*CreateInventoryDeviceResponse, error) {
	out := new(CreateInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Get(ctx context.Context, in *GetInventoryDeviceRequest, opts ...grpc.CallOption) (*GetInventoryDeviceResponse, error) {
	out := new(GetInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Update(ctx context.Context, in *UpdateInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Delete(ctx context.Context, in *DeleteInventoryDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) List(ctx context.Context, in *ListInventoryDevicesRequest, opts ...grpc.CallOption) (*ListInventoryDevicesResponse, error) {
	out := new(ListInventoryDevicesResponse)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BulkImport(ctx context.Context, in *BulkImportRequest, opts ...grpc.CallOption) (*BulkImportResponse, error) {
	out := new(BulkImportResponse)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/BulkImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Search(ctx context.Context, in *SearchInventoryDeviceRequest, opts ...grpc.CallOption) (*SearchInventoryDeviceResponse, error) {
	out := new(SearchInventoryDeviceResponse)
	err := c.cc.Invoke(ctx, "/platform.InventoryService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
type InventoryServiceServer interface {
	// Create a new device in inventory.
	Create(context.Context, *CreateInventoryDeviceRequest) (*CreateInventoryDeviceResponse, error)
	// Get device from inventory by EUI.
	Get(context.Context, *GetInventoryDeviceRequest) (*GetInventoryDeviceResponse, error)
	// Update device in inventory.
	Update(context.Context, *UpdateInventoryDeviceRequest) (*emptypb.Empty, error)
	// Delete device from inventory.
	Delete(context.Context, *DeleteInventoryDeviceRequest) (*emptypb.Empty, error)
	// List devices in inventory with filtering.
	List(context.Context, *ListInventoryDevicesRequest) (*ListInventoryDevicesResponse, error)
	// Update device status (onboarded/provisioned).
	UpdateStatus(context.Context, *UpdateDeviceStatusRequest) (*emptypb.Empty, error)
	// Bulk import devices to inventory.
	BulkImport(context.Context, *BulkImportRequest) (*BulkImportResponse, error)
	// Search for device by various criteria.
	Search(context.Context, *SearchInventoryDeviceRequest) (*SearchInventoryDeviceResponse, error)
}

// UnimplementedInventoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (*UnimplementedInventoryServiceServer) Create(context.Context, *CreateInventoryDeviceRequest) (*CreateInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedInventoryServiceServer) Get(context.Context, *GetInventoryDeviceRequest) (*GetInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedInventoryServiceServer) Update(context.Context, *UpdateInventoryDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedInventoryServiceServer) Delete(context.Context, *DeleteInventoryDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedInventoryServiceServer) List(context.Context, *ListInventoryDevicesRequest) (*ListInventoryDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedInventoryServiceServer) UpdateStatus(context.Context, *UpdateDeviceStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedInventoryServiceServer) BulkImport(context.Context, *BulkImportRequest) (*BulkImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkImport not implemented")
}
func (*UnimplementedInventoryServiceServer) Search(context.Context, *SearchInventoryDeviceRequest) (*SearchInventoryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Create(ctx, req.(*CreateInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Get(ctx, req.(*GetInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Update(ctx, req.(*UpdateInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Delete(ctx, req.(*DeleteInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInventoryDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).List(ctx, req.(*ListInventoryDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateStatus(ctx, req.(*UpdateDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BulkImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BulkImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/BulkImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BulkImport(ctx, req.(*BulkImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInventoryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.InventoryService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Search(ctx, req.(*SearchInventoryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "platform.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InventoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InventoryService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InventoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InventoryService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InventoryService_List_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _InventoryService_UpdateStatus_Handler,
		},
		{
			MethodName: "BulkImport",
			Handler:    _InventoryService_BulkImport_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _InventoryService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/inventory.proto",
}
