{
  "swagger": "2.0",
  "info": {
    "title": "external/service/data.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/data": {
      "post": {
        "summary": "Insert device data point(s).",
        "operationId": "DataService_Insert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiInsertDataRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/aggregated": {
      "post": {
        "summary": "Get aggregated device data (for dashboards, analytics).",
        "operationId": "DataService_GetAggregatedData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAggregatedDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiGetAggregatedDataRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/devices/bulk": {
      "post": {
        "summary": "Get data for multiple devices.",
        "operationId": "DataService_GetMultiDeviceData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMultiDeviceDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiGetMultiDeviceDataRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/devices/locations": {
      "post": {
        "summary": "Get locations for multiple devices.",
        "operationId": "DataService_GetMultiDeviceLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMultiDeviceLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiGetMultiDeviceLocationRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/devices/{eui}": {
      "get": {
        "summary": "Get device data for a specific device within a time range.",
        "operationId": "DataService_GetDeviceData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time for data range.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "End time for data range.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "Maximum number of data points to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeDecoded",
            "description": "Include decoded data in response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeSignalMetrics",
            "description": "Include signal metrics in response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "transportProtocols",
            "description": "Filter by transport protocol.\n\n - PROTOCOL_UNKNOWN: Unknown protocol.\n - LORAWAN: LoRaWAN.\n - CELLULAR_HTTP: HTTP/HTTPS over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_MQTT: MQTT over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_TCP: TCP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_UDP: UDP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_COAP: CoAP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - HTTP: HTTP/HTTPS over WiFi/Ethernet.\n - MQTT: MQTT over WiFi/Ethernet.\n - TCP: TCP over WiFi/Ethernet.\n - UDP: UDP over WiFi/Ethernet.\n - COAP: CoAP over WiFi/Ethernet.\n - WEBSOCKET: WebSocket.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PROTOCOL_UNKNOWN",
                "LORAWAN",
                "CELLULAR_HTTP",
                "CELLULAR_MQTT",
                "CELLULAR_TCP",
                "CELLULAR_UDP",
                "CELLULAR_COAP",
                "HTTP",
                "MQTT",
                "TCP",
                "UDP",
                "COAP",
                "WEBSOCKET"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fPorts",
            "description": "Filter by frame port (LoRaWAN specific).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mqttTopics",
            "description": "Filter by MQTT topics (MQTT specific).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "httpMethods",
            "description": "Filter by HTTP methods (HTTP specific).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DataService"
        ]
      },
      "delete": {
        "summary": "Delete device data (for GDPR compliance, data retention).",
        "operationId": "DataService_DeleteDeviceData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Start time for deletion range (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "End time for deletion range (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/devices/{eui}/latest": {
      "get": {
        "summary": "Get latest data point for a device.",
        "operationId": "DataService_GetLatestData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetLatestDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDecoded",
            "description": "Include decoded data in response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeSignalMetrics",
            "description": "Include signal metrics in response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/devices/{eui}/location": {
      "get": {
        "summary": "Get device location (current/latest location).",
        "operationId": "DataService_GetDeviceLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DataService"
        ]
      },
      "delete": {
        "summary": "Delete device location.",
        "operationId": "DataService_DeleteDeviceLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DataService"
        ]
      },
      "put": {
        "summary": "Update device location (latest location is stored separately).",
        "operationId": "DataService_UpdateDeviceLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "eui",
            "description": "EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceLocationRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    },
    "/api/data/stats": {
      "post": {
        "summary": "Get data statistics for a device or application.",
        "operationId": "DataService_GetDataStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDataStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiGetDataStatsRequest"
            }
          }
        ],
        "tags": [
          "DataService"
        ]
      }
    }
  },
  "definitions": {
    "apiAggregatedDataPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (bucket start time)."
        },
        "eui": {
          "type": "string",
          "description": "EUI (if grouped by device)."
        },
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Aggregated values by field name."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Count of data points in this bucket."
        }
      },
      "description": "Aggregated data point."
    },
    "apiAggregationType": {
      "type": "string",
      "enum": [
        "NONE_NO",
        "AVG",
        "MIN",
        "MAX",
        "SUM",
        "COUNT",
        "FIRST",
        "LAST"
      ],
      "default": "NONE_NO",
      "description": "Aggregation type for time-series data.\n\n - NONE_NO: No aggregation (raw data).\n - AVG: Average values.\n - MIN: Minimum values.\n - MAX: Maximum values.\n - SUM: Sum of values.\n - COUNT: Count of data points.\n - FIRST: First value in time window.\n - LAST: Last value in time window."
    },
    "apiCellularMetadata": {
      "type": "object",
      "properties": {
        "imei": {
          "type": "string",
          "description": "IMEI of the device."
        },
        "imsi": {
          "type": "string",
          "description": "IMSI of the SIM card."
        },
        "cellId": {
          "type": "string",
          "description": "Cell ID."
        },
        "mcc": {
          "type": "string",
          "description": "Mobile Country Code."
        },
        "mnc": {
          "type": "string",
          "description": "Mobile Network Code."
        },
        "lac": {
          "type": "string",
          "description": "Location Area Code."
        },
        "networkType": {
          "type": "string",
          "description": "Network type (2G, 3G, 4G, 5G, NB-IoT, LTE-M)."
        }
      },
      "description": "Cellular specific metadata."
    },
    "apiCoAPMetadata": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "CoAP method (GET, POST, PUT, DELETE)."
        },
        "uriPath": {
          "type": "string",
          "description": "URI path."
        },
        "messageType": {
          "type": "string",
          "description": "Message type (CON, NON, ACK, RST)."
        },
        "messageId": {
          "type": "integer",
          "format": "int64",
          "description": "Message ID."
        },
        "token": {
          "type": "string",
          "format": "byte",
          "description": "Token."
        },
        "responseCode": {
          "type": "string",
          "description": "Response code."
        },
        "contentFormat": {
          "type": "integer",
          "format": "int64",
          "description": "Content format."
        }
      },
      "description": "CoAP specific metadata."
    },
    "apiDataSizeStats": {
      "type": "object",
      "properties": {
        "totalBytes": {
          "type": "string",
          "format": "uint64",
          "description": "Total bytes stored."
        },
        "avgMessageSize": {
          "type": "number",
          "format": "double",
          "description": "Average message size in bytes."
        },
        "minMessageSize": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum message size in bytes."
        },
        "maxMessageSize": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message size in bytes."
        }
      },
      "description": "Data size statistics."
    },
    "apiDataStats": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of data points."
        },
        "firstTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "First data timestamp."
        },
        "lastTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last data timestamp."
        },
        "avgDataRate": {
          "type": "number",
          "format": "double",
          "description": "Average data rate (messages per hour)."
        },
        "uniqueDevices": {
          "type": "integer",
          "format": "int64",
          "description": "Unique devices count (for application stats)."
        },
        "sizeStats": {
          "$ref": "#/definitions/apiDataSizeStats",
          "description": "Data size statistics."
        }
      },
      "description": "Data statistics."
    },
    "apiDeviceData": {
      "type": "object",
      "properties": {
        "eui": {
          "type": "string",
          "description": "EUI (EUI64) - Device EUI or Gateway EUI."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the data was received."
        },
        "transportProtocol": {
          "$ref": "#/definitions/apiTransportProtocol",
          "description": "Transport protocol used."
        },
        "data": {
          "type": "string",
          "description": "Raw payload data (base64 encoded)."
        },
        "decodedData": {
          "type": "string",
          "description": "Decoded data (JSON object as string)."
        },
        "signalMetrics": {
          "$ref": "#/definitions/apiSignalMetrics",
          "description": "Signal quality metrics (protocol-specific)."
        },
        "location": {
          "$ref": "#/definitions/apiDeviceLocation",
          "description": "Device location (for location history tracking)."
        },
        "protocolMetadata": {
          "$ref": "#/definitions/apiProtocolMetadata",
          "description": "Protocol-specific metadata."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata."
        }
      },
      "description": "DeviceData represents a single data point from a device or gateway.\nSupports data from multiple protocols: LoRaWAN, Cellular, HTTP, MQTT, TCP, UDP, CoAP."
    },
    "apiDeviceLocation": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude in decimal degrees."
        },
        "altitude": {
          "type": "number",
          "format": "double",
          "description": "Altitude in meters."
        },
        "accuracy": {
          "type": "number",
          "format": "float",
          "description": "Accuracy in meters."
        },
        "source": {
          "$ref": "#/definitions/apiSource",
          "description": "Location source."
        }
      },
      "description": "Device location information."
    },
    "apiGetAggregatedDataRequest": {
      "type": "object",
      "properties": {
        "euis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "EUI(s) to get data for."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time for data range."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time for data range."
        },
        "aggregation": {
          "$ref": "#/definitions/apiAggregationType",
          "description": "Aggregation type."
        },
        "interval": {
          "$ref": "#/definitions/apiTimeInterval",
          "description": "Time interval for aggregation."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Fields to aggregate (e.g., \"temperature\", \"humidity\")."
        },
        "groupByDevice": {
          "type": "boolean",
          "description": "Group by device (if false, aggregate across all devices)."
        }
      },
      "description": "Request for aggregated data."
    },
    "apiGetAggregatedDataResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAggregatedDataPoint"
          },
          "description": "Aggregated data points."
        }
      },
      "description": "Response containing aggregated data."
    },
    "apiGetDataStatsRequest": {
      "type": "object",
      "properties": {
        "eui": {
          "type": "string",
          "description": "EUI (optional, if not set, stats for all devices)."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time for stats range."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time for stats range."
        }
      },
      "description": "Request for data statistics."
    },
    "apiGetDataStatsResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "$ref": "#/definitions/apiDataStats",
          "description": "Statistics."
        }
      },
      "description": "Response containing data statistics."
    },
    "apiGetDeviceDataResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total count of data points available."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceData"
          },
          "description": "Data points."
        }
      },
      "description": "Response containing device data."
    },
    "apiGetDeviceLocationResponse": {
      "type": "object",
      "properties": {
        "eui": {
          "type": "string",
          "description": "EUI (EUI64)."
        },
        "location": {
          "$ref": "#/definitions/apiDeviceLocation",
          "description": "Device location."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when location was last updated."
        },
        "sourceInfo": {
          "type": "string",
          "description": "Source that provided this location."
        }
      },
      "description": "Response containing device location."
    },
    "apiGetLatestDataResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiDeviceData",
          "description": "Latest data point (null if no data available)."
        }
      },
      "description": "Response containing latest data."
    },
    "apiGetMultiDeviceDataRequest": {
      "type": "object",
      "properties": {
        "euis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "EUIs to get data for."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time for data range."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time for data range."
        },
        "limitPerDevice": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of data points per device."
        },
        "includeDecoded": {
          "type": "boolean",
          "description": "Include decoded data in response."
        }
      },
      "description": "Request for multi-device data."
    },
    "apiGetMultiDeviceDataResponse": {
      "type": "object",
      "properties": {
        "deviceData": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiGetDeviceDataResponse"
          },
          "description": "Data grouped by EUI."
        }
      },
      "description": "Response containing multi-device data."
    },
    "apiGetMultiDeviceLocationRequest": {
      "type": "object",
      "properties": {
        "euis": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "EUIs to get locations for."
        }
      },
      "description": "Request to get locations for multiple devices."
    },
    "apiGetMultiDeviceLocationResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiGetDeviceLocationResponse"
          },
          "description": "Device locations grouped by EUI."
        }
      },
      "description": "Response containing multiple device locations."
    },
    "apiHTTPMetadata": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "HTTP method used."
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Request headers."
        },
        "queryParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Query parameters."
        },
        "statusCode": {
          "type": "integer",
          "format": "int64",
          "description": "HTTP status code (for responses)."
        },
        "contentType": {
          "type": "string",
          "description": "Content type."
        },
        "userAgent": {
          "type": "string",
          "description": "User agent."
        },
        "remoteIp": {
          "type": "string",
          "description": "Remote IP address."
        }
      },
      "description": "HTTP specific metadata."
    },
    "apiInsertDataRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceData"
          },
          "description": "Single data point or batch of data points."
        }
      },
      "description": "Request to insert device data."
    },
    "apiLoRaWANMetadata": {
      "type": "object",
      "properties": {
        "fCnt": {
          "type": "integer",
          "format": "int64",
          "description": "Frame counter."
        },
        "fPort": {
          "type": "integer",
          "format": "int64",
          "description": "Frame port."
        },
        "dataRate": {
          "type": "string",
          "description": "Data rate."
        },
        "confirmed": {
          "type": "boolean",
          "description": "Confirmed/unconfirmed uplink."
        },
        "gatewayCount": {
          "type": "integer",
          "format": "int64",
          "description": "Gateway count that received the message."
        }
      },
      "description": "LoRaWAN specific metadata."
    },
    "apiMQTTMetadata": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string",
          "description": "Topic the message was published to."
        },
        "qos": {
          "type": "integer",
          "format": "int64",
          "description": "QoS level (0, 1, 2)."
        },
        "retain": {
          "type": "boolean",
          "description": "Retain flag."
        },
        "messageId": {
          "type": "string",
          "description": "Message ID."
        },
        "clientId": {
          "type": "string",
          "description": "Client ID."
        },
        "broker": {
          "type": "string",
          "description": "Broker hostname/IP."
        }
      },
      "description": "MQTT specific metadata."
    },
    "apiProtocolMetadata": {
      "type": "object",
      "properties": {
        "lorawan": {
          "$ref": "#/definitions/apiLoRaWANMetadata",
          "description": "LoRaWAN specific metadata."
        },
        "cellular": {
          "$ref": "#/definitions/apiCellularMetadata",
          "description": "Cellular network metadata (for all cellular protocols)."
        },
        "http": {
          "$ref": "#/definitions/apiHTTPMetadata",
          "description": "HTTP specific metadata (works with both cellular and WiFi/Ethernet)."
        },
        "mqtt": {
          "$ref": "#/definitions/apiMQTTMetadata",
          "description": "MQTT specific metadata (works with both cellular and WiFi/Ethernet)."
        },
        "tcp": {
          "$ref": "#/definitions/apiTCPMetadata",
          "description": "TCP specific metadata (works with both cellular and WiFi/Ethernet)."
        },
        "udp": {
          "$ref": "#/definitions/apiUDPMetadata",
          "description": "UDP specific metadata (works with both cellular and WiFi/Ethernet)."
        },
        "coap": {
          "$ref": "#/definitions/apiCoAPMetadata",
          "description": "CoAP specific metadata (works with both cellular and WiFi/Ethernet)."
        },
        "websocket": {
          "$ref": "#/definitions/apiWebSocketMetadata",
          "description": "WebSocket specific metadata."
        }
      },
      "description": "Protocol-specific metadata for different transport protocols."
    },
    "apiSignalMetrics": {
      "type": "object",
      "properties": {
        "rssi": {
          "type": "integer",
          "format": "int32",
          "description": "RSSI (Received Signal Strength Indicator) in dBm (LoRaWAN, Cellular)."
        },
        "snr": {
          "type": "number",
          "format": "float",
          "description": "SNR (Signal-to-Noise Ratio) in dB (LoRaWAN)."
        },
        "spreadingFactor": {
          "type": "integer",
          "format": "int64",
          "description": "Spreading factor (LoRaWAN specific)."
        },
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth in Hz (LoRaWAN specific)."
        },
        "frequency": {
          "type": "string",
          "format": "uint64",
          "description": "Frequency in Hz (LoRaWAN specific)."
        },
        "signalStrengthPercent": {
          "type": "integer",
          "format": "int64",
          "description": "Signal strength percentage (0-100) for other protocols."
        },
        "lqi": {
          "type": "integer",
          "format": "int64",
          "description": "Link quality indicator (cellular specific)."
        }
      },
      "description": "Signal quality metrics (protocol-specific)."
    },
    "apiSource": {
      "type": "string",
      "enum": [
        "LOCATION_UNKNOWN",
        "GPS",
        "MANUAL",
        "TRIANGULATION",
        "WIFI",
        "MANUAL_OVERRIDE"
      ],
      "default": "LOCATION_UNKNOWN",
      "description": "Location source enumeration.\n\n - LOCATION_UNKNOWN: Unknown location source.\n - GPS: GPS coordinates.\n - MANUAL: Manually configured.\n - TRIANGULATION: Calculated via triangulation.\n - WIFI: WiFi-based location.\n - MANUAL_OVERRIDE: Manual"
    },
    "apiTCPMetadata": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string",
          "description": "Source IP address."
        },
        "sourcePort": {
          "type": "integer",
          "format": "int64",
          "description": "Source port."
        },
        "destinationIp": {
          "type": "string",
          "description": "Destination IP address."
        },
        "destinationPort": {
          "type": "integer",
          "format": "int64",
          "description": "Destination port."
        },
        "connectionState": {
          "type": "string",
          "description": "Connection state."
        }
      },
      "description": "TCP specific metadata."
    },
    "apiTimeInterval": {
      "type": "string",
      "enum": [
        "MINUTE",
        "MINUTE_5",
        "MINUTE_15",
        "MINUTE_30",
        "HOUR",
        "HOUR_6",
        "HOUR_12",
        "DAY",
        "WEEK",
        "MONTH"
      ],
      "default": "MINUTE",
      "description": "Time interval for aggregation.\n\n - MINUTE: 1 minute intervals.\n - MINUTE_5: 5 minute intervals.\n - MINUTE_15: 15 minute intervals.\n - MINUTE_30: 30 minute intervals.\n - HOUR: 1 hour intervals.\n - HOUR_6: 6 hour intervals.\n - HOUR_12: 12 hour intervals.\n - DAY: 1 day intervals.\n - WEEK: 1 week intervals.\n - MONTH: 1 month intervals."
    },
    "apiTransportProtocol": {
      "type": "string",
      "enum": [
        "PROTOCOL_UNKNOWN",
        "LORAWAN",
        "CELLULAR_HTTP",
        "CELLULAR_MQTT",
        "CELLULAR_TCP",
        "CELLULAR_UDP",
        "CELLULAR_COAP",
        "HTTP",
        "MQTT",
        "TCP",
        "UDP",
        "COAP",
        "WEBSOCKET"
      ],
      "default": "PROTOCOL_UNKNOWN",
      "description": "Transport protocol enumeration.\n\n - PROTOCOL_UNKNOWN: Unknown protocol.\n - LORAWAN: LoRaWAN.\n - CELLULAR_HTTP: HTTP/HTTPS over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_MQTT: MQTT over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_TCP: TCP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_UDP: UDP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - CELLULAR_COAP: CoAP over cellular (2G/3G/4G/5G/NB-IoT/LTE-M).\n - HTTP: HTTP/HTTPS over WiFi/Ethernet.\n - MQTT: MQTT over WiFi/Ethernet.\n - TCP: TCP over WiFi/Ethernet.\n - UDP: UDP over WiFi/Ethernet.\n - COAP: CoAP over WiFi/Ethernet.\n - WEBSOCKET: WebSocket."
    },
    "apiUDPMetadata": {
      "type": "object",
      "properties": {
        "sourceIp": {
          "type": "string",
          "description": "Source IP address."
        },
        "sourcePort": {
          "type": "integer",
          "format": "int64",
          "description": "Source port."
        },
        "destinationIp": {
          "type": "string",
          "description": "Destination IP address."
        },
        "destinationPort": {
          "type": "integer",
          "format": "int64",
          "description": "Destination port."
        },
        "packetSize": {
          "type": "integer",
          "format": "int64",
          "description": "Packet size."
        }
      },
      "description": "UDP specific metadata."
    },
    "apiUpdateDeviceLocationRequest": {
      "type": "object",
      "properties": {
        "eui": {
          "type": "string",
          "description": "EUI (EUI64)."
        },
        "location": {
          "$ref": "#/definitions/apiDeviceLocation",
          "description": "Device location."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when location was updated (optional, defaults to current time)."
        },
        "sourceInfo": {
          "type": "string",
          "description": "Source that provided this location update."
        }
      },
      "description": "Request to update device location."
    },
    "apiWebSocketMetadata": {
      "type": "object",
      "properties": {
        "subprotocol": {
          "type": "string",
          "description": "WebSocket subprotocol."
        },
        "messageType": {
          "type": "string",
          "description": "Message type (text, binary, ping, pong, close)."
        },
        "endpoint": {
          "type": "string",
          "description": "WebSocket endpoint URL."
        },
        "connectionState": {
          "type": "string",
          "description": "Connection state."
        },
        "remoteIp": {
          "type": "string",
          "description": "Remote IP address."
        }
      },
      "description": "WebSocket specific metadata."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
